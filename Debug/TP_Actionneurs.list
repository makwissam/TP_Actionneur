
TP_Actionneurs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007518  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  080076f8  080076f8  000176f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007930  08007930  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007930  08007930  00017930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007938  08007938  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007938  08007938  00017938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800793c  0800793c  0001793c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000078  080079b8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  080079b8  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ade  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b05  00000000  00000000  00034b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00037690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b0  00000000  00000000  00038840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e8a7  00000000  00000000  000398f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012cab  00000000  00000000  00058197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7033  00000000  00000000  0006ae42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00131e75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005368  00000000  00000000  00131ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	080076e0 	.word	0x080076e0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	080076e0 	.word	0x080076e0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	; 0x28
 80005ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <MX_GPIO_Init+0xd0>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	4a2d      	ldr	r2, [pc, #180]	; (80006b8 <MX_GPIO_Init+0xd0>)
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060a:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <MX_GPIO_Init+0xd0>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000616:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <MX_GPIO_Init+0xd0>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	4a27      	ldr	r2, [pc, #156]	; (80006b8 <MX_GPIO_Init+0xd0>)
 800061c:	f043 0320 	orr.w	r3, r3, #32
 8000620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000622:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <MX_GPIO_Init+0xd0>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	f003 0320 	and.w	r3, r3, #32
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <MX_GPIO_Init+0xd0>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <MX_GPIO_Init+0xd0>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_GPIO_Init+0xd0>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <MX_GPIO_Init+0xd0>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	4a1b      	ldr	r2, [pc, #108]	; (80006b8 <MX_GPIO_Init+0xd0>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <MX_GPIO_Init+0xd0>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2180      	movs	r1, #128	; 0x80
 8000662:	4816      	ldr	r0, [pc, #88]	; (80006bc <MX_GPIO_Init+0xd4>)
 8000664:	f001 fbfa 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_GPIO_Init+0xd8>)
 8000670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	480f      	ldr	r0, [pc, #60]	; (80006bc <MX_GPIO_Init+0xd4>)
 800067e:	f001 fa6b 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000682:	2380      	movs	r3, #128	; 0x80
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	4808      	ldr	r0, [pc, #32]	; (80006bc <MX_GPIO_Init+0xd4>)
 800069a:	f001 fa5d 	bl	8001b58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	2028      	movs	r0, #40	; 0x28
 80006a4:	f001 f963 	bl	800196e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006a8:	2028      	movs	r0, #40	; 0x28
 80006aa:	f001 f97a 	bl	80019a2 <HAL_NVIC_EnableIRQ>

}
 80006ae:	bf00      	nop
 80006b0:	3728      	adds	r7, #40	; 0x28
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000
 80006bc:	48000800 	.word	0x48000800
 80006c0:	10210000 	.word	0x10210000

080006c4 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80006cc:	1d39      	adds	r1, r7, #4
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	2201      	movs	r2, #1
 80006d4:	4803      	ldr	r0, [pc, #12]	; (80006e4 <__io_putchar+0x20>)
 80006d6:	f004 f9d8 	bl	8004a8a <HAL_UART_Transmit>
	return ch;
 80006da:	687b      	ldr	r3, [r7, #4]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200002a4 	.word	0x200002a4

080006e8 <Uartprint>:

//Début code console
void Uartprint(char * s){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	sprintf((char *)uart_tx_buffer,"%s",s);
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	490b      	ldr	r1, [pc, #44]	; (8000720 <Uartprint+0x38>)
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <Uartprint+0x3c>)
 80006f6:	f005 fee3 	bl	80064c0 <siprintf>
	HAL_UART_Transmit(&huart2, uart_tx_buffer, strlen(s), HAL_MAX_DELAY);
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff fd9a 	bl	8000234 <strlen>
 8000700:	4603      	mov	r3, r0
 8000702:	b29a      	uxth	r2, r3
 8000704:	f04f 33ff 	mov.w	r3, #4294967295
 8000708:	4906      	ldr	r1, [pc, #24]	; (8000724 <Uartprint+0x3c>)
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <Uartprint+0x40>)
 800070c:	f004 f9bd 	bl	8004a8a <HAL_UART_Transmit>
	HAL_Delay(200);
 8000710:	20c8      	movs	r0, #200	; 0xc8
 8000712:	f001 f82f 	bl	8001774 <HAL_Delay>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	080076f8 	.word	0x080076f8
 8000724:	200000b8 	.word	0x200000b8
 8000728:	200002a4 	.word	0x200002a4

0800072c <Uartreceive>:

void Uartreceive(){
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, uart_rx_buffer, 1);
 8000730:	2201      	movs	r2, #1
 8000732:	4903      	ldr	r1, [pc, #12]	; (8000740 <Uartreceive+0x14>)
 8000734:	4803      	ldr	r0, [pc, #12]	; (8000744 <Uartreceive+0x18>)
 8000736:	f004 fa3f 	bl	8004bb8 <HAL_UART_Receive_IT>
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	200000e8 	.word	0x200000e8
 8000744:	200002a4 	.word	0x200002a4

08000748 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  it_uart_rx_ready=1;
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <HAL_UART_RxCpltCallback+0x1c>)
 8000752:	2201      	movs	r2, #1
 8000754:	601a      	str	r2, [r3, #0]
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	200000a4 	.word	0x200000a4

08000768 <echo>:

void echo(){
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	if(it_uart_rx_ready==1){
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <echo+0x2c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d10d      	bne.n	8000790 <echo+0x28>
		uart_tx_buffer[0]=uart_rx_buffer[0];
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <echo+0x30>)
 8000776:	781a      	ldrb	r2, [r3, #0]
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <echo+0x34>)
 800077a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, uart_tx_buffer, 1, HAL_MAX_DELAY);
 800077c:	f04f 33ff 	mov.w	r3, #4294967295
 8000780:	2201      	movs	r2, #1
 8000782:	4906      	ldr	r1, [pc, #24]	; (800079c <echo+0x34>)
 8000784:	4806      	ldr	r0, [pc, #24]	; (80007a0 <echo+0x38>)
 8000786:	f004 f980 	bl	8004a8a <HAL_UART_Transmit>
		it_uart_rx_ready=0;
 800078a:	4b02      	ldr	r3, [pc, #8]	; (8000794 <echo+0x2c>)
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
	}
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200000a4 	.word	0x200000a4
 8000798:	200000e8 	.word	0x200000e8
 800079c:	200000b8 	.word	0x200000b8
 80007a0:	200002a4 	.word	0x200002a4

080007a4 <Console>:

void Console(){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	Uartreceive();
 80007a8:	f7ff ffc0 	bl	800072c <Uartreceive>
	if (it_uart_rx_ready==1) {
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <Console+0x74>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d12e      	bne.n	8000812 <Console+0x6e>
		echo();
 80007b4:	f7ff ffd8 	bl	8000768 <echo>
		cmd[idxCmd++]=uart_rx_buffer[0];
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <Console+0x78>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	1c5a      	adds	r2, r3, #1
 80007be:	4917      	ldr	r1, [pc, #92]	; (800081c <Console+0x78>)
 80007c0:	600a      	str	r2, [r1, #0]
 80007c2:	4a17      	ldr	r2, [pc, #92]	; (8000820 <Console+0x7c>)
 80007c4:	7811      	ldrb	r1, [r2, #0]
 80007c6:	4a17      	ldr	r2, [pc, #92]	; (8000824 <Console+0x80>)
 80007c8:	54d1      	strb	r1, [r2, r3]
		if (uart_rx_buffer[0]=='\r') {
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <Console+0x7c>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b0d      	cmp	r3, #13
 80007d0:	d10f      	bne.n	80007f2 <Console+0x4e>
			cmd[idxCmd-1]='\0';
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <Console+0x78>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	4a12      	ldr	r2, [pc, #72]	; (8000824 <Console+0x80>)
 80007da:	2100      	movs	r1, #0
 80007dc:	54d1      	strb	r1, [r2, r3]
			if(CprCommande(cmd)){
 80007de:	4811      	ldr	r0, [pc, #68]	; (8000824 <Console+0x80>)
 80007e0:	f000 f824 	bl	800082c <CprCommande>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d013      	beq.n	8000812 <Console+0x6e>
				idxCmd=0;
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <Console+0x78>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
				idxCmd=idxCmd-2;          //remove it in buffer
				Uartprint(backspace);
			}
		}
	}
}
 80007f0:	e00f      	b.n	8000812 <Console+0x6e>
		else if (uart_rx_buffer[0]=='\b') {
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <Console+0x7c>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b08      	cmp	r3, #8
 80007f8:	d10b      	bne.n	8000812 <Console+0x6e>
			if (idxCmd>0) {      //is there a char to delete?
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <Console+0x78>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	dd07      	ble.n	8000812 <Console+0x6e>
				idxCmd=idxCmd-2;          //remove it in buffer
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <Console+0x78>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	3b02      	subs	r3, #2
 8000808:	4a04      	ldr	r2, [pc, #16]	; (800081c <Console+0x78>)
 800080a:	6013      	str	r3, [r2, #0]
				Uartprint(backspace);
 800080c:	4806      	ldr	r0, [pc, #24]	; (8000828 <Console+0x84>)
 800080e:	f7ff ff6b 	bl	80006e8 <Uartprint>
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000a4 	.word	0x200000a4
 800081c:	20000094 	.word	0x20000094
 8000820:	200000e8 	.word	0x200000e8
 8000824:	20000108 	.word	0x20000108
 8000828:	20000004 	.word	0x20000004

0800082c <CprCommande>:

int CprCommande(char * c){
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	if(strcmp(c,"help")==0) {
 8000834:	4947      	ldr	r1, [pc, #284]	; (8000954 <CprCommande+0x128>)
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff fcf2 	bl	8000220 <strcmp>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d104      	bne.n	800084c <CprCommande+0x20>
		Uartprint((char *) help);
 8000842:	4845      	ldr	r0, [pc, #276]	; (8000958 <CprCommande+0x12c>)
 8000844:	f7ff ff50 	bl	80006e8 <Uartprint>
		return 1;
 8000848:	2301      	movs	r3, #1
 800084a:	e07f      	b.n	800094c <CprCommande+0x120>
	}
	else if(strcmp(c,"on")==0) {
 800084c:	4943      	ldr	r1, [pc, #268]	; (800095c <CprCommande+0x130>)
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff fce6 	bl	8000220 <strcmp>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d119      	bne.n	800088e <CprCommande+0x62>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,0);
 800085a:	2200      	movs	r2, #0
 800085c:	2101      	movs	r1, #1
 800085e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000862:	f001 fafb 	bl	8001e5c <HAL_GPIO_WritePin>
		for (int i=0;i<25;i++);
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	e002      	b.n	8000872 <CprCommande+0x46>
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	3301      	adds	r3, #1
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	2b18      	cmp	r3, #24
 8000876:	ddf9      	ble.n	800086c <CprCommande+0x40>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0,1);
 8000878:	2201      	movs	r2, #1
 800087a:	2101      	movs	r1, #1
 800087c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000880:	f001 faec 	bl	8001e5c <HAL_GPIO_WritePin>
		Uartprint((char *) power_on);
 8000884:	4836      	ldr	r0, [pc, #216]	; (8000960 <CprCommande+0x134>)
 8000886:	f7ff ff2f 	bl	80006e8 <Uartprint>
		//Uartprint((char *) prompt);

		return 1;
 800088a:	2301      	movs	r3, #1
 800088c:	e05e      	b.n	800094c <CprCommande+0x120>
	}
	else if(strcmp(c,"stop")==0) {
 800088e:	4935      	ldr	r1, [pc, #212]	; (8000964 <CprCommande+0x138>)
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff fcc5 	bl	8000220 <strcmp>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d10a      	bne.n	80008b2 <CprCommande+0x86>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,1);
 800089c:	2201      	movs	r2, #1
 800089e:	2101      	movs	r1, #1
 80008a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a4:	f001 fada 	bl	8001e5c <HAL_GPIO_WritePin>
		Uartprint((char *) power_off);
 80008a8:	482f      	ldr	r0, [pc, #188]	; (8000968 <CprCommande+0x13c>)
 80008aa:	f7ff ff1d 	bl	80006e8 <Uartprint>
		return 1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e04c      	b.n	800094c <CprCommande+0x120>
	}
	else if(strcmp(c,"pinout")==0) {
 80008b2:	492e      	ldr	r1, [pc, #184]	; (800096c <CprCommande+0x140>)
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff fcb3 	bl	8000220 <strcmp>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d107      	bne.n	80008d0 <CprCommande+0xa4>
		Uartprint((char *) pinout);
 80008c0:	482b      	ldr	r0, [pc, #172]	; (8000970 <CprCommande+0x144>)
 80008c2:	f7ff ff11 	bl	80006e8 <Uartprint>
		Uartprint((char *) prompt);
 80008c6:	482b      	ldr	r0, [pc, #172]	; (8000974 <CprCommande+0x148>)
 80008c8:	f7ff ff0e 	bl	80006e8 <Uartprint>
		return 1;
 80008cc:	2301      	movs	r3, #1
 80008ce:	e03d      	b.n	800094c <CprCommande+0x120>
	}

	else if(strcmp(c,"start")==0) {
 80008d0:	4929      	ldr	r1, [pc, #164]	; (8000978 <CprCommande+0x14c>)
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff fca4 	bl	8000220 <strcmp>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d12f      	bne.n	800093e <CprCommande+0x112>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80008de:	2201      	movs	r2, #1
 80008e0:	2180      	movs	r1, #128	; 0x80
 80008e2:	4826      	ldr	r0, [pc, #152]	; (800097c <CprCommande+0x150>)
 80008e4:	f001 faba 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80008e8:	2001      	movs	r0, #1
 80008ea:	f000 ff43 	bl	8001774 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2180      	movs	r1, #128	; 0x80
 80008f2:	4822      	ldr	r0, [pc, #136]	; (800097c <CprCommande+0x150>)
 80008f4:	f001 fab2 	bl	8001e5c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f000 ff3b 	bl	8001774 <HAL_Delay>

		Uartprint((char *) power_on);
 80008fe:	4818      	ldr	r0, [pc, #96]	; (8000960 <CprCommande+0x134>)
 8000900:	f7ff fef2 	bl	80006e8 <Uartprint>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000904:	2100      	movs	r1, #0
 8000906:	481e      	ldr	r0, [pc, #120]	; (8000980 <CprCommande+0x154>)
 8000908:	f002 fbfa 	bl	8003100 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800090c:	2104      	movs	r1, #4
 800090e:	481c      	ldr	r0, [pc, #112]	; (8000980 <CprCommande+0x154>)
 8000910:	f002 fbf6 	bl	8003100 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000914:	2100      	movs	r1, #0
 8000916:	481a      	ldr	r0, [pc, #104]	; (8000980 <CprCommande+0x154>)
 8000918:	f003 fe26 	bl	8004568 <HAL_TIMEx_PWMN_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800091c:	2104      	movs	r1, #4
 800091e:	4818      	ldr	r0, [pc, #96]	; (8000980 <CprCommande+0x154>)
 8000920:	f003 fe22 	bl	8004568 <HAL_TIMEx_PWMN_Start>
		TIM1->CCR1 = val;
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <CprCommande+0x158>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <CprCommande+0x15c>)
 800092a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = TIM1->ARR - val;
 800092c:	4b16      	ldr	r3, [pc, #88]	; (8000988 <CprCommande+0x15c>)
 800092e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <CprCommande+0x158>)
 8000932:	6812      	ldr	r2, [r2, #0]
 8000934:	4611      	mov	r1, r2
 8000936:	4a14      	ldr	r2, [pc, #80]	; (8000988 <CprCommande+0x15c>)
 8000938:	1a5b      	subs	r3, r3, r1
 800093a:	6393      	str	r3, [r2, #56]	; 0x38
		Uartprint((char *) not_found);
		Uartprint((char *) prompt);
		return 1;
	}

}
 800093c:	e006      	b.n	800094c <CprCommande+0x120>
		Uartprint((char *) not_found);
 800093e:	4813      	ldr	r0, [pc, #76]	; (800098c <CprCommande+0x160>)
 8000940:	f7ff fed2 	bl	80006e8 <Uartprint>
		Uartprint((char *) prompt);
 8000944:	480b      	ldr	r0, [pc, #44]	; (8000974 <CprCommande+0x148>)
 8000946:	f7ff fecf 	bl	80006e8 <Uartprint>
		return 1;
 800094a:	2301      	movs	r3, #1
}
 800094c:	4618      	mov	r0, r3
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	080076fc 	.word	0x080076fc
 8000958:	08007778 	.word	0x08007778
 800095c:	08007704 	.word	0x08007704
 8000960:	080077f8 	.word	0x080077f8
 8000964:	08007708 	.word	0x08007708
 8000968:	08007818 	.word	0x08007818
 800096c:	08007710 	.word	0x08007710
 8000970:	200000b4 	.word	0x200000b4
 8000974:	08007758 	.word	0x08007758
 8000978:	08007718 	.word	0x08007718
 800097c:	48000800 	.word	0x48000800
 8000980:	2000020c 	.word	0x2000020c
 8000984:	20000000 	.word	0x20000000
 8000988:	40012c00 	.word	0x40012c00
 800098c:	08007838 	.word	0x08007838

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000994:	f000 fe7d 	bl	8001692 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000998:	f000 f836 	bl	8000a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099c:	f7ff fe24 	bl	80005e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009a0:	f000 fdb8 	bl	8001514 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80009a4:	f000 fa38 	bl	8000e18 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009a8:	f000 faf6 	bl	8000f98 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009ac:	f000 fb48 	bl	8001040 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009b0:	f000 fb94 	bl	80010dc <MX_TIM4_Init>
  MX_TIM8_Init();
 80009b4:	f000 fbe8 	bl	8001188 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 80009b8:	213c      	movs	r1, #60	; 0x3c
 80009ba:	480d      	ldr	r0, [pc, #52]	; (80009f0 <main+0x60>)
 80009bc:	f002 fd46 	bl	800344c <HAL_TIM_Encoder_Start>
  valeur_ancienne = TIM4->CNT;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <main+0x64>)
 80009c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <main+0x68>)
 80009c8:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim8);
 80009ca:	480c      	ldr	r0, [pc, #48]	; (80009fc <main+0x6c>)
 80009cc:	f002 facc 	bl	8002f68 <HAL_TIM_Base_Start_IT>
  printf("%d\r\n", TIM4->CNT/4);
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <main+0x64>)
 80009d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d4:	089b      	lsrs	r3, r3, #2
 80009d6:	4619      	mov	r1, r3
 80009d8:	4809      	ldr	r0, [pc, #36]	; (8000a00 <main+0x70>)
 80009da:	f005 fce3 	bl	80063a4 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Console();
 80009de:	f7ff fee1 	bl	80007a4 <Console>
		  TIM1->CCR1 = val;
		  TIM1->CCR2 = TIM1->ARR - val;

		  bouton=0;
	  }*/
	  valeur_nouvelle = TIM4->CNT;
 80009e2:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <main+0x64>)
 80009e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e6:	461a      	mov	r2, r3
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <main+0x74>)
 80009ea:	601a      	str	r2, [r3, #0]
	  Console();
 80009ec:	e7f7      	b.n	80009de <main+0x4e>
 80009ee:	bf00      	nop
 80009f0:	20000174 	.word	0x20000174
 80009f4:	40000800 	.word	0x40000800
 80009f8:	20000098 	.word	0x20000098
 80009fc:	20000128 	.word	0x20000128
 8000a00:	08007720 	.word	0x08007720
 8000a04:	2000009c 	.word	0x2000009c

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b0a4      	sub	sp, #144	; 0x90
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a12:	2238      	movs	r2, #56	; 0x38
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f005 fcbc 	bl	8006394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	2244      	movs	r2, #68	; 0x44
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f005 fcae 	bl	8006394 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f001 fa65 	bl	8001f08 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a46:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a48:	2340      	movs	r3, #64	; 0x40
 8000a4a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a50:	2302      	movs	r3, #2
 8000a52:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000a54:	2304      	movs	r3, #4
 8000a56:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000a58:	2355      	movs	r3, #85	; 0x55
 8000a5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 fafb 	bl	8002070 <HAL_RCC_OscConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000a80:	f000 f84e 	bl	8000b20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a84:	230f      	movs	r3, #15
 8000a86:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a9c:	2104      	movs	r1, #4
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 fdfe 	bl	80026a0 <HAL_RCC_ClockConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000aaa:	f000 f839 	bl	8000b20 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f002 f80d 	bl	8002ad8 <HAL_RCCEx_PeriphCLKConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ac4:	f000 f82c 	bl	8000b20 <Error_Handler>
  }
}
 8000ac8:	bf00      	nop
 8000aca:	3790      	adds	r7, #144	; 0x90
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <TIM8_UP_IRQHandler>:

/* USER CODE BEGIN 4 */

void TIM8_UP_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */
	vitesse = (valeur_nouvelle-valeur_ancienne)/1024;
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <TIM8_UP_IRQHandler+0x3c>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <TIM8_UP_IRQHandler+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	da01      	bge.n	8000ae6 <TIM8_UP_IRQHandler+0x16>
 8000ae2:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000ae6:	129b      	asrs	r3, r3, #10
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <TIM8_UP_IRQHandler+0x44>)
 8000aec:	601a      	str	r2, [r3, #0]
	valeur_ancienne = valeur_nouvelle;
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <TIM8_UP_IRQHandler+0x3c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <TIM8_UP_IRQHandler+0x40>)
 8000af4:	6013      	str	r3, [r2, #0]
	printf("Vitesse = %d tr/s\r\n", vitesse);
 8000af6:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <TIM8_UP_IRQHandler+0x44>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4619      	mov	r1, r3
 8000afc:	4806      	ldr	r0, [pc, #24]	; (8000b18 <TIM8_UP_IRQHandler+0x48>)
 8000afe:	f005 fc51 	bl	80063a4 <iprintf>

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000b02:	4806      	ldr	r0, [pc, #24]	; (8000b1c <TIM8_UP_IRQHandler+0x4c>)
 8000b04:	f002 fd30 	bl	8003568 <HAL_TIM_IRQHandler>

  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	2000009c 	.word	0x2000009c
 8000b10:	20000098 	.word	0x20000098
 8000b14:	200000a0 	.word	0x200000a0
 8000b18:	08007728 	.word	0x08007728
 8000b1c:	20000128 	.word	0x20000128

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <HAL_MspInit+0x44>)
 8000b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b36:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <HAL_MspInit+0x44>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <HAL_MspInit+0x44>)
 8000b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_MspInit+0x44>)
 8000b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <HAL_MspInit+0x44>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b54:	6593      	str	r3, [r2, #88]	; 0x58
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_MspInit+0x44>)
 8000b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b62:	f001 fa75 	bl	8002050 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler+0x4>

08000b86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc0:	f000 fdba 	bl	8001738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <TIM2_IRQHandler+0x10>)
 8000bce:	f002 fccb 	bl	8003568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000258 	.word	0x20000258

08000bdc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <USART2_IRQHandler+0x10>)
 8000be2:	f004 f82f 	bl	8004c44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200002a4 	.word	0x200002a4

08000bf0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000bf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf8:	4819      	ldr	r0, [pc, #100]	; (8000c60 <EXTI15_10_IRQHandler+0x70>)
 8000bfa:	f001 f947 	bl	8001e8c <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2180      	movs	r1, #128	; 0x80
 8000c02:	4817      	ldr	r0, [pc, #92]	; (8000c60 <EXTI15_10_IRQHandler+0x70>)
 8000c04:	f001 f92a 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f000 fdb3 	bl	8001774 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2180      	movs	r1, #128	; 0x80
 8000c12:	4813      	ldr	r0, [pc, #76]	; (8000c60 <EXTI15_10_IRQHandler+0x70>)
 8000c14:	f001 f922 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f000 fdab 	bl	8001774 <HAL_Delay>

	TIM1 -> CCR2 = TIM1->ARR - (TIM1 -> CCR1);
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <EXTI15_10_IRQHandler+0x74>)
 8000c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <EXTI15_10_IRQHandler+0x74>)
 8000c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c26:	490f      	ldr	r1, [pc, #60]	; (8000c64 <EXTI15_10_IRQHandler+0x74>)
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	638b      	str	r3, [r1, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	480e      	ldr	r0, [pc, #56]	; (8000c68 <EXTI15_10_IRQHandler+0x78>)
 8000c30:	f002 fa66 	bl	8003100 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c34:	2104      	movs	r1, #4
 8000c36:	480c      	ldr	r0, [pc, #48]	; (8000c68 <EXTI15_10_IRQHandler+0x78>)
 8000c38:	f002 fa62 	bl	8003100 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	480a      	ldr	r0, [pc, #40]	; (8000c68 <EXTI15_10_IRQHandler+0x78>)
 8000c40:	f003 fc92 	bl	8004568 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000c44:	2104      	movs	r1, #4
 8000c46:	4808      	ldr	r0, [pc, #32]	; (8000c68 <EXTI15_10_IRQHandler+0x78>)
 8000c48:	f003 fc8e 	bl	8004568 <HAL_TIMEx_PWMN_Start>
	//TIM1->CCR1 = val;
	//TIM1->CCR2 = TIM1->ARR - val;

	printf("entré dans interruption\r\n");
 8000c4c:	4807      	ldr	r0, [pc, #28]	; (8000c6c <EXTI15_10_IRQHandler+0x7c>)
 8000c4e:	f005 fc2f 	bl	80064b0 <puts>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c52:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c56:	f001 f933 	bl	8001ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	48000800 	.word	0x48000800
 8000c64:	40012c00 	.word	0x40012c00
 8000c68:	2000020c 	.word	0x2000020c
 8000c6c:	0800773c 	.word	0x0800773c

08000c70 <TIM8_BRK_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt.
  */
void TIM8_BRK_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_IRQn 0 */

  /* USER CODE END TIM8_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <TIM8_BRK_IRQHandler+0x10>)
 8000c76:	f002 fc77 	bl	8003568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_IRQn 1 */

  /* USER CODE END TIM8_BRK_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000128 	.word	0x20000128

08000c84 <TIM8_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts.
  */
void TIM8_TRG_COM_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <TIM8_TRG_COM_IRQHandler+0x10>)
 8000c8a:	f002 fc6d 	bl	8003568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000128 	.word	0x20000128

08000c98 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <TIM8_CC_IRQHandler+0x10>)
 8000c9e:	f002 fc63 	bl	8003568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000128 	.word	0x20000128

08000cac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	e00a      	b.n	8000cd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cbe:	f3af 8000 	nop.w
 8000cc2:	4601      	mov	r1, r0
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	1c5a      	adds	r2, r3, #1
 8000cc8:	60ba      	str	r2, [r7, #8]
 8000cca:	b2ca      	uxtb	r2, r1
 8000ccc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	dbf0      	blt.n	8000cbe <_read+0x12>
	}

return len;
 8000cdc:	687b      	ldr	r3, [r7, #4]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e009      	b.n	8000d0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	60ba      	str	r2, [r7, #8]
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fcdf 	bl	80006c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	dbf1      	blt.n	8000cf8 <_write+0x12>
	}
	return len;
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <_close>:

int _close(int file)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
	return -1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d46:	605a      	str	r2, [r3, #4]
	return 0;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <_isatty>:

int _isatty(int file)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
	return 0;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f005 fac2 	bl	8006340 <__errno>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <_sbrk+0x64>)
 8000dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20008000 	.word	0x20008000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	200000a8 	.word	0x200000a8
 8000df0:	20000348 	.word	0x20000348

08000df4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <SystemInit+0x20>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <SystemInit+0x20>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b09c      	sub	sp, #112	; 0x70
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
 8000e48:	615a      	str	r2, [r3, #20]
 8000e4a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2234      	movs	r2, #52	; 0x34
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f005 fa9e 	bl	8006394 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e58:	4b4d      	ldr	r3, [pc, #308]	; (8000f90 <MX_TIM1_Init+0x178>)
 8000e5a:	4a4e      	ldr	r2, [pc, #312]	; (8000f94 <MX_TIM1_Init+0x17c>)
 8000e5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e5e:	4b4c      	ldr	r3, [pc, #304]	; (8000f90 <MX_TIM1_Init+0x178>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000e64:	4b4a      	ldr	r3, [pc, #296]	; (8000f90 <MX_TIM1_Init+0x178>)
 8000e66:	2220      	movs	r2, #32
 8000e68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10624;
 8000e6a:	4b49      	ldr	r3, [pc, #292]	; (8000f90 <MX_TIM1_Init+0x178>)
 8000e6c:	f44f 5226 	mov.w	r2, #10624	; 0x2980
 8000e70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e72:	4b47      	ldr	r3, [pc, #284]	; (8000f90 <MX_TIM1_Init+0x178>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e78:	4b45      	ldr	r3, [pc, #276]	; (8000f90 <MX_TIM1_Init+0x178>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7e:	4b44      	ldr	r3, [pc, #272]	; (8000f90 <MX_TIM1_Init+0x178>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e84:	4842      	ldr	r0, [pc, #264]	; (8000f90 <MX_TIM1_Init+0x178>)
 8000e86:	f002 f817 	bl	8002eb8 <HAL_TIM_Base_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e90:	f7ff fe46 	bl	8000b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e98:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e9a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	483b      	ldr	r0, [pc, #236]	; (8000f90 <MX_TIM1_Init+0x178>)
 8000ea2:	f002 fdf1 	bl	8003a88 <HAL_TIM_ConfigClockSource>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000eac:	f7ff fe38 	bl	8000b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000eb0:	4837      	ldr	r0, [pc, #220]	; (8000f90 <MX_TIM1_Init+0x178>)
 8000eb2:	f002 f8c3 	bl	800303c <HAL_TIM_PWM_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ebc:	f7ff fe30 	bl	8000b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ecc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	482f      	ldr	r0, [pc, #188]	; (8000f90 <MX_TIM1_Init+0x178>)
 8000ed4:	f003 fbfc 	bl	80046d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000ede:	f7ff fe1f 	bl	8000b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee2:	2360      	movs	r3, #96	; 0x60
 8000ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 7436;
 8000ee6:	f641 530c 	movw	r3, #7436	; 0x1d0c
 8000eea:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eec:	2300      	movs	r3, #0
 8000eee:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f04:	2200      	movs	r2, #0
 8000f06:	4619      	mov	r1, r3
 8000f08:	4821      	ldr	r0, [pc, #132]	; (8000f90 <MX_TIM1_Init+0x178>)
 8000f0a:	f002 fcad 	bl	8003868 <HAL_TIM_PWM_ConfigChannel>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000f14:	f7ff fe04 	bl	8000b20 <Error_Handler>
  }
  sConfigOC.Pulse = 6374;
 8000f18:	f641 03e6 	movw	r3, #6374	; 0x18e6
 8000f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f22:	2204      	movs	r2, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	481a      	ldr	r0, [pc, #104]	; (8000f90 <MX_TIM1_Init+0x178>)
 8000f28:	f002 fc9e 	bl	8003868 <HAL_TIM_PWM_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000f32:	f7ff fdf5 	bl	8000b20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 203;
 8000f42:	23cb      	movs	r3, #203	; 0xcb
 8000f44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000f66:	2300      	movs	r3, #0
 8000f68:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	4619      	mov	r1, r3
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <MX_TIM1_Init+0x178>)
 8000f74:	f003 fc2e 	bl	80047d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000f7e:	f7ff fdcf 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f82:	4803      	ldr	r0, [pc, #12]	; (8000f90 <MX_TIM1_Init+0x178>)
 8000f84:	f000 fa52 	bl	800142c <HAL_TIM_MspPostInit>

}
 8000f88:	bf00      	nop
 8000f8a:	3770      	adds	r7, #112	; 0x70
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	2000020c 	.word	0x2000020c
 8000f94:	40012c00 	.word	0x40012c00

08000f98 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	; 0x30
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	2224      	movs	r2, #36	; 0x24
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f005 f9f4 	bl	8006394 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fac:	463b      	mov	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fb6:	4b21      	ldr	r3, [pc, #132]	; (800103c <MX_TIM2_Init+0xa4>)
 8000fb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fbc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	; (800103c <MX_TIM2_Init+0xa4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	; (800103c <MX_TIM2_Init+0xa4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <MX_TIM2_Init+0xa4>)
 8000fcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <MX_TIM2_Init+0xa4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd8:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_TIM2_Init+0xa4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	4619      	mov	r1, r3
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <MX_TIM2_Init+0xa4>)
 800100a:	f002 f979 	bl	8003300 <HAL_TIM_Encoder_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001014:	f7ff fd84 	bl	8000b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001018:	2300      	movs	r3, #0
 800101a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001020:	463b      	mov	r3, r7
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_TIM2_Init+0xa4>)
 8001026:	f003 fb53 	bl	80046d0 <HAL_TIMEx_MasterConfigSynchronization>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001030:	f7ff fd76 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	3730      	adds	r7, #48	; 0x30
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000258 	.word	0x20000258

08001040 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800105e:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <MX_TIM3_Init+0x94>)
 8001060:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <MX_TIM3_Init+0x98>)
 8001062:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <MX_TIM3_Init+0x94>)
 8001066:	2200      	movs	r2, #0
 8001068:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_TIM3_Init+0x94>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_TIM3_Init+0x94>)
 8001072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001076:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_TIM3_Init+0x94>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_TIM3_Init+0x94>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001084:	4813      	ldr	r0, [pc, #76]	; (80010d4 <MX_TIM3_Init+0x94>)
 8001086:	f001 ff17 	bl	8002eb8 <HAL_TIM_Base_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001090:	f7ff fd46 	bl	8000b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001098:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4619      	mov	r1, r3
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <MX_TIM3_Init+0x94>)
 80010a2:	f002 fcf1 	bl	8003a88 <HAL_TIM_ConfigClockSource>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80010ac:	f7ff fd38 	bl	8000b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	4619      	mov	r1, r3
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_TIM3_Init+0x94>)
 80010be:	f003 fb07 	bl	80046d0 <HAL_TIMEx_MasterConfigSynchronization>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80010c8:	f7ff fd2a 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	3720      	adds	r7, #32
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200001c0 	.word	0x200001c0
 80010d8:	40000400 	.word	0x40000400

080010dc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	2224      	movs	r2, #36	; 0x24
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f005 f952 	bl	8006394 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f0:	463b      	mov	r3, r7
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <MX_TIM4_Init+0xa4>)
 80010fc:	4a21      	ldr	r2, [pc, #132]	; (8001184 <MX_TIM4_Init+0xa8>)
 80010fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <MX_TIM4_Init+0xa4>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001106:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <MX_TIM4_Init+0xa4>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <MX_TIM4_Init+0xa4>)
 800110e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001112:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <MX_TIM4_Init+0xa4>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <MX_TIM4_Init+0xa4>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001120:	2301      	movs	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001128:	2301      	movs	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001138:	2301      	movs	r3, #1
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	4619      	mov	r1, r3
 800114a:	480d      	ldr	r0, [pc, #52]	; (8001180 <MX_TIM4_Init+0xa4>)
 800114c:	f002 f8d8 	bl	8003300 <HAL_TIM_Encoder_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001156:	f7ff fce3 	bl	8000b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001162:	463b      	mov	r3, r7
 8001164:	4619      	mov	r1, r3
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <MX_TIM4_Init+0xa4>)
 8001168:	f003 fab2 	bl	80046d0 <HAL_TIMEx_MasterConfigSynchronization>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001172:	f7ff fcd5 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	3730      	adds	r7, #48	; 0x30
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000174 	.word	0x20000174
 8001184:	40000800 	.word	0x40000800

08001188 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80011a6:	4b20      	ldr	r3, [pc, #128]	; (8001228 <MX_TIM8_Init+0xa0>)
 80011a8:	4a20      	ldr	r2, [pc, #128]	; (800122c <MX_TIM8_Init+0xa4>)
 80011aa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 9999;
 80011ac:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <MX_TIM8_Init+0xa0>)
 80011ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80011b2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <MX_TIM8_Init+0xa0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16999;
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <MX_TIM8_Init+0xa0>)
 80011bc:	f244 2267 	movw	r2, #16999	; 0x4267
 80011c0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <MX_TIM8_Init+0xa0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011c8:	4b17      	ldr	r3, [pc, #92]	; (8001228 <MX_TIM8_Init+0xa0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <MX_TIM8_Init+0xa0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80011d4:	4814      	ldr	r0, [pc, #80]	; (8001228 <MX_TIM8_Init+0xa0>)
 80011d6:	f001 fe6f 	bl	8002eb8 <HAL_TIM_Base_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 80011e0:	f7ff fc9e 	bl	8000b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	4619      	mov	r1, r3
 80011f0:	480d      	ldr	r0, [pc, #52]	; (8001228 <MX_TIM8_Init+0xa0>)
 80011f2:	f002 fc49 	bl	8003a88 <HAL_TIM_ConfigClockSource>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80011fc:	f7ff fc90 	bl	8000b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_TIM8_Init+0xa0>)
 8001212:	f003 fa5d 	bl	80046d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800121c:	f7ff fc80 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	3720      	adds	r7, #32
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000128 	.word	0x20000128
 800122c:	40013400 	.word	0x40013400

08001230 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a2b      	ldr	r2, [pc, #172]	; (80012ec <HAL_TIM_Base_MspInit+0xbc>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d10c      	bne.n	800125c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001242:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <HAL_TIM_Base_MspInit+0xc0>)
 8001244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001246:	4a2a      	ldr	r2, [pc, #168]	; (80012f0 <HAL_TIM_Base_MspInit+0xc0>)
 8001248:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800124c:	6613      	str	r3, [r2, #96]	; 0x60
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <HAL_TIM_Base_MspInit+0xc0>)
 8001250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800125a:	e042      	b.n	80012e2 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM3)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a24      	ldr	r2, [pc, #144]	; (80012f4 <HAL_TIM_Base_MspInit+0xc4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d10c      	bne.n	8001280 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001266:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <HAL_TIM_Base_MspInit+0xc0>)
 8001268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126a:	4a21      	ldr	r2, [pc, #132]	; (80012f0 <HAL_TIM_Base_MspInit+0xc0>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	6593      	str	r3, [r2, #88]	; 0x58
 8001272:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <HAL_TIM_Base_MspInit+0xc0>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
}
 800127e:	e030      	b.n	80012e2 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM8)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a1c      	ldr	r2, [pc, #112]	; (80012f8 <HAL_TIM_Base_MspInit+0xc8>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d12b      	bne.n	80012e2 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <HAL_TIM_Base_MspInit+0xc0>)
 800128c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128e:	4a18      	ldr	r2, [pc, #96]	; (80012f0 <HAL_TIM_Base_MspInit+0xc0>)
 8001290:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001294:	6613      	str	r3, [r2, #96]	; 0x60
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <HAL_TIM_Base_MspInit+0xc0>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	202b      	movs	r0, #43	; 0x2b
 80012a8:	f000 fb61 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_IRQn);
 80012ac:	202b      	movs	r0, #43	; 0x2b
 80012ae:	f000 fb78 	bl	80019a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	202c      	movs	r0, #44	; 0x2c
 80012b8:	f000 fb59 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 80012bc:	202c      	movs	r0, #44	; 0x2c
 80012be:	f000 fb70 	bl	80019a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	202d      	movs	r0, #45	; 0x2d
 80012c8:	f000 fb51 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_IRQn);
 80012cc:	202d      	movs	r0, #45	; 0x2d
 80012ce:	f000 fb68 	bl	80019a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	202e      	movs	r0, #46	; 0x2e
 80012d8:	f000 fb49 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80012dc:	202e      	movs	r0, #46	; 0x2e
 80012de:	f000 fb60 	bl	80019a2 <HAL_NVIC_EnableIRQ>
}
 80012e2:	bf00      	nop
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40012c00 	.word	0x40012c00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40000400 	.word	0x40000400
 80012f8:	40013400 	.word	0x40013400

080012fc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08c      	sub	sp, #48	; 0x30
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800131c:	d131      	bne.n	8001382 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800131e:	4b40      	ldr	r3, [pc, #256]	; (8001420 <HAL_TIM_Encoder_MspInit+0x124>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001322:	4a3f      	ldr	r2, [pc, #252]	; (8001420 <HAL_TIM_Encoder_MspInit+0x124>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6593      	str	r3, [r2, #88]	; 0x58
 800132a:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <HAL_TIM_Encoder_MspInit+0x124>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	4b3a      	ldr	r3, [pc, #232]	; (8001420 <HAL_TIM_Encoder_MspInit+0x124>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	4a39      	ldr	r2, [pc, #228]	; (8001420 <HAL_TIM_Encoder_MspInit+0x124>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001342:	4b37      	ldr	r3, [pc, #220]	; (8001420 <HAL_TIM_Encoder_MspInit+0x124>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800134e:	2303      	movs	r3, #3
 8001350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800135e:	2301      	movs	r3, #1
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4619      	mov	r1, r3
 8001368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136c:	f000 fbf4 	bl	8001b58 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2100      	movs	r1, #0
 8001374:	201c      	movs	r0, #28
 8001376:	f000 fafa 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800137a:	201c      	movs	r0, #28
 800137c:	f000 fb11 	bl	80019a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001380:	e04a      	b.n	8001418 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM4)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a27      	ldr	r2, [pc, #156]	; (8001424 <HAL_TIM_Encoder_MspInit+0x128>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d145      	bne.n	8001418 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800138c:	4b24      	ldr	r3, [pc, #144]	; (8001420 <HAL_TIM_Encoder_MspInit+0x124>)
 800138e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001390:	4a23      	ldr	r2, [pc, #140]	; (8001420 <HAL_TIM_Encoder_MspInit+0x124>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6593      	str	r3, [r2, #88]	; 0x58
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <HAL_TIM_Encoder_MspInit+0x124>)
 800139a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a4:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <HAL_TIM_Encoder_MspInit+0x124>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a8:	4a1d      	ldr	r2, [pc, #116]	; (8001420 <HAL_TIM_Encoder_MspInit+0x124>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b0:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <HAL_TIM_Encoder_MspInit+0x124>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <HAL_TIM_Encoder_MspInit+0x124>)
 80013be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c0:	4a17      	ldr	r2, [pc, #92]	; (8001420 <HAL_TIM_Encoder_MspInit+0x124>)
 80013c2:	f043 0302 	orr.w	r3, r3, #2
 80013c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_TIM_Encoder_MspInit+0x124>)
 80013ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80013e6:	230a      	movs	r3, #10
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f4:	f000 fbb0 	bl	8001b58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013f8:	2340      	movs	r3, #64	; 0x40
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001408:	2302      	movs	r3, #2
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001414:	f000 fba0 	bl	8001b58 <HAL_GPIO_Init>
}
 8001418:	bf00      	nop
 800141a:	3730      	adds	r7, #48	; 0x30
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40021000 	.word	0x40021000
 8001424:	40000800 	.word	0x40000800
 8001428:	48000400 	.word	0x48000400

0800142c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a2e      	ldr	r2, [pc, #184]	; (8001504 <HAL_TIM_MspPostInit+0xd8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d155      	bne.n	80014fa <HAL_TIM_MspPostInit+0xce>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <HAL_TIM_MspPostInit+0xdc>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	4a2d      	ldr	r2, [pc, #180]	; (8001508 <HAL_TIM_MspPostInit+0xdc>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145a:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <HAL_TIM_MspPostInit+0xdc>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	4b28      	ldr	r3, [pc, #160]	; (8001508 <HAL_TIM_MspPostInit+0xdc>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	4a27      	ldr	r2, [pc, #156]	; (8001508 <HAL_TIM_MspPostInit+0xdc>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001472:	4b25      	ldr	r3, [pc, #148]	; (8001508 <HAL_TIM_MspPostInit+0xdc>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	4b22      	ldr	r3, [pc, #136]	; (8001508 <HAL_TIM_MspPostInit+0xdc>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	4a21      	ldr	r2, [pc, #132]	; (8001508 <HAL_TIM_MspPostInit+0xdc>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148a:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <HAL_TIM_MspPostInit+0xdc>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PB0     ------> TIM1_CH2N
    PA11     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001496:	2303      	movs	r3, #3
 8001498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80014a6:	2302      	movs	r3, #2
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	4816      	ldr	r0, [pc, #88]	; (800150c <HAL_TIM_MspPostInit+0xe0>)
 80014b2:	f000 fb51 	bl	8001b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014b6:	2301      	movs	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80014c6:	2306      	movs	r3, #6
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	480f      	ldr	r0, [pc, #60]	; (8001510 <HAL_TIM_MspPostInit+0xe4>)
 80014d2:	f000 fb41 	bl	8001b58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80014e8:	2306      	movs	r3, #6
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f6:	f000 fb2f 	bl	8001b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014fa:	bf00      	nop
 80014fc:	3728      	adds	r7, #40	; 0x28
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40012c00 	.word	0x40012c00
 8001508:	40021000 	.word	0x40021000
 800150c:	48000800 	.word	0x48000800
 8001510:	48000400 	.word	0x48000400

08001514 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 800151a:	4a23      	ldr	r2, [pc, #140]	; (80015a8 <MX_USART2_UART_Init+0x94>)
 800151c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800151e:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 8001520:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001524:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001526:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800152c:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 800153a:	220c      	movs	r2, #12
 800153c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 8001552:	2200      	movs	r2, #0
 8001554:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 8001558:	2200      	movs	r2, #0
 800155a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800155c:	4811      	ldr	r0, [pc, #68]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 800155e:	f003 fa44 	bl	80049ea <HAL_UART_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001568:	f7ff fada 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800156c:	2100      	movs	r1, #0
 800156e:	480d      	ldr	r0, [pc, #52]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 8001570:	f004 fe1b 	bl	80061aa <HAL_UARTEx_SetTxFifoThreshold>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800157a:	f7ff fad1 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800157e:	2100      	movs	r1, #0
 8001580:	4808      	ldr	r0, [pc, #32]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 8001582:	f004 fe50 	bl	8006226 <HAL_UARTEx_SetRxFifoThreshold>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800158c:	f7ff fac8 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <MX_USART2_UART_Init+0x90>)
 8001592:	f004 fdd1 	bl	8006138 <HAL_UARTEx_DisableFifoMode>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800159c:	f7ff fac0 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200002a4 	.word	0x200002a4
 80015a8:	40004400 	.word	0x40004400

080015ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	; 0x28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a1b      	ldr	r2, [pc, #108]	; (8001638 <HAL_UART_MspInit+0x8c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d130      	bne.n	8001630 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ce:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_UART_MspInit+0x90>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	4a1a      	ldr	r2, [pc, #104]	; (800163c <HAL_UART_MspInit+0x90>)
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d8:	6593      	str	r3, [r2, #88]	; 0x58
 80015da:	4b18      	ldr	r3, [pc, #96]	; (800163c <HAL_UART_MspInit+0x90>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_UART_MspInit+0x90>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	4a14      	ldr	r2, [pc, #80]	; (800163c <HAL_UART_MspInit+0x90>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_UART_MspInit+0x90>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015fe:	230c      	movs	r3, #12
 8001600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800160e:	2307      	movs	r3, #7
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161c:	f000 fa9c 	bl	8001b58 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	2026      	movs	r0, #38	; 0x26
 8001626:	f000 f9a2 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800162a:	2026      	movs	r0, #38	; 0x26
 800162c:	f000 f9b9 	bl	80019a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001630:	bf00      	nop
 8001632:	3728      	adds	r7, #40	; 0x28
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40004400 	.word	0x40004400
 800163c:	40021000 	.word	0x40021000

08001640 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001640:	480d      	ldr	r0, [pc, #52]	; (8001678 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001642:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001644:	480d      	ldr	r0, [pc, #52]	; (800167c <LoopForever+0x6>)
  ldr r1, =_edata
 8001646:	490e      	ldr	r1, [pc, #56]	; (8001680 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001648:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <LoopForever+0xe>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800164c:	e002      	b.n	8001654 <LoopCopyDataInit>

0800164e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001652:	3304      	adds	r3, #4

08001654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001658:	d3f9      	bcc.n	800164e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165a:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <LoopForever+0x12>)
  ldr r4, =_ebss
 800165c:	4c0b      	ldr	r4, [pc, #44]	; (800168c <LoopForever+0x16>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001660:	e001      	b.n	8001666 <LoopFillZerobss>

08001662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001664:	3204      	adds	r2, #4

08001666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001668:	d3fb      	bcc.n	8001662 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800166a:	f7ff fbc3 	bl	8000df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800166e:	f004 fe6d 	bl	800634c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001672:	f7ff f98d 	bl	8000990 <main>

08001676 <LoopForever>:

LoopForever:
    b LoopForever
 8001676:	e7fe      	b.n	8001676 <LoopForever>
  ldr   r0, =_estack
 8001678:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800167c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001680:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001684:	08007940 	.word	0x08007940
  ldr r2, =_sbss
 8001688:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800168c:	20000348 	.word	0x20000348

08001690 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001690:	e7fe      	b.n	8001690 <ADC1_2_IRQHandler>

08001692 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169c:	2003      	movs	r0, #3
 800169e:	f000 f95b 	bl	8001958 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016a2:	2000      	movs	r0, #0
 80016a4:	f000 f80e 	bl	80016c4 <HAL_InitTick>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	71fb      	strb	r3, [r7, #7]
 80016b2:	e001      	b.n	80016b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016b4:	f7ff fa3a 	bl	8000b2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016b8:	79fb      	ldrb	r3, [r7, #7]

}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016d0:	4b16      	ldr	r3, [pc, #88]	; (800172c <HAL_InitTick+0x68>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d022      	beq.n	800171e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_InitTick+0x6c>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <HAL_InitTick+0x68>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 f966 	bl	80019be <HAL_SYSTICK_Config>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10f      	bne.n	8001718 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b0f      	cmp	r3, #15
 80016fc:	d809      	bhi.n	8001712 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fe:	2200      	movs	r2, #0
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	f04f 30ff 	mov.w	r0, #4294967295
 8001706:	f000 f932 	bl	800196e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <HAL_InitTick+0x70>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	e007      	b.n	8001722 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	73fb      	strb	r3, [r7, #15]
 8001716:	e004      	b.n	8001722 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	e001      	b.n	8001722 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000010 	.word	0x20000010
 8001730:	20000008 	.word	0x20000008
 8001734:	2000000c 	.word	0x2000000c

08001738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_IncTick+0x1c>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_IncTick+0x20>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4413      	add	r3, r2
 8001746:	4a03      	ldr	r2, [pc, #12]	; (8001754 <HAL_IncTick+0x1c>)
 8001748:	6013      	str	r3, [r2, #0]
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	20000334 	.word	0x20000334
 8001758:	20000010 	.word	0x20000010

0800175c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_GetTick+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000334 	.word	0x20000334

08001774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff ffee 	bl	800175c <HAL_GetTick>
 8001780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178c:	d004      	beq.n	8001798 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_Delay+0x40>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	4413      	add	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001798:	bf00      	nop
 800179a:	f7ff ffdf 	bl	800175c <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d8f7      	bhi.n	800179a <HAL_Delay+0x26>
  {
  }
}
 80017aa:	bf00      	nop
 80017ac:	bf00      	nop
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000010 	.word	0x20000010

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4907      	ldr	r1, [pc, #28]	; (8001854 <__NVIC_EnableIRQ+0x38>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	; (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	; (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001924:	d301      	bcc.n	800192a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001926:	2301      	movs	r3, #1
 8001928:	e00f      	b.n	800194a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <SysTick_Config+0x40>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001932:	210f      	movs	r1, #15
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f7ff ff8e 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <SysTick_Config+0x40>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001942:	4b04      	ldr	r3, [pc, #16]	; (8001954 <SysTick_Config+0x40>)
 8001944:	2207      	movs	r2, #7
 8001946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	e000e010 	.word	0xe000e010

08001958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff29 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800197c:	f7ff ff40 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001980:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	f7ff ff90 	bl	80018ac <NVIC_EncodePriority>
 800198c:	4602      	mov	r2, r0
 800198e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff5f 	bl	8001858 <__NVIC_SetPriority>
}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff33 	bl	800181c <__NVIC_EnableIRQ>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ffa4 	bl	8001914 <SysTick_Config>
 80019cc:	4603      	mov	r3, r0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b085      	sub	sp, #20
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d005      	beq.n	80019fa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2204      	movs	r2, #4
 80019f2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	e037      	b.n	8001a6a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 020e 	bic.w	r2, r2, #14
 8001a08:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a18:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 0201 	bic.w	r2, r2, #1
 8001a28:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f003 021f 	and.w	r2, r3, #31
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	2101      	movs	r1, #1
 8001a38:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a46:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00c      	beq.n	8001a6a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a5e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a68:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d00d      	beq.n	8001abc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	e047      	b.n	8001b4c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 020e 	bic.w	r2, r2, #14
 8001aca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af0:	f003 021f 	and.w	r2, r3, #31
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	2101      	movs	r1, #1
 8001afa:	fa01 f202 	lsl.w	r2, r1, r2
 8001afe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b08:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00c      	beq.n	8001b2c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b20:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b2a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	4798      	blx	r3
    }
  }
  return status;
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b66:	e15a      	b.n	8001e1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	fa01 f303 	lsl.w	r3, r1, r3
 8001b74:	4013      	ands	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 814c 	beq.w	8001e18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d00b      	beq.n	8001ba0 <HAL_GPIO_Init+0x48>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d007      	beq.n	8001ba0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b94:	2b11      	cmp	r3, #17
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b12      	cmp	r3, #18
 8001b9e:	d130      	bne.n	8001c02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	f003 0201 	and.w	r2, r3, #1
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0xea>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b12      	cmp	r3, #18
 8001c40:	d123      	bne.n	8001c8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	08da      	lsrs	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3208      	adds	r2, #8
 8001c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	220f      	movs	r2, #15
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	691a      	ldr	r2, [r3, #16]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	08da      	lsrs	r2, r3, #3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3208      	adds	r2, #8
 8001c84:	6939      	ldr	r1, [r7, #16]
 8001c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	2203      	movs	r2, #3
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0203 	and.w	r2, r3, #3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 80a6 	beq.w	8001e18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ccc:	4b5b      	ldr	r3, [pc, #364]	; (8001e3c <HAL_GPIO_Init+0x2e4>)
 8001cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd0:	4a5a      	ldr	r2, [pc, #360]	; (8001e3c <HAL_GPIO_Init+0x2e4>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6613      	str	r3, [r2, #96]	; 0x60
 8001cd8:	4b58      	ldr	r3, [pc, #352]	; (8001e3c <HAL_GPIO_Init+0x2e4>)
 8001cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce4:	4a56      	ldr	r2, [pc, #344]	; (8001e40 <HAL_GPIO_Init+0x2e8>)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	089b      	lsrs	r3, r3, #2
 8001cea:	3302      	adds	r3, #2
 8001cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	220f      	movs	r2, #15
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d0e:	d01f      	beq.n	8001d50 <HAL_GPIO_Init+0x1f8>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a4c      	ldr	r2, [pc, #304]	; (8001e44 <HAL_GPIO_Init+0x2ec>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d019      	beq.n	8001d4c <HAL_GPIO_Init+0x1f4>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a4b      	ldr	r2, [pc, #300]	; (8001e48 <HAL_GPIO_Init+0x2f0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d013      	beq.n	8001d48 <HAL_GPIO_Init+0x1f0>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a4a      	ldr	r2, [pc, #296]	; (8001e4c <HAL_GPIO_Init+0x2f4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d00d      	beq.n	8001d44 <HAL_GPIO_Init+0x1ec>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a49      	ldr	r2, [pc, #292]	; (8001e50 <HAL_GPIO_Init+0x2f8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d007      	beq.n	8001d40 <HAL_GPIO_Init+0x1e8>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a48      	ldr	r2, [pc, #288]	; (8001e54 <HAL_GPIO_Init+0x2fc>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d101      	bne.n	8001d3c <HAL_GPIO_Init+0x1e4>
 8001d38:	2305      	movs	r3, #5
 8001d3a:	e00a      	b.n	8001d52 <HAL_GPIO_Init+0x1fa>
 8001d3c:	2306      	movs	r3, #6
 8001d3e:	e008      	b.n	8001d52 <HAL_GPIO_Init+0x1fa>
 8001d40:	2304      	movs	r3, #4
 8001d42:	e006      	b.n	8001d52 <HAL_GPIO_Init+0x1fa>
 8001d44:	2303      	movs	r3, #3
 8001d46:	e004      	b.n	8001d52 <HAL_GPIO_Init+0x1fa>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e002      	b.n	8001d52 <HAL_GPIO_Init+0x1fa>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <HAL_GPIO_Init+0x1fa>
 8001d50:	2300      	movs	r3, #0
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	f002 0203 	and.w	r2, r2, #3
 8001d58:	0092      	lsls	r2, r2, #2
 8001d5a:	4093      	lsls	r3, r2
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d62:	4937      	ldr	r1, [pc, #220]	; (8001e40 <HAL_GPIO_Init+0x2e8>)
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	3302      	adds	r3, #2
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d70:	4b39      	ldr	r3, [pc, #228]	; (8001e58 <HAL_GPIO_Init+0x300>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d94:	4a30      	ldr	r2, [pc, #192]	; (8001e58 <HAL_GPIO_Init+0x300>)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <HAL_GPIO_Init+0x300>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	43db      	mvns	r3, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4013      	ands	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dbe:	4a26      	ldr	r2, [pc, #152]	; (8001e58 <HAL_GPIO_Init+0x300>)
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dc4:	4b24      	ldr	r3, [pc, #144]	; (8001e58 <HAL_GPIO_Init+0x300>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001de8:	4a1b      	ldr	r2, [pc, #108]	; (8001e58 <HAL_GPIO_Init+0x300>)
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <HAL_GPIO_Init+0x300>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e12:	4a11      	ldr	r2, [pc, #68]	; (8001e58 <HAL_GPIO_Init+0x300>)
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	fa22 f303 	lsr.w	r3, r2, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f47f ae9d 	bne.w	8001b68 <HAL_GPIO_Init+0x10>
  }
}
 8001e2e:	bf00      	nop
 8001e30:	bf00      	nop
 8001e32:	371c      	adds	r7, #28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40010000 	.word	0x40010000
 8001e44:	48000400 	.word	0x48000400
 8001e48:	48000800 	.word	0x48000800
 8001e4c:	48000c00 	.word	0x48000c00
 8001e50:	48001000 	.word	0x48001000
 8001e54:	48001400 	.word	0x48001400
 8001e58:	40010400 	.word	0x40010400

08001e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	807b      	strh	r3, [r7, #2]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e6c:	787b      	ldrb	r3, [r7, #1]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e72:	887a      	ldrh	r2, [r7, #2]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e78:	e002      	b.n	8001e80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e9e:	887a      	ldrh	r2, [r7, #2]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	041a      	lsls	r2, r3, #16
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	43d9      	mvns	r1, r3
 8001eaa:	887b      	ldrh	r3, [r7, #2]
 8001eac:	400b      	ands	r3, r1
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	619a      	str	r2, [r3, #24]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ecc:	695a      	ldr	r2, [r3, #20]
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d006      	beq.n	8001ee4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ed6:	4a05      	ldr	r2, [pc, #20]	; (8001eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ed8:	88fb      	ldrh	r3, [r7, #6]
 8001eda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 f806 	bl	8001ef0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40010400 	.word	0x40010400

08001ef0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d141      	bne.n	8001f9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f16:	4b4b      	ldr	r3, [pc, #300]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f22:	d131      	bne.n	8001f88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f24:	4b47      	ldr	r3, [pc, #284]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f2a:	4a46      	ldr	r2, [pc, #280]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f34:	4b43      	ldr	r3, [pc, #268]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f3c:	4a41      	ldr	r2, [pc, #260]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f44:	4b40      	ldr	r3, [pc, #256]	; (8002048 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2232      	movs	r2, #50	; 0x32
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	4a3f      	ldr	r2, [pc, #252]	; (800204c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	0c9b      	lsrs	r3, r3, #18
 8001f56:	3301      	adds	r3, #1
 8001f58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f5a:	e002      	b.n	8001f62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f62:	4b38      	ldr	r3, [pc, #224]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f6e:	d102      	bne.n	8001f76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f2      	bne.n	8001f5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f76:	4b33      	ldr	r3, [pc, #204]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f82:	d158      	bne.n	8002036 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e057      	b.n	8002038 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f88:	4b2e      	ldr	r3, [pc, #184]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f8e:	4a2d      	ldr	r2, [pc, #180]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f98:	e04d      	b.n	8002036 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa0:	d141      	bne.n	8002026 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fa2:	4b28      	ldr	r3, [pc, #160]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fae:	d131      	bne.n	8002014 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fb0:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fb6:	4a23      	ldr	r2, [pc, #140]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fc0:	4b20      	ldr	r3, [pc, #128]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fc8:	4a1e      	ldr	r2, [pc, #120]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2232      	movs	r2, #50	; 0x32
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	4a1c      	ldr	r2, [pc, #112]	; (800204c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	0c9b      	lsrs	r3, r3, #18
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fe6:	e002      	b.n	8001fee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ffa:	d102      	bne.n	8002002 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f2      	bne.n	8001fe8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800200e:	d112      	bne.n	8002036 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e011      	b.n	8002038 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800201a:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002020:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002024:	e007      	b.n	8002036 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002026:	4b07      	ldr	r3, [pc, #28]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800202e:	4a05      	ldr	r2, [pc, #20]	; (8002044 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002030:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002034:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	40007000 	.word	0x40007000
 8002048:	20000008 	.word	0x20000008
 800204c:	431bde83 	.word	0x431bde83

08002050 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	4a04      	ldr	r2, [pc, #16]	; (800206c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800205a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800205e:	6093      	str	r3, [r2, #8]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40007000 	.word	0x40007000

08002070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e308      	b.n	8002694 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d075      	beq.n	800217a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800208e:	4ba3      	ldr	r3, [pc, #652]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002098:	4ba0      	ldr	r3, [pc, #640]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	2b0c      	cmp	r3, #12
 80020a6:	d102      	bne.n	80020ae <HAL_RCC_OscConfig+0x3e>
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d002      	beq.n	80020b4 <HAL_RCC_OscConfig+0x44>
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d10b      	bne.n	80020cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b4:	4b99      	ldr	r3, [pc, #612]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d05b      	beq.n	8002178 <HAL_RCC_OscConfig+0x108>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d157      	bne.n	8002178 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e2e3      	b.n	8002694 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d4:	d106      	bne.n	80020e4 <HAL_RCC_OscConfig+0x74>
 80020d6:	4b91      	ldr	r3, [pc, #580]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a90      	ldr	r2, [pc, #576]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e01d      	b.n	8002120 <HAL_RCC_OscConfig+0xb0>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0x98>
 80020ee:	4b8b      	ldr	r3, [pc, #556]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a8a      	ldr	r2, [pc, #552]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	4b88      	ldr	r3, [pc, #544]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a87      	ldr	r2, [pc, #540]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 8002100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e00b      	b.n	8002120 <HAL_RCC_OscConfig+0xb0>
 8002108:	4b84      	ldr	r3, [pc, #528]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a83      	ldr	r2, [pc, #524]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 800210e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	4b81      	ldr	r3, [pc, #516]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a80      	ldr	r2, [pc, #512]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 800211a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d013      	beq.n	8002150 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7ff fb18 	bl	800175c <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002130:	f7ff fb14 	bl	800175c <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	; 0x64
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e2a8      	b.n	8002694 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002142:	4b76      	ldr	r3, [pc, #472]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0xc0>
 800214e:	e014      	b.n	800217a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7ff fb04 	bl	800175c <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002158:	f7ff fb00 	bl	800175c <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	; 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e294      	b.n	8002694 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800216a:	4b6c      	ldr	r3, [pc, #432]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0xe8>
 8002176:	e000      	b.n	800217a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d075      	beq.n	8002272 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002186:	4b65      	ldr	r3, [pc, #404]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002190:	4b62      	ldr	r3, [pc, #392]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	2b0c      	cmp	r3, #12
 800219e:	d102      	bne.n	80021a6 <HAL_RCC_OscConfig+0x136>
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d002      	beq.n	80021ac <HAL_RCC_OscConfig+0x13c>
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d11f      	bne.n	80021ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021ac:	4b5b      	ldr	r3, [pc, #364]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_RCC_OscConfig+0x154>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e267      	b.n	8002694 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c4:	4b55      	ldr	r3, [pc, #340]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	061b      	lsls	r3, r3, #24
 80021d2:	4952      	ldr	r1, [pc, #328]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021d8:	4b51      	ldr	r3, [pc, #324]	; (8002320 <HAL_RCC_OscConfig+0x2b0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fa71 	bl	80016c4 <HAL_InitTick>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d043      	beq.n	8002270 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e253      	b.n	8002694 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d023      	beq.n	800223c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f4:	4b49      	ldr	r3, [pc, #292]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a48      	ldr	r2, [pc, #288]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 80021fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7ff faac 	bl	800175c <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002208:	f7ff faa8 	bl	800175c <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e23c      	b.n	8002694 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800221a:	4b40      	ldr	r3, [pc, #256]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002226:	4b3d      	ldr	r3, [pc, #244]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	061b      	lsls	r3, r3, #24
 8002234:	4939      	ldr	r1, [pc, #228]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 8002236:	4313      	orrs	r3, r2
 8002238:	604b      	str	r3, [r1, #4]
 800223a:	e01a      	b.n	8002272 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800223c:	4b37      	ldr	r3, [pc, #220]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a36      	ldr	r2, [pc, #216]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 8002242:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7ff fa88 	bl	800175c <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002250:	f7ff fa84 	bl	800175c <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e218      	b.n	8002694 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002262:	4b2e      	ldr	r3, [pc, #184]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x1e0>
 800226e:	e000      	b.n	8002272 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002270:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d03c      	beq.n	80022f8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d01c      	beq.n	80022c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002286:	4b25      	ldr	r3, [pc, #148]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 8002288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228c:	4a23      	ldr	r2, [pc, #140]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002296:	f7ff fa61 	bl	800175c <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229e:	f7ff fa5d 	bl	800175c <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e1f1      	b.n	8002694 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022b0:	4b1a      	ldr	r3, [pc, #104]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 80022b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0ef      	beq.n	800229e <HAL_RCC_OscConfig+0x22e>
 80022be:	e01b      	b.n	80022f8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c0:	4b16      	ldr	r3, [pc, #88]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 80022c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c6:	4a15      	ldr	r2, [pc, #84]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d0:	f7ff fa44 	bl	800175c <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d8:	f7ff fa40 	bl	800175c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e1d4      	b.n	8002694 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022ea:	4b0c      	ldr	r3, [pc, #48]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 80022ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1ef      	bne.n	80022d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0304 	and.w	r3, r3, #4
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80ab 	beq.w	800245c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002306:	2300      	movs	r3, #0
 8002308:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800230a:	4b04      	ldr	r3, [pc, #16]	; (800231c <HAL_RCC_OscConfig+0x2ac>)
 800230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d106      	bne.n	8002324 <HAL_RCC_OscConfig+0x2b4>
 8002316:	2301      	movs	r3, #1
 8002318:	e005      	b.n	8002326 <HAL_RCC_OscConfig+0x2b6>
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
 8002320:	2000000c 	.word	0x2000000c
 8002324:	2300      	movs	r3, #0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00d      	beq.n	8002346 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	4baf      	ldr	r3, [pc, #700]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 800232c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232e:	4aae      	ldr	r2, [pc, #696]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 8002330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002334:	6593      	str	r3, [r2, #88]	; 0x58
 8002336:	4bac      	ldr	r3, [pc, #688]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002342:	2301      	movs	r3, #1
 8002344:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002346:	4ba9      	ldr	r3, [pc, #676]	; (80025ec <HAL_RCC_OscConfig+0x57c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234e:	2b00      	cmp	r3, #0
 8002350:	d118      	bne.n	8002384 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002352:	4ba6      	ldr	r3, [pc, #664]	; (80025ec <HAL_RCC_OscConfig+0x57c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4aa5      	ldr	r2, [pc, #660]	; (80025ec <HAL_RCC_OscConfig+0x57c>)
 8002358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235e:	f7ff f9fd 	bl	800175c <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002366:	f7ff f9f9 	bl	800175c <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e18d      	b.n	8002694 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002378:	4b9c      	ldr	r3, [pc, #624]	; (80025ec <HAL_RCC_OscConfig+0x57c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d108      	bne.n	800239e <HAL_RCC_OscConfig+0x32e>
 800238c:	4b96      	ldr	r3, [pc, #600]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 800238e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002392:	4a95      	ldr	r2, [pc, #596]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800239c:	e024      	b.n	80023e8 <HAL_RCC_OscConfig+0x378>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b05      	cmp	r3, #5
 80023a4:	d110      	bne.n	80023c8 <HAL_RCC_OscConfig+0x358>
 80023a6:	4b90      	ldr	r3, [pc, #576]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80023a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ac:	4a8e      	ldr	r2, [pc, #568]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80023ae:	f043 0304 	orr.w	r3, r3, #4
 80023b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023b6:	4b8c      	ldr	r3, [pc, #560]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80023b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023bc:	4a8a      	ldr	r2, [pc, #552]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023c6:	e00f      	b.n	80023e8 <HAL_RCC_OscConfig+0x378>
 80023c8:	4b87      	ldr	r3, [pc, #540]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80023ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ce:	4a86      	ldr	r2, [pc, #536]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80023d0:	f023 0301 	bic.w	r3, r3, #1
 80023d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023d8:	4b83      	ldr	r3, [pc, #524]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80023da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023de:	4a82      	ldr	r2, [pc, #520]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80023e0:	f023 0304 	bic.w	r3, r3, #4
 80023e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d016      	beq.n	800241e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f0:	f7ff f9b4 	bl	800175c <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f6:	e00a      	b.n	800240e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f8:	f7ff f9b0 	bl	800175c <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e142      	b.n	8002694 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800240e:	4b76      	ldr	r3, [pc, #472]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 8002410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ed      	beq.n	80023f8 <HAL_RCC_OscConfig+0x388>
 800241c:	e015      	b.n	800244a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241e:	f7ff f99d 	bl	800175c <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002424:	e00a      	b.n	800243c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7ff f999 	bl	800175c <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	; 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e12b      	b.n	8002694 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800243c:	4b6a      	ldr	r3, [pc, #424]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1ed      	bne.n	8002426 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800244a:	7ffb      	ldrb	r3, [r7, #31]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d105      	bne.n	800245c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002450:	4b65      	ldr	r3, [pc, #404]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002454:	4a64      	ldr	r2, [pc, #400]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 8002456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800245a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b00      	cmp	r3, #0
 8002466:	d03c      	beq.n	80024e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01c      	beq.n	80024aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002470:	4b5d      	ldr	r3, [pc, #372]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 8002472:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002476:	4a5c      	ldr	r2, [pc, #368]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002480:	f7ff f96c 	bl	800175c <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002488:	f7ff f968 	bl	800175c <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e0fc      	b.n	8002694 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800249a:	4b53      	ldr	r3, [pc, #332]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 800249c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0ef      	beq.n	8002488 <HAL_RCC_OscConfig+0x418>
 80024a8:	e01b      	b.n	80024e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024aa:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80024ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024b0:	4a4d      	ldr	r2, [pc, #308]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80024b2:	f023 0301 	bic.w	r3, r3, #1
 80024b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ba:	f7ff f94f 	bl	800175c <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024c2:	f7ff f94b 	bl	800175c <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e0df      	b.n	8002694 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024d4:	4b44      	ldr	r3, [pc, #272]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80024d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1ef      	bne.n	80024c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 80d3 	beq.w	8002692 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024ec:	4b3e      	ldr	r3, [pc, #248]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 030c 	and.w	r3, r3, #12
 80024f4:	2b0c      	cmp	r3, #12
 80024f6:	f000 808d 	beq.w	8002614 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d15a      	bne.n	80025b8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002502:	4b39      	ldr	r3, [pc, #228]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a38      	ldr	r2, [pc, #224]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 8002508:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800250c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250e:	f7ff f925 	bl	800175c <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002516:	f7ff f921 	bl	800175c <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e0b5      	b.n	8002694 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002528:	4b2f      	ldr	r3, [pc, #188]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f0      	bne.n	8002516 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002534:	4b2c      	ldr	r3, [pc, #176]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <HAL_RCC_OscConfig+0x580>)
 800253a:	4013      	ands	r3, r2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6a11      	ldr	r1, [r2, #32]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002544:	3a01      	subs	r2, #1
 8002546:	0112      	lsls	r2, r2, #4
 8002548:	4311      	orrs	r1, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800254e:	0212      	lsls	r2, r2, #8
 8002550:	4311      	orrs	r1, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002556:	0852      	lsrs	r2, r2, #1
 8002558:	3a01      	subs	r2, #1
 800255a:	0552      	lsls	r2, r2, #21
 800255c:	4311      	orrs	r1, r2
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002562:	0852      	lsrs	r2, r2, #1
 8002564:	3a01      	subs	r2, #1
 8002566:	0652      	lsls	r2, r2, #25
 8002568:	4311      	orrs	r1, r2
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800256e:	06d2      	lsls	r2, r2, #27
 8002570:	430a      	orrs	r2, r1
 8002572:	491d      	ldr	r1, [pc, #116]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 8002574:	4313      	orrs	r3, r2
 8002576:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002578:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a1a      	ldr	r2, [pc, #104]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 800257e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002582:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002584:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4a17      	ldr	r2, [pc, #92]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 800258a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800258e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7ff f8e4 	bl	800175c <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002598:	f7ff f8e0 	bl	800175c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e074      	b.n	8002694 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025aa:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0x528>
 80025b6:	e06c      	b.n	8002692 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80025be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025c2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80025c4:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80025ca:	f023 0303 	bic.w	r3, r3, #3
 80025ce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <HAL_RCC_OscConfig+0x578>)
 80025d6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80025da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7ff f8bc 	bl	800175c <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e6:	e00e      	b.n	8002606 <HAL_RCC_OscConfig+0x596>
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40007000 	.word	0x40007000
 80025f0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f4:	f7ff f8b2 	bl	800175c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e046      	b.n	8002694 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002606:	4b25      	ldr	r3, [pc, #148]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x584>
 8002612:	e03e      	b.n	8002692 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e039      	b.n	8002694 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002620:	4b1e      	ldr	r3, [pc, #120]	; (800269c <HAL_RCC_OscConfig+0x62c>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f003 0203 	and.w	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	429a      	cmp	r2, r3
 8002632:	d12c      	bne.n	800268e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	3b01      	subs	r3, #1
 8002640:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002642:	429a      	cmp	r2, r3
 8002644:	d123      	bne.n	800268e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002652:	429a      	cmp	r2, r3
 8002654:	d11b      	bne.n	800268e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d113      	bne.n	800268e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	085b      	lsrs	r3, r3, #1
 8002672:	3b01      	subs	r3, #1
 8002674:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002676:	429a      	cmp	r2, r3
 8002678:	d109      	bne.n	800268e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	3b01      	subs	r3, #1
 8002688:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d001      	beq.n	8002692 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3720      	adds	r7, #32
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000

080026a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e11e      	b.n	80028f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026b8:	4b91      	ldr	r3, [pc, #580]	; (8002900 <HAL_RCC_ClockConfig+0x260>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d910      	bls.n	80026e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c6:	4b8e      	ldr	r3, [pc, #568]	; (8002900 <HAL_RCC_ClockConfig+0x260>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 020f 	bic.w	r2, r3, #15
 80026ce:	498c      	ldr	r1, [pc, #560]	; (8002900 <HAL_RCC_ClockConfig+0x260>)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b8a      	ldr	r3, [pc, #552]	; (8002900 <HAL_RCC_ClockConfig+0x260>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e106      	b.n	80028f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d073      	beq.n	80027dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d129      	bne.n	8002750 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fc:	4b81      	ldr	r3, [pc, #516]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0f4      	b.n	80028f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800270c:	f000 f99e 	bl	8002a4c <RCC_GetSysClockFreqFromPLLSource>
 8002710:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4a7c      	ldr	r2, [pc, #496]	; (8002908 <HAL_RCC_ClockConfig+0x268>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d93f      	bls.n	800279a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800271a:	4b7a      	ldr	r3, [pc, #488]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800272e:	2b00      	cmp	r3, #0
 8002730:	d033      	beq.n	800279a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002736:	2b00      	cmp	r3, #0
 8002738:	d12f      	bne.n	800279a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800273a:	4b72      	ldr	r3, [pc, #456]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002742:	4a70      	ldr	r2, [pc, #448]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 8002744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002748:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800274a:	2380      	movs	r3, #128	; 0x80
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	e024      	b.n	800279a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d107      	bne.n	8002768 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002758:	4b6a      	ldr	r3, [pc, #424]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d109      	bne.n	8002778 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0c6      	b.n	80028f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002768:	4b66      	ldr	r3, [pc, #408]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0be      	b.n	80028f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002778:	f000 f8ce 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 800277c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4a61      	ldr	r2, [pc, #388]	; (8002908 <HAL_RCC_ClockConfig+0x268>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d909      	bls.n	800279a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002786:	4b5f      	ldr	r3, [pc, #380]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800278e:	4a5d      	ldr	r2, [pc, #372]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 8002790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002794:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800279a:	4b5a      	ldr	r3, [pc, #360]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f023 0203 	bic.w	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	4957      	ldr	r1, [pc, #348]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ac:	f7fe ffd6 	bl	800175c <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b4:	f7fe ffd2 	bl	800175c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e095      	b.n	80028f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ca:	4b4e      	ldr	r3, [pc, #312]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 020c 	and.w	r2, r3, #12
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	429a      	cmp	r2, r3
 80027da:	d1eb      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d023      	beq.n	8002830 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027f4:	4b43      	ldr	r3, [pc, #268]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4a42      	ldr	r2, [pc, #264]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 80027fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800280c:	4b3d      	ldr	r3, [pc, #244]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002814:	4a3b      	ldr	r2, [pc, #236]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 8002816:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800281a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800281c:	4b39      	ldr	r3, [pc, #228]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	4936      	ldr	r1, [pc, #216]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
 800282e:	e008      	b.n	8002842 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2b80      	cmp	r3, #128	; 0x80
 8002834:	d105      	bne.n	8002842 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002836:	4b33      	ldr	r3, [pc, #204]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	4a32      	ldr	r2, [pc, #200]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 800283c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002840:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002842:	4b2f      	ldr	r3, [pc, #188]	; (8002900 <HAL_RCC_ClockConfig+0x260>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d21d      	bcs.n	800288c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002850:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_RCC_ClockConfig+0x260>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f023 020f 	bic.w	r2, r3, #15
 8002858:	4929      	ldr	r1, [pc, #164]	; (8002900 <HAL_RCC_ClockConfig+0x260>)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	4313      	orrs	r3, r2
 800285e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002860:	f7fe ff7c 	bl	800175c <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	e00a      	b.n	800287e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002868:	f7fe ff78 	bl	800175c <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	; 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e03b      	b.n	80028f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b20      	ldr	r3, [pc, #128]	; (8002900 <HAL_RCC_ClockConfig+0x260>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d1ed      	bne.n	8002868 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002898:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4917      	ldr	r1, [pc, #92]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028b6:	4b13      	ldr	r3, [pc, #76]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	490f      	ldr	r1, [pc, #60]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028ca:	f000 f825 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 80028ce:	4602      	mov	r2, r0
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <HAL_RCC_ClockConfig+0x264>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	490c      	ldr	r1, [pc, #48]	; (800290c <HAL_RCC_ClockConfig+0x26c>)
 80028dc:	5ccb      	ldrb	r3, [r1, r3]
 80028de:	f003 031f 	and.w	r3, r3, #31
 80028e2:	fa22 f303 	lsr.w	r3, r2, r3
 80028e6:	4a0a      	ldr	r2, [pc, #40]	; (8002910 <HAL_RCC_ClockConfig+0x270>)
 80028e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80028ea:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <HAL_RCC_ClockConfig+0x274>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fee8 	bl	80016c4 <HAL_InitTick>
 80028f4:	4603      	mov	r3, r0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40022000 	.word	0x40022000
 8002904:	40021000 	.word	0x40021000
 8002908:	04c4b400 	.word	0x04c4b400
 800290c:	08007858 	.word	0x08007858
 8002910:	20000008 	.word	0x20000008
 8002914:	2000000c 	.word	0x2000000c

08002918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800291e:	4b2c      	ldr	r3, [pc, #176]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b04      	cmp	r3, #4
 8002928:	d102      	bne.n	8002930 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800292a:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	e047      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002930:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 030c 	and.w	r3, r3, #12
 8002938:	2b08      	cmp	r3, #8
 800293a:	d102      	bne.n	8002942 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800293c:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	e03e      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002942:	4b23      	ldr	r3, [pc, #140]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b0c      	cmp	r3, #12
 800294c:	d136      	bne.n	80029bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800294e:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002958:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	3301      	adds	r3, #1
 8002964:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d10c      	bne.n	8002986 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800296c:	4a1a      	ldr	r2, [pc, #104]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	fbb2 f3f3 	udiv	r3, r2, r3
 8002974:	4a16      	ldr	r2, [pc, #88]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002976:	68d2      	ldr	r2, [r2, #12]
 8002978:	0a12      	lsrs	r2, r2, #8
 800297a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	617b      	str	r3, [r7, #20]
      break;
 8002984:	e00c      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002986:	4a13      	ldr	r2, [pc, #76]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	fbb2 f3f3 	udiv	r3, r2, r3
 800298e:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002990:	68d2      	ldr	r2, [r2, #12]
 8002992:	0a12      	lsrs	r2, r2, #8
 8002994:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002998:	fb02 f303 	mul.w	r3, r2, r3
 800299c:	617b      	str	r3, [r7, #20]
      break;
 800299e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	0e5b      	lsrs	r3, r3, #25
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	3301      	adds	r3, #1
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	e001      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80029c0:	693b      	ldr	r3, [r7, #16]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	371c      	adds	r7, #28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000
 80029d4:	00f42400 	.word	0x00f42400
 80029d8:	016e3600 	.word	0x016e3600

080029dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e0:	4b03      	ldr	r3, [pc, #12]	; (80029f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029e2:	681b      	ldr	r3, [r3, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	20000008 	.word	0x20000008

080029f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029f8:	f7ff fff0 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 80029fc:	4602      	mov	r2, r0
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	0a1b      	lsrs	r3, r3, #8
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	4904      	ldr	r1, [pc, #16]	; (8002a1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a0a:	5ccb      	ldrb	r3, [r1, r3]
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	08007868 	.word	0x08007868

08002a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a24:	f7ff ffda 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	0adb      	lsrs	r3, r3, #11
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	4904      	ldr	r1, [pc, #16]	; (8002a48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a36:	5ccb      	ldrb	r3, [r1, r3]
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40021000 	.word	0x40021000
 8002a48:	08007868 	.word	0x08007868

08002a4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a52:	4b1e      	ldr	r3, [pc, #120]	; (8002acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	3301      	adds	r3, #1
 8002a68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d10c      	bne.n	8002a8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a70:	4a17      	ldr	r2, [pc, #92]	; (8002ad0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a78:	4a14      	ldr	r2, [pc, #80]	; (8002acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a7a:	68d2      	ldr	r2, [r2, #12]
 8002a7c:	0a12      	lsrs	r2, r2, #8
 8002a7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a82:	fb02 f303 	mul.w	r3, r2, r3
 8002a86:	617b      	str	r3, [r7, #20]
    break;
 8002a88:	e00c      	b.n	8002aa4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a8a:	4a12      	ldr	r2, [pc, #72]	; (8002ad4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a92:	4a0e      	ldr	r2, [pc, #56]	; (8002acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a94:	68d2      	ldr	r2, [r2, #12]
 8002a96:	0a12      	lsrs	r2, r2, #8
 8002a98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a9c:	fb02 f303 	mul.w	r3, r2, r3
 8002aa0:	617b      	str	r3, [r7, #20]
    break;
 8002aa2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	0e5b      	lsrs	r3, r3, #25
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002abe:	687b      	ldr	r3, [r7, #4]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	371c      	adds	r7, #28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	016e3600 	.word	0x016e3600
 8002ad4:	00f42400 	.word	0x00f42400

08002ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 8098 	beq.w	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af6:	2300      	movs	r3, #0
 8002af8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002afa:	4b43      	ldr	r3, [pc, #268]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10d      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	4b40      	ldr	r3, [pc, #256]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	4a3f      	ldr	r2, [pc, #252]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b10:	6593      	str	r3, [r2, #88]	; 0x58
 8002b12:	4b3d      	ldr	r3, [pc, #244]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b22:	4b3a      	ldr	r3, [pc, #232]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a39      	ldr	r2, [pc, #228]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b2e:	f7fe fe15 	bl	800175c <HAL_GetTick>
 8002b32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b34:	e009      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b36:	f7fe fe11 	bl	800175c <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d902      	bls.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	74fb      	strb	r3, [r7, #19]
        break;
 8002b48:	e005      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b4a:	4b30      	ldr	r3, [pc, #192]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0ef      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002b56:	7cfb      	ldrb	r3, [r7, #19]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d159      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b5c:	4b2a      	ldr	r3, [pc, #168]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d01e      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d019      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b78:	4b23      	ldr	r3, [pc, #140]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b84:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8a:	4a1f      	ldr	r2, [pc, #124]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b94:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9a:	4a1b      	ldr	r2, [pc, #108]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ba4:	4a18      	ldr	r2, [pc, #96]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d016      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb6:	f7fe fdd1 	bl	800175c <HAL_GetTick>
 8002bba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bbc:	e00b      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bbe:	f7fe fdcd 	bl	800175c <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d902      	bls.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	74fb      	strb	r3, [r7, #19]
            break;
 8002bd4:	e006      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bd6:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0ec      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002be4:	7cfb      	ldrb	r3, [r7, #19]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10b      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bea:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	4903      	ldr	r1, [pc, #12]	; (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c00:	e008      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c02:	7cfb      	ldrb	r3, [r7, #19]
 8002c04:	74bb      	strb	r3, [r7, #18]
 8002c06:	e005      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c14:	7c7b      	ldrb	r3, [r7, #17]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d105      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c1a:	4ba6      	ldr	r3, [pc, #664]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	4aa5      	ldr	r2, [pc, #660]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c32:	4ba0      	ldr	r3, [pc, #640]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c38:	f023 0203 	bic.w	r2, r3, #3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	499c      	ldr	r1, [pc, #624]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c54:	4b97      	ldr	r3, [pc, #604]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	f023 020c 	bic.w	r2, r3, #12
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	4994      	ldr	r1, [pc, #592]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c76:	4b8f      	ldr	r3, [pc, #572]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	498b      	ldr	r1, [pc, #556]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c98:	4b86      	ldr	r3, [pc, #536]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	4983      	ldr	r1, [pc, #524]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cba:	4b7e      	ldr	r3, [pc, #504]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	497a      	ldr	r1, [pc, #488]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cdc:	4b75      	ldr	r3, [pc, #468]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	4972      	ldr	r1, [pc, #456]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cfe:	4b6d      	ldr	r3, [pc, #436]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	4969      	ldr	r1, [pc, #420]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d20:	4b64      	ldr	r3, [pc, #400]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4961      	ldr	r1, [pc, #388]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d42:	4b5c      	ldr	r3, [pc, #368]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	4958      	ldr	r1, [pc, #352]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d015      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d64:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	4950      	ldr	r1, [pc, #320]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d82:	d105      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d84:	4b4b      	ldr	r3, [pc, #300]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4a4a      	ldr	r2, [pc, #296]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d015      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d9c:	4b45      	ldr	r3, [pc, #276]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002daa:	4942      	ldr	r1, [pc, #264]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dba:	d105      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dbc:	4b3d      	ldr	r3, [pc, #244]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4a3c      	ldr	r2, [pc, #240]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dc6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d015      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002dd4:	4b37      	ldr	r3, [pc, #220]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dda:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	4934      	ldr	r1, [pc, #208]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002df2:	d105      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002df4:	4b2f      	ldr	r3, [pc, #188]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4a2e      	ldr	r2, [pc, #184]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dfe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d015      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e0c:	4b29      	ldr	r3, [pc, #164]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1a:	4926      	ldr	r1, [pc, #152]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e2a:	d105      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e2c:	4b21      	ldr	r3, [pc, #132]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	4a20      	ldr	r2, [pc, #128]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e36:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d015      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e44:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	4918      	ldr	r1, [pc, #96]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e62:	d105      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e64:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d015      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e7c:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8a:	490a      	ldr	r1, [pc, #40]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e9a:	d105      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4a04      	ldr	r2, [pc, #16]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002ea8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000

08002eb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e049      	b.n	8002f5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7fe f9a6 	bl	8001230 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3304      	adds	r3, #4
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	f000 feee 	bl	8003cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d001      	beq.n	8002f80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e04a      	b.n	8003016 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a21      	ldr	r2, [pc, #132]	; (8003024 <HAL_TIM_Base_Start_IT+0xbc>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d018      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002faa:	d013      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1d      	ldr	r2, [pc, #116]	; (8003028 <HAL_TIM_Base_Start_IT+0xc0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00e      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1c      	ldr	r2, [pc, #112]	; (800302c <HAL_TIM_Base_Start_IT+0xc4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d009      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1a      	ldr	r2, [pc, #104]	; (8003030 <HAL_TIM_Base_Start_IT+0xc8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d004      	beq.n	8002fd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a19      	ldr	r2, [pc, #100]	; (8003034 <HAL_TIM_Base_Start_IT+0xcc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d115      	bne.n	8003000 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	4b17      	ldr	r3, [pc, #92]	; (8003038 <HAL_TIM_Base_Start_IT+0xd0>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b06      	cmp	r3, #6
 8002fe4:	d015      	beq.n	8003012 <HAL_TIM_Base_Start_IT+0xaa>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fec:	d011      	beq.n	8003012 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0201 	orr.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffe:	e008      	b.n	8003012 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0201 	orr.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	e000      	b.n	8003014 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003012:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40012c00 	.word	0x40012c00
 8003028:	40000400 	.word	0x40000400
 800302c:	40000800 	.word	0x40000800
 8003030:	40013400 	.word	0x40013400
 8003034:	40014000 	.word	0x40014000
 8003038:	00010007 	.word	0x00010007

0800303c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e049      	b.n	80030e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f841 	bl	80030ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3304      	adds	r3, #4
 8003078:	4619      	mov	r1, r3
 800307a:	4610      	mov	r0, r2
 800307c:	f000 fe2c 	bl	8003cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d109      	bne.n	8003124 <HAL_TIM_PWM_Start+0x24>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	bf14      	ite	ne
 800311c:	2301      	movne	r3, #1
 800311e:	2300      	moveq	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	e03c      	b.n	800319e <HAL_TIM_PWM_Start+0x9e>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b04      	cmp	r3, #4
 8003128:	d109      	bne.n	800313e <HAL_TIM_PWM_Start+0x3e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b01      	cmp	r3, #1
 8003134:	bf14      	ite	ne
 8003136:	2301      	movne	r3, #1
 8003138:	2300      	moveq	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	e02f      	b.n	800319e <HAL_TIM_PWM_Start+0x9e>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b08      	cmp	r3, #8
 8003142:	d109      	bne.n	8003158 <HAL_TIM_PWM_Start+0x58>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b01      	cmp	r3, #1
 800314e:	bf14      	ite	ne
 8003150:	2301      	movne	r3, #1
 8003152:	2300      	moveq	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e022      	b.n	800319e <HAL_TIM_PWM_Start+0x9e>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2b0c      	cmp	r3, #12
 800315c:	d109      	bne.n	8003172 <HAL_TIM_PWM_Start+0x72>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b01      	cmp	r3, #1
 8003168:	bf14      	ite	ne
 800316a:	2301      	movne	r3, #1
 800316c:	2300      	moveq	r3, #0
 800316e:	b2db      	uxtb	r3, r3
 8003170:	e015      	b.n	800319e <HAL_TIM_PWM_Start+0x9e>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b10      	cmp	r3, #16
 8003176:	d109      	bne.n	800318c <HAL_TIM_PWM_Start+0x8c>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b01      	cmp	r3, #1
 8003182:	bf14      	ite	ne
 8003184:	2301      	movne	r3, #1
 8003186:	2300      	moveq	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	e008      	b.n	800319e <HAL_TIM_PWM_Start+0x9e>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b01      	cmp	r3, #1
 8003196:	bf14      	ite	ne
 8003198:	2301      	movne	r3, #1
 800319a:	2300      	moveq	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e097      	b.n	80032d6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d104      	bne.n	80031b6 <HAL_TIM_PWM_Start+0xb6>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031b4:	e023      	b.n	80031fe <HAL_TIM_PWM_Start+0xfe>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d104      	bne.n	80031c6 <HAL_TIM_PWM_Start+0xc6>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031c4:	e01b      	b.n	80031fe <HAL_TIM_PWM_Start+0xfe>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d104      	bne.n	80031d6 <HAL_TIM_PWM_Start+0xd6>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031d4:	e013      	b.n	80031fe <HAL_TIM_PWM_Start+0xfe>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b0c      	cmp	r3, #12
 80031da:	d104      	bne.n	80031e6 <HAL_TIM_PWM_Start+0xe6>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031e4:	e00b      	b.n	80031fe <HAL_TIM_PWM_Start+0xfe>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	d104      	bne.n	80031f6 <HAL_TIM_PWM_Start+0xf6>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031f4:	e003      	b.n	80031fe <HAL_TIM_PWM_Start+0xfe>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2202      	movs	r2, #2
 80031fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2201      	movs	r2, #1
 8003204:	6839      	ldr	r1, [r7, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f001 f988 	bl	800451c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a33      	ldr	r2, [pc, #204]	; (80032e0 <HAL_TIM_PWM_Start+0x1e0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d013      	beq.n	800323e <HAL_TIM_PWM_Start+0x13e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a32      	ldr	r2, [pc, #200]	; (80032e4 <HAL_TIM_PWM_Start+0x1e4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00e      	beq.n	800323e <HAL_TIM_PWM_Start+0x13e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a30      	ldr	r2, [pc, #192]	; (80032e8 <HAL_TIM_PWM_Start+0x1e8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d009      	beq.n	800323e <HAL_TIM_PWM_Start+0x13e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a2f      	ldr	r2, [pc, #188]	; (80032ec <HAL_TIM_PWM_Start+0x1ec>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d004      	beq.n	800323e <HAL_TIM_PWM_Start+0x13e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a2d      	ldr	r2, [pc, #180]	; (80032f0 <HAL_TIM_PWM_Start+0x1f0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d101      	bne.n	8003242 <HAL_TIM_PWM_Start+0x142>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <HAL_TIM_PWM_Start+0x144>
 8003242:	2300      	movs	r3, #0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d007      	beq.n	8003258 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003256:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a20      	ldr	r2, [pc, #128]	; (80032e0 <HAL_TIM_PWM_Start+0x1e0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d018      	beq.n	8003294 <HAL_TIM_PWM_Start+0x194>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326a:	d013      	beq.n	8003294 <HAL_TIM_PWM_Start+0x194>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a20      	ldr	r2, [pc, #128]	; (80032f4 <HAL_TIM_PWM_Start+0x1f4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00e      	beq.n	8003294 <HAL_TIM_PWM_Start+0x194>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1f      	ldr	r2, [pc, #124]	; (80032f8 <HAL_TIM_PWM_Start+0x1f8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d009      	beq.n	8003294 <HAL_TIM_PWM_Start+0x194>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a17      	ldr	r2, [pc, #92]	; (80032e4 <HAL_TIM_PWM_Start+0x1e4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d004      	beq.n	8003294 <HAL_TIM_PWM_Start+0x194>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a16      	ldr	r2, [pc, #88]	; (80032e8 <HAL_TIM_PWM_Start+0x1e8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d115      	bne.n	80032c0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	4b18      	ldr	r3, [pc, #96]	; (80032fc <HAL_TIM_PWM_Start+0x1fc>)
 800329c:	4013      	ands	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b06      	cmp	r3, #6
 80032a4:	d015      	beq.n	80032d2 <HAL_TIM_PWM_Start+0x1d2>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ac:	d011      	beq.n	80032d2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0201 	orr.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032be:	e008      	b.n	80032d2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0201 	orr.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	e000      	b.n	80032d4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40012c00 	.word	0x40012c00
 80032e4:	40013400 	.word	0x40013400
 80032e8:	40014000 	.word	0x40014000
 80032ec:	40014400 	.word	0x40014400
 80032f0:	40014800 	.word	0x40014800
 80032f4:	40000400 	.word	0x40000400
 80032f8:	40000800 	.word	0x40000800
 80032fc:	00010007 	.word	0x00010007

08003300 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e097      	b.n	8003444 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d106      	bne.n	800332e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7fd ffe7 	bl	80012fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003344:	f023 0307 	bic.w	r3, r3, #7
 8003348:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3304      	adds	r3, #4
 8003352:	4619      	mov	r1, r3
 8003354:	4610      	mov	r0, r2
 8003356:	f000 fcbf 	bl	8003cd8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003382:	f023 0303 	bic.w	r3, r3, #3
 8003386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	021b      	lsls	r3, r3, #8
 8003392:	4313      	orrs	r3, r2
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80033a0:	f023 030c 	bic.w	r3, r3, #12
 80033a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	021b      	lsls	r3, r3, #8
 80033bc:	4313      	orrs	r3, r2
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	011a      	lsls	r2, r3, #4
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	031b      	lsls	r3, r3, #12
 80033d0:	4313      	orrs	r3, r2
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80033de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80033e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	4313      	orrs	r3, r2
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800345c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003464:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800346c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003474:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d110      	bne.n	800349e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d102      	bne.n	8003488 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003482:	7b7b      	ldrb	r3, [r7, #13]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d001      	beq.n	800348c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e069      	b.n	8003560 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800349c:	e031      	b.n	8003502 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d110      	bne.n	80034c6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034a4:	7bbb      	ldrb	r3, [r7, #14]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d102      	bne.n	80034b0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034aa:	7b3b      	ldrb	r3, [r7, #12]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d001      	beq.n	80034b4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e055      	b.n	8003560 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034c4:	e01d      	b.n	8003502 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d108      	bne.n	80034de <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034cc:	7bbb      	ldrb	r3, [r7, #14]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d105      	bne.n	80034de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034d2:	7b7b      	ldrb	r3, [r7, #13]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d102      	bne.n	80034de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034d8:	7b3b      	ldrb	r3, [r7, #12]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d001      	beq.n	80034e2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e03e      	b.n	8003560 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2202      	movs	r2, #2
 80034e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2202      	movs	r2, #2
 80034ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2202      	movs	r2, #2
 80034f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2202      	movs	r2, #2
 80034fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_TIM_Encoder_Start+0xc4>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b04      	cmp	r3, #4
 800350c:	d008      	beq.n	8003520 <HAL_TIM_Encoder_Start+0xd4>
 800350e:	e00f      	b.n	8003530 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2201      	movs	r2, #1
 8003516:	2100      	movs	r1, #0
 8003518:	4618      	mov	r0, r3
 800351a:	f000 ffff 	bl	800451c <TIM_CCxChannelCmd>
      break;
 800351e:	e016      	b.n	800354e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2201      	movs	r2, #1
 8003526:	2104      	movs	r1, #4
 8003528:	4618      	mov	r0, r3
 800352a:	f000 fff7 	bl	800451c <TIM_CCxChannelCmd>
      break;
 800352e:	e00e      	b.n	800354e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2201      	movs	r2, #1
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f000 ffef 	bl	800451c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2201      	movs	r2, #1
 8003544:	2104      	movs	r1, #4
 8003546:	4618      	mov	r0, r3
 8003548:	f000 ffe8 	bl	800451c <TIM_CCxChannelCmd>
      break;
 800354c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0201 	orr.w	r2, r2, #1
 800355c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b02      	cmp	r3, #2
 800357c:	d122      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b02      	cmp	r3, #2
 800358a:	d11b      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0202 	mvn.w	r2, #2
 8003594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fb76 	bl	8003c9c <HAL_TIM_IC_CaptureCallback>
 80035b0:	e005      	b.n	80035be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fb68 	bl	8003c88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 fb79 	bl	8003cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d122      	bne.n	8003618 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d11b      	bne.n	8003618 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0204 	mvn.w	r2, #4
 80035e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2202      	movs	r2, #2
 80035ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fb4c 	bl	8003c9c <HAL_TIM_IC_CaptureCallback>
 8003604:	e005      	b.n	8003612 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fb3e 	bl	8003c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fb4f 	bl	8003cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b08      	cmp	r3, #8
 8003624:	d122      	bne.n	800366c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b08      	cmp	r3, #8
 8003632:	d11b      	bne.n	800366c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f06f 0208 	mvn.w	r2, #8
 800363c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2204      	movs	r2, #4
 8003642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fb22 	bl	8003c9c <HAL_TIM_IC_CaptureCallback>
 8003658:	e005      	b.n	8003666 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fb14 	bl	8003c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 fb25 	bl	8003cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b10      	cmp	r3, #16
 8003678:	d122      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0310 	and.w	r3, r3, #16
 8003684:	2b10      	cmp	r3, #16
 8003686:	d11b      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0210 	mvn.w	r2, #16
 8003690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2208      	movs	r2, #8
 8003696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 faf8 	bl	8003c9c <HAL_TIM_IC_CaptureCallback>
 80036ac:	e005      	b.n	80036ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 faea 	bl	8003c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fafb 	bl	8003cb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d10e      	bne.n	80036ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d107      	bne.n	80036ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f06f 0201 	mvn.w	r2, #1
 80036e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 fac4 	bl	8003c74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f6:	2b80      	cmp	r3, #128	; 0x80
 80036f8:	d10e      	bne.n	8003718 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003704:	2b80      	cmp	r3, #128	; 0x80
 8003706:	d107      	bne.n	8003718 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f001 f908 	bl	8004928 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003726:	d10e      	bne.n	8003746 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003732:	2b80      	cmp	r3, #128	; 0x80
 8003734:	d107      	bne.n	8003746 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800373e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f001 f8fb 	bl	800493c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b40      	cmp	r3, #64	; 0x40
 8003752:	d10e      	bne.n	8003772 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	d107      	bne.n	8003772 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800376a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 faa9 	bl	8003cc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b20      	cmp	r3, #32
 800377e:	d10e      	bne.n	800379e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b20      	cmp	r3, #32
 800378c:	d107      	bne.n	800379e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f06f 0220 	mvn.w	r2, #32
 8003796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f001 f8bb 	bl	8004914 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ac:	d10f      	bne.n	80037ce <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037bc:	d107      	bne.n	80037ce <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80037c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f001 f8c1 	bl	8004950 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037dc:	d10f      	bne.n	80037fe <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037ec:	d107      	bne.n	80037fe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80037f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f001 f8b3 	bl	8004964 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800380c:	d10f      	bne.n	800382e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800381c:	d107      	bne.n	800382e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f001 f8a5 	bl	8004978 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003838:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800383c:	d10f      	bne.n	800385e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003848:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800384c:	d107      	bne.n	800385e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f001 f897 	bl	800498c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800387e:	2302      	movs	r3, #2
 8003880:	e0fd      	b.n	8003a7e <HAL_TIM_PWM_ConfigChannel+0x216>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b14      	cmp	r3, #20
 800388e:	f200 80f0 	bhi.w	8003a72 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003892:	a201      	add	r2, pc, #4	; (adr r2, 8003898 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003898:	080038ed 	.word	0x080038ed
 800389c:	08003a73 	.word	0x08003a73
 80038a0:	08003a73 	.word	0x08003a73
 80038a4:	08003a73 	.word	0x08003a73
 80038a8:	0800392d 	.word	0x0800392d
 80038ac:	08003a73 	.word	0x08003a73
 80038b0:	08003a73 	.word	0x08003a73
 80038b4:	08003a73 	.word	0x08003a73
 80038b8:	0800396f 	.word	0x0800396f
 80038bc:	08003a73 	.word	0x08003a73
 80038c0:	08003a73 	.word	0x08003a73
 80038c4:	08003a73 	.word	0x08003a73
 80038c8:	080039af 	.word	0x080039af
 80038cc:	08003a73 	.word	0x08003a73
 80038d0:	08003a73 	.word	0x08003a73
 80038d4:	08003a73 	.word	0x08003a73
 80038d8:	080039f1 	.word	0x080039f1
 80038dc:	08003a73 	.word	0x08003a73
 80038e0:	08003a73 	.word	0x08003a73
 80038e4:	08003a73 	.word	0x08003a73
 80038e8:	08003a31 	.word	0x08003a31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fa80 	bl	8003df8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0208 	orr.w	r2, r2, #8
 8003906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0204 	bic.w	r2, r2, #4
 8003916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6999      	ldr	r1, [r3, #24]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	619a      	str	r2, [r3, #24]
      break;
 800392a:	e0a3      	b.n	8003a74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	4618      	mov	r0, r3
 8003934:	f000 faf0 	bl	8003f18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6999      	ldr	r1, [r3, #24]
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	021a      	lsls	r2, r3, #8
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	619a      	str	r2, [r3, #24]
      break;
 800396c:	e082      	b.n	8003a74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	4618      	mov	r0, r3
 8003976:	f000 fb59 	bl	800402c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69da      	ldr	r2, [r3, #28]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0208 	orr.w	r2, r2, #8
 8003988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69da      	ldr	r2, [r3, #28]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0204 	bic.w	r2, r2, #4
 8003998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69d9      	ldr	r1, [r3, #28]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	61da      	str	r2, [r3, #28]
      break;
 80039ac:	e062      	b.n	8003a74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fbc1 	bl	800413c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69da      	ldr	r2, [r3, #28]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69da      	ldr	r2, [r3, #28]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69d9      	ldr	r1, [r3, #28]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	021a      	lsls	r2, r3, #8
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	61da      	str	r2, [r3, #28]
      break;
 80039ee:	e041      	b.n	8003a74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fc2a 	bl	8004250 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0208 	orr.w	r2, r2, #8
 8003a0a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0204 	bic.w	r2, r2, #4
 8003a1a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003a2e:	e021      	b.n	8003a74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fc6e 	bl	8004318 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a4a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	021a      	lsls	r2, r3, #8
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003a70:	e000      	b.n	8003a74 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003a72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop

08003a88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_TIM_ConfigClockSource+0x18>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e0dd      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x1d4>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003abe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ac2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a62      	ldr	r2, [pc, #392]	; (8003c64 <HAL_TIM_ConfigClockSource+0x1dc>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	f000 80a9 	beq.w	8003c32 <HAL_TIM_ConfigClockSource+0x1aa>
 8003ae0:	4a60      	ldr	r2, [pc, #384]	; (8003c64 <HAL_TIM_ConfigClockSource+0x1dc>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	f200 80ae 	bhi.w	8003c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8003ae8:	4a5f      	ldr	r2, [pc, #380]	; (8003c68 <HAL_TIM_ConfigClockSource+0x1e0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	f000 80a1 	beq.w	8003c32 <HAL_TIM_ConfigClockSource+0x1aa>
 8003af0:	4a5d      	ldr	r2, [pc, #372]	; (8003c68 <HAL_TIM_ConfigClockSource+0x1e0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	f200 80a6 	bhi.w	8003c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8003af8:	4a5c      	ldr	r2, [pc, #368]	; (8003c6c <HAL_TIM_ConfigClockSource+0x1e4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	f000 8099 	beq.w	8003c32 <HAL_TIM_ConfigClockSource+0x1aa>
 8003b00:	4a5a      	ldr	r2, [pc, #360]	; (8003c6c <HAL_TIM_ConfigClockSource+0x1e4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	f200 809e 	bhi.w	8003c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8003b08:	4a59      	ldr	r2, [pc, #356]	; (8003c70 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	f000 8091 	beq.w	8003c32 <HAL_TIM_ConfigClockSource+0x1aa>
 8003b10:	4a57      	ldr	r2, [pc, #348]	; (8003c70 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	f200 8096 	bhi.w	8003c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8003b18:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003b1c:	f000 8089 	beq.w	8003c32 <HAL_TIM_ConfigClockSource+0x1aa>
 8003b20:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003b24:	f200 808e 	bhi.w	8003c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8003b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b2c:	d03e      	beq.n	8003bac <HAL_TIM_ConfigClockSource+0x124>
 8003b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b32:	f200 8087 	bhi.w	8003c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8003b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b3a:	f000 8085 	beq.w	8003c48 <HAL_TIM_ConfigClockSource+0x1c0>
 8003b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b42:	d87f      	bhi.n	8003c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8003b44:	2b70      	cmp	r3, #112	; 0x70
 8003b46:	d01a      	beq.n	8003b7e <HAL_TIM_ConfigClockSource+0xf6>
 8003b48:	2b70      	cmp	r3, #112	; 0x70
 8003b4a:	d87b      	bhi.n	8003c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8003b4c:	2b60      	cmp	r3, #96	; 0x60
 8003b4e:	d050      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x16a>
 8003b50:	2b60      	cmp	r3, #96	; 0x60
 8003b52:	d877      	bhi.n	8003c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8003b54:	2b50      	cmp	r3, #80	; 0x50
 8003b56:	d03c      	beq.n	8003bd2 <HAL_TIM_ConfigClockSource+0x14a>
 8003b58:	2b50      	cmp	r3, #80	; 0x50
 8003b5a:	d873      	bhi.n	8003c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8003b5c:	2b40      	cmp	r3, #64	; 0x40
 8003b5e:	d058      	beq.n	8003c12 <HAL_TIM_ConfigClockSource+0x18a>
 8003b60:	2b40      	cmp	r3, #64	; 0x40
 8003b62:	d86f      	bhi.n	8003c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8003b64:	2b30      	cmp	r3, #48	; 0x30
 8003b66:	d064      	beq.n	8003c32 <HAL_TIM_ConfigClockSource+0x1aa>
 8003b68:	2b30      	cmp	r3, #48	; 0x30
 8003b6a:	d86b      	bhi.n	8003c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	d060      	beq.n	8003c32 <HAL_TIM_ConfigClockSource+0x1aa>
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	d867      	bhi.n	8003c44 <HAL_TIM_ConfigClockSource+0x1bc>
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d05c      	beq.n	8003c32 <HAL_TIM_ConfigClockSource+0x1aa>
 8003b78:	2b10      	cmp	r3, #16
 8003b7a:	d05a      	beq.n	8003c32 <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b7c:	e062      	b.n	8003c44 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6899      	ldr	r1, [r3, #8]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f000 fca5 	bl	80044dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ba0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	609a      	str	r2, [r3, #8]
      break;
 8003baa:	e04e      	b.n	8003c4a <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	6899      	ldr	r1, [r3, #8]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f000 fc8e 	bl	80044dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bce:	609a      	str	r2, [r3, #8]
      break;
 8003bd0:	e03b      	b.n	8003c4a <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	6859      	ldr	r1, [r3, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	461a      	mov	r2, r3
 8003be0:	f000 fc00 	bl	80043e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2150      	movs	r1, #80	; 0x50
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 fc59 	bl	80044a2 <TIM_ITRx_SetConfig>
      break;
 8003bf0:	e02b      	b.n	8003c4a <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6818      	ldr	r0, [r3, #0]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	6859      	ldr	r1, [r3, #4]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	f000 fc1f 	bl	8004442 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2160      	movs	r1, #96	; 0x60
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fc49 	bl	80044a2 <TIM_ITRx_SetConfig>
      break;
 8003c10:	e01b      	b.n	8003c4a <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	6859      	ldr	r1, [r3, #4]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f000 fbe0 	bl	80043e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2140      	movs	r1, #64	; 0x40
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fc39 	bl	80044a2 <TIM_ITRx_SetConfig>
      break;
 8003c30:	e00b      	b.n	8003c4a <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	f000 fc30 	bl	80044a2 <TIM_ITRx_SetConfig>
        break;
 8003c42:	e002      	b.n	8003c4a <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8003c44:	bf00      	nop
 8003c46:	e000      	b.n	8003c4a <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8003c48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	00100070 	.word	0x00100070
 8003c68:	00100040 	.word	0x00100040
 8003c6c:	00100030 	.word	0x00100030
 8003c70:	00100020 	.word	0x00100020

08003c74 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a3c      	ldr	r2, [pc, #240]	; (8003ddc <TIM_Base_SetConfig+0x104>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00f      	beq.n	8003d10 <TIM_Base_SetConfig+0x38>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf6:	d00b      	beq.n	8003d10 <TIM_Base_SetConfig+0x38>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a39      	ldr	r2, [pc, #228]	; (8003de0 <TIM_Base_SetConfig+0x108>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d007      	beq.n	8003d10 <TIM_Base_SetConfig+0x38>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a38      	ldr	r2, [pc, #224]	; (8003de4 <TIM_Base_SetConfig+0x10c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d003      	beq.n	8003d10 <TIM_Base_SetConfig+0x38>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a37      	ldr	r2, [pc, #220]	; (8003de8 <TIM_Base_SetConfig+0x110>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d108      	bne.n	8003d22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a2d      	ldr	r2, [pc, #180]	; (8003ddc <TIM_Base_SetConfig+0x104>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d01b      	beq.n	8003d62 <TIM_Base_SetConfig+0x8a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d30:	d017      	beq.n	8003d62 <TIM_Base_SetConfig+0x8a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a2a      	ldr	r2, [pc, #168]	; (8003de0 <TIM_Base_SetConfig+0x108>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d013      	beq.n	8003d62 <TIM_Base_SetConfig+0x8a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a29      	ldr	r2, [pc, #164]	; (8003de4 <TIM_Base_SetConfig+0x10c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00f      	beq.n	8003d62 <TIM_Base_SetConfig+0x8a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a28      	ldr	r2, [pc, #160]	; (8003de8 <TIM_Base_SetConfig+0x110>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d00b      	beq.n	8003d62 <TIM_Base_SetConfig+0x8a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a27      	ldr	r2, [pc, #156]	; (8003dec <TIM_Base_SetConfig+0x114>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d007      	beq.n	8003d62 <TIM_Base_SetConfig+0x8a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a26      	ldr	r2, [pc, #152]	; (8003df0 <TIM_Base_SetConfig+0x118>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d003      	beq.n	8003d62 <TIM_Base_SetConfig+0x8a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a25      	ldr	r2, [pc, #148]	; (8003df4 <TIM_Base_SetConfig+0x11c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d108      	bne.n	8003d74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a10      	ldr	r2, [pc, #64]	; (8003ddc <TIM_Base_SetConfig+0x104>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00f      	beq.n	8003dc0 <TIM_Base_SetConfig+0xe8>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a11      	ldr	r2, [pc, #68]	; (8003de8 <TIM_Base_SetConfig+0x110>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00b      	beq.n	8003dc0 <TIM_Base_SetConfig+0xe8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a10      	ldr	r2, [pc, #64]	; (8003dec <TIM_Base_SetConfig+0x114>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d007      	beq.n	8003dc0 <TIM_Base_SetConfig+0xe8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a0f      	ldr	r2, [pc, #60]	; (8003df0 <TIM_Base_SetConfig+0x118>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d003      	beq.n	8003dc0 <TIM_Base_SetConfig+0xe8>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a0e      	ldr	r2, [pc, #56]	; (8003df4 <TIM_Base_SetConfig+0x11c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d103      	bne.n	8003dc8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	615a      	str	r2, [r3, #20]
}
 8003dce:	bf00      	nop
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40012c00 	.word	0x40012c00
 8003de0:	40000400 	.word	0x40000400
 8003de4:	40000800 	.word	0x40000800
 8003de8:	40013400 	.word	0x40013400
 8003dec:	40014000 	.word	0x40014000
 8003df0:	40014400 	.word	0x40014400
 8003df4:	40014800 	.word	0x40014800

08003df8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	f023 0201 	bic.w	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0303 	bic.w	r3, r3, #3
 8003e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f023 0302 	bic.w	r3, r3, #2
 8003e44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a2c      	ldr	r2, [pc, #176]	; (8003f04 <TIM_OC1_SetConfig+0x10c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d00f      	beq.n	8003e78 <TIM_OC1_SetConfig+0x80>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a2b      	ldr	r2, [pc, #172]	; (8003f08 <TIM_OC1_SetConfig+0x110>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00b      	beq.n	8003e78 <TIM_OC1_SetConfig+0x80>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a2a      	ldr	r2, [pc, #168]	; (8003f0c <TIM_OC1_SetConfig+0x114>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d007      	beq.n	8003e78 <TIM_OC1_SetConfig+0x80>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a29      	ldr	r2, [pc, #164]	; (8003f10 <TIM_OC1_SetConfig+0x118>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d003      	beq.n	8003e78 <TIM_OC1_SetConfig+0x80>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a28      	ldr	r2, [pc, #160]	; (8003f14 <TIM_OC1_SetConfig+0x11c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d10c      	bne.n	8003e92 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f023 0308 	bic.w	r3, r3, #8
 8003e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f023 0304 	bic.w	r3, r3, #4
 8003e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a1b      	ldr	r2, [pc, #108]	; (8003f04 <TIM_OC1_SetConfig+0x10c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00f      	beq.n	8003eba <TIM_OC1_SetConfig+0xc2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a1a      	ldr	r2, [pc, #104]	; (8003f08 <TIM_OC1_SetConfig+0x110>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00b      	beq.n	8003eba <TIM_OC1_SetConfig+0xc2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <TIM_OC1_SetConfig+0x114>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d007      	beq.n	8003eba <TIM_OC1_SetConfig+0xc2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <TIM_OC1_SetConfig+0x118>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d003      	beq.n	8003eba <TIM_OC1_SetConfig+0xc2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a17      	ldr	r2, [pc, #92]	; (8003f14 <TIM_OC1_SetConfig+0x11c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d111      	bne.n	8003ede <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	621a      	str	r2, [r3, #32]
}
 8003ef8:	bf00      	nop
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	40012c00 	.word	0x40012c00
 8003f08:	40013400 	.word	0x40013400
 8003f0c:	40014000 	.word	0x40014000
 8003f10:	40014400 	.word	0x40014400
 8003f14:	40014800 	.word	0x40014800

08003f18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	f023 0210 	bic.w	r2, r3, #16
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f023 0320 	bic.w	r3, r3, #32
 8003f66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a28      	ldr	r2, [pc, #160]	; (8004018 <TIM_OC2_SetConfig+0x100>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d003      	beq.n	8003f84 <TIM_OC2_SetConfig+0x6c>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a27      	ldr	r2, [pc, #156]	; (800401c <TIM_OC2_SetConfig+0x104>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d10d      	bne.n	8003fa0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a1d      	ldr	r2, [pc, #116]	; (8004018 <TIM_OC2_SetConfig+0x100>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d00f      	beq.n	8003fc8 <TIM_OC2_SetConfig+0xb0>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a1c      	ldr	r2, [pc, #112]	; (800401c <TIM_OC2_SetConfig+0x104>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00b      	beq.n	8003fc8 <TIM_OC2_SetConfig+0xb0>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a1b      	ldr	r2, [pc, #108]	; (8004020 <TIM_OC2_SetConfig+0x108>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d007      	beq.n	8003fc8 <TIM_OC2_SetConfig+0xb0>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a1a      	ldr	r2, [pc, #104]	; (8004024 <TIM_OC2_SetConfig+0x10c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d003      	beq.n	8003fc8 <TIM_OC2_SetConfig+0xb0>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a19      	ldr	r2, [pc, #100]	; (8004028 <TIM_OC2_SetConfig+0x110>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d113      	bne.n	8003ff0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	621a      	str	r2, [r3, #32]
}
 800400a:	bf00      	nop
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40012c00 	.word	0x40012c00
 800401c:	40013400 	.word	0x40013400
 8004020:	40014000 	.word	0x40014000
 8004024:	40014400 	.word	0x40014400
 8004028:	40014800 	.word	0x40014800

0800402c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0303 	bic.w	r3, r3, #3
 8004066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	021b      	lsls	r3, r3, #8
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a27      	ldr	r2, [pc, #156]	; (8004128 <TIM_OC3_SetConfig+0xfc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d003      	beq.n	8004096 <TIM_OC3_SetConfig+0x6a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a26      	ldr	r2, [pc, #152]	; (800412c <TIM_OC3_SetConfig+0x100>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d10d      	bne.n	80040b2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800409c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	021b      	lsls	r3, r3, #8
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a1c      	ldr	r2, [pc, #112]	; (8004128 <TIM_OC3_SetConfig+0xfc>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00f      	beq.n	80040da <TIM_OC3_SetConfig+0xae>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a1b      	ldr	r2, [pc, #108]	; (800412c <TIM_OC3_SetConfig+0x100>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d00b      	beq.n	80040da <TIM_OC3_SetConfig+0xae>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a1a      	ldr	r2, [pc, #104]	; (8004130 <TIM_OC3_SetConfig+0x104>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d007      	beq.n	80040da <TIM_OC3_SetConfig+0xae>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a19      	ldr	r2, [pc, #100]	; (8004134 <TIM_OC3_SetConfig+0x108>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d003      	beq.n	80040da <TIM_OC3_SetConfig+0xae>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a18      	ldr	r2, [pc, #96]	; (8004138 <TIM_OC3_SetConfig+0x10c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d113      	bne.n	8004102 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	621a      	str	r2, [r3, #32]
}
 800411c:	bf00      	nop
 800411e:	371c      	adds	r7, #28
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	40012c00 	.word	0x40012c00
 800412c:	40013400 	.word	0x40013400
 8004130:	40014000 	.word	0x40014000
 8004134:	40014400 	.word	0x40014400
 8004138:	40014800 	.word	0x40014800

0800413c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800416a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800416e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800418a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	031b      	lsls	r3, r3, #12
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a28      	ldr	r2, [pc, #160]	; (800423c <TIM_OC4_SetConfig+0x100>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d003      	beq.n	80041a8 <TIM_OC4_SetConfig+0x6c>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a27      	ldr	r2, [pc, #156]	; (8004240 <TIM_OC4_SetConfig+0x104>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d10d      	bne.n	80041c4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80041ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	031b      	lsls	r3, r3, #12
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a1d      	ldr	r2, [pc, #116]	; (800423c <TIM_OC4_SetConfig+0x100>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00f      	beq.n	80041ec <TIM_OC4_SetConfig+0xb0>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a1c      	ldr	r2, [pc, #112]	; (8004240 <TIM_OC4_SetConfig+0x104>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00b      	beq.n	80041ec <TIM_OC4_SetConfig+0xb0>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a1b      	ldr	r2, [pc, #108]	; (8004244 <TIM_OC4_SetConfig+0x108>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d007      	beq.n	80041ec <TIM_OC4_SetConfig+0xb0>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a1a      	ldr	r2, [pc, #104]	; (8004248 <TIM_OC4_SetConfig+0x10c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d003      	beq.n	80041ec <TIM_OC4_SetConfig+0xb0>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a19      	ldr	r2, [pc, #100]	; (800424c <TIM_OC4_SetConfig+0x110>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d113      	bne.n	8004214 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041f2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80041fa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	019b      	lsls	r3, r3, #6
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	019b      	lsls	r3, r3, #6
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	621a      	str	r2, [r3, #32]
}
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40012c00 	.word	0x40012c00
 8004240:	40013400 	.word	0x40013400
 8004244:	40014000 	.word	0x40014000
 8004248:	40014400 	.word	0x40014400
 800424c:	40014800 	.word	0x40014800

08004250 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004294:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	041b      	lsls	r3, r3, #16
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a17      	ldr	r2, [pc, #92]	; (8004304 <TIM_OC5_SetConfig+0xb4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00f      	beq.n	80042ca <TIM_OC5_SetConfig+0x7a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a16      	ldr	r2, [pc, #88]	; (8004308 <TIM_OC5_SetConfig+0xb8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00b      	beq.n	80042ca <TIM_OC5_SetConfig+0x7a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a15      	ldr	r2, [pc, #84]	; (800430c <TIM_OC5_SetConfig+0xbc>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d007      	beq.n	80042ca <TIM_OC5_SetConfig+0x7a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a14      	ldr	r2, [pc, #80]	; (8004310 <TIM_OC5_SetConfig+0xc0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d003      	beq.n	80042ca <TIM_OC5_SetConfig+0x7a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a13      	ldr	r2, [pc, #76]	; (8004314 <TIM_OC5_SetConfig+0xc4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d109      	bne.n	80042de <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	021b      	lsls	r3, r3, #8
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	4313      	orrs	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	621a      	str	r2, [r3, #32]
}
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40012c00 	.word	0x40012c00
 8004308:	40013400 	.word	0x40013400
 800430c:	40014000 	.word	0x40014000
 8004310:	40014400 	.word	0x40014400
 8004314:	40014800 	.word	0x40014800

08004318 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800433e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	021b      	lsls	r3, r3, #8
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4313      	orrs	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800435e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	051b      	lsls	r3, r3, #20
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a18      	ldr	r2, [pc, #96]	; (80043d0 <TIM_OC6_SetConfig+0xb8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00f      	beq.n	8004394 <TIM_OC6_SetConfig+0x7c>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a17      	ldr	r2, [pc, #92]	; (80043d4 <TIM_OC6_SetConfig+0xbc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00b      	beq.n	8004394 <TIM_OC6_SetConfig+0x7c>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a16      	ldr	r2, [pc, #88]	; (80043d8 <TIM_OC6_SetConfig+0xc0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d007      	beq.n	8004394 <TIM_OC6_SetConfig+0x7c>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a15      	ldr	r2, [pc, #84]	; (80043dc <TIM_OC6_SetConfig+0xc4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d003      	beq.n	8004394 <TIM_OC6_SetConfig+0x7c>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a14      	ldr	r2, [pc, #80]	; (80043e0 <TIM_OC6_SetConfig+0xc8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d109      	bne.n	80043a8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800439a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	029b      	lsls	r3, r3, #10
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	621a      	str	r2, [r3, #32]
}
 80043c2:	bf00      	nop
 80043c4:	371c      	adds	r7, #28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40012c00 	.word	0x40012c00
 80043d4:	40013400 	.word	0x40013400
 80043d8:	40014000 	.word	0x40014000
 80043dc:	40014400 	.word	0x40014400
 80043e0:	40014800 	.word	0x40014800

080043e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	f023 0201 	bic.w	r2, r3, #1
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800440e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f023 030a 	bic.w	r3, r3, #10
 8004420:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4313      	orrs	r3, r2
 8004428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	621a      	str	r2, [r3, #32]
}
 8004436:	bf00      	nop
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004442:	b480      	push	{r7}
 8004444:	b087      	sub	sp, #28
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	f023 0210 	bic.w	r2, r3, #16
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800446c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	031b      	lsls	r3, r3, #12
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800447e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	621a      	str	r2, [r3, #32]
}
 8004496:	bf00      	nop
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b085      	sub	sp, #20
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
 80044aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80044b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f043 0307 	orr.w	r3, r3, #7
 80044c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	609a      	str	r2, [r3, #8]
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	021a      	lsls	r2, r3, #8
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	431a      	orrs	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4313      	orrs	r3, r2
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	609a      	str	r2, [r3, #8]
}
 8004510:	bf00      	nop
 8004512:	371c      	adds	r7, #28
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f003 031f 	and.w	r3, r3, #31
 800452e:	2201      	movs	r2, #1
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a1a      	ldr	r2, [r3, #32]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	43db      	mvns	r3, r3
 800453e:	401a      	ands	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a1a      	ldr	r2, [r3, #32]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f003 031f 	and.w	r3, r3, #31
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	fa01 f303 	lsl.w	r3, r1, r3
 8004554:	431a      	orrs	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	621a      	str	r2, [r3, #32]
}
 800455a:	bf00      	nop
 800455c:	371c      	adds	r7, #28
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
	...

08004568 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d109      	bne.n	800458c <HAL_TIMEx_PWMN_Start+0x24>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b01      	cmp	r3, #1
 8004582:	bf14      	ite	ne
 8004584:	2301      	movne	r3, #1
 8004586:	2300      	moveq	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	e022      	b.n	80045d2 <HAL_TIMEx_PWMN_Start+0x6a>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2b04      	cmp	r3, #4
 8004590:	d109      	bne.n	80045a6 <HAL_TIMEx_PWMN_Start+0x3e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b01      	cmp	r3, #1
 800459c:	bf14      	ite	ne
 800459e:	2301      	movne	r3, #1
 80045a0:	2300      	moveq	r3, #0
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	e015      	b.n	80045d2 <HAL_TIMEx_PWMN_Start+0x6a>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d109      	bne.n	80045c0 <HAL_TIMEx_PWMN_Start+0x58>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	bf14      	ite	ne
 80045b8:	2301      	movne	r3, #1
 80045ba:	2300      	moveq	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	e008      	b.n	80045d2 <HAL_TIMEx_PWMN_Start+0x6a>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	bf14      	ite	ne
 80045cc:	2301      	movne	r3, #1
 80045ce:	2300      	moveq	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e069      	b.n	80046ae <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d104      	bne.n	80045ea <HAL_TIMEx_PWMN_Start+0x82>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e8:	e013      	b.n	8004612 <HAL_TIMEx_PWMN_Start+0xaa>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	d104      	bne.n	80045fa <HAL_TIMEx_PWMN_Start+0x92>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045f8:	e00b      	b.n	8004612 <HAL_TIMEx_PWMN_Start+0xaa>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d104      	bne.n	800460a <HAL_TIMEx_PWMN_Start+0xa2>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004608:	e003      	b.n	8004612 <HAL_TIMEx_PWMN_Start+0xaa>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2204      	movs	r2, #4
 8004618:	6839      	ldr	r1, [r7, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f9c0 	bl	80049a0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800462e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a20      	ldr	r2, [pc, #128]	; (80046b8 <HAL_TIMEx_PWMN_Start+0x150>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d018      	beq.n	800466c <HAL_TIMEx_PWMN_Start+0x104>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004642:	d013      	beq.n	800466c <HAL_TIMEx_PWMN_Start+0x104>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1c      	ldr	r2, [pc, #112]	; (80046bc <HAL_TIMEx_PWMN_Start+0x154>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00e      	beq.n	800466c <HAL_TIMEx_PWMN_Start+0x104>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a1b      	ldr	r2, [pc, #108]	; (80046c0 <HAL_TIMEx_PWMN_Start+0x158>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d009      	beq.n	800466c <HAL_TIMEx_PWMN_Start+0x104>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a19      	ldr	r2, [pc, #100]	; (80046c4 <HAL_TIMEx_PWMN_Start+0x15c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d004      	beq.n	800466c <HAL_TIMEx_PWMN_Start+0x104>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a18      	ldr	r2, [pc, #96]	; (80046c8 <HAL_TIMEx_PWMN_Start+0x160>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d115      	bne.n	8004698 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	4b16      	ldr	r3, [pc, #88]	; (80046cc <HAL_TIMEx_PWMN_Start+0x164>)
 8004674:	4013      	ands	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b06      	cmp	r3, #6
 800467c:	d015      	beq.n	80046aa <HAL_TIMEx_PWMN_Start+0x142>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004684:	d011      	beq.n	80046aa <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0201 	orr.w	r2, r2, #1
 8004694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004696:	e008      	b.n	80046aa <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0201 	orr.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	e000      	b.n	80046ac <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40000400 	.word	0x40000400
 80046c0:	40000800 	.word	0x40000800
 80046c4:	40013400 	.word	0x40013400
 80046c8:	40014000 	.word	0x40014000
 80046cc:	00010007 	.word	0x00010007

080046d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e065      	b.n	80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a2c      	ldr	r2, [pc, #176]	; (80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d004      	beq.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2b      	ldr	r2, [pc, #172]	; (80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d108      	bne.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004722:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004738:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1b      	ldr	r2, [pc, #108]	; (80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d018      	beq.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475e:	d013      	beq.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a18      	ldr	r2, [pc, #96]	; (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00e      	beq.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a17      	ldr	r2, [pc, #92]	; (80047cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d009      	beq.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a12      	ldr	r2, [pc, #72]	; (80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d10c      	bne.n	80047a2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800478e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	4313      	orrs	r3, r2
 8004798:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	40012c00 	.word	0x40012c00
 80047c4:	40013400 	.word	0x40013400
 80047c8:	40000400 	.word	0x40000400
 80047cc:	40000800 	.word	0x40000800
 80047d0:	40014000 	.word	0x40014000

080047d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e087      	b.n	8004900 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	4313      	orrs	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	041b      	lsls	r3, r3, #16
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a27      	ldr	r2, [pc, #156]	; (800490c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d004      	beq.n	800487e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a25      	ldr	r2, [pc, #148]	; (8004910 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d106      	bne.n	800488c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	4313      	orrs	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a1e      	ldr	r2, [pc, #120]	; (800490c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d004      	beq.n	80048a0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a1d      	ldr	r2, [pc, #116]	; (8004910 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d126      	bne.n	80048ee <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	051b      	lsls	r3, r3, #20
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a0e      	ldr	r2, [pc, #56]	; (800490c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d004      	beq.n	80048e0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a0d      	ldr	r2, [pc, #52]	; (8004910 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d106      	bne.n	80048ee <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	40012c00 	.word	0x40012c00
 8004910:	40013400 	.word	0x40013400

08004914 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f003 031f 	and.w	r3, r3, #31
 80049b2:	2204      	movs	r2, #4
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a1a      	ldr	r2, [r3, #32]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	43db      	mvns	r3, r3
 80049c2:	401a      	ands	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a1a      	ldr	r2, [r3, #32]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f003 031f 	and.w	r3, r3, #31
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	fa01 f303 	lsl.w	r3, r1, r3
 80049d8:	431a      	orrs	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	621a      	str	r2, [r3, #32]
}
 80049de:	bf00      	nop
 80049e0:	371c      	adds	r7, #28
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b082      	sub	sp, #8
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e042      	b.n	8004a82 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fc fdcc 	bl	80015ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2224      	movs	r2, #36	; 0x24
 8004a18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0201 	bic.w	r2, r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fb5d 	bl	80050ec <UART_SetConfig>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e022      	b.n	8004a82 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 fdef 	bl	8005628 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0201 	orr.w	r2, r2, #1
 8004a78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fe76 	bl	800576c <UART_CheckIdleState>
 8004a80:	4603      	mov	r3, r0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b08a      	sub	sp, #40	; 0x28
 8004a8e:	af02      	add	r7, sp, #8
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	603b      	str	r3, [r7, #0]
 8004a96:	4613      	mov	r3, r2
 8004a98:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	f040 8083 	bne.w	8004bac <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <HAL_UART_Transmit+0x28>
 8004aac:	88fb      	ldrh	r3, [r7, #6]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e07b      	b.n	8004bae <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <HAL_UART_Transmit+0x3a>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e074      	b.n	8004bae <HAL_UART_Transmit+0x124>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2221      	movs	r2, #33	; 0x21
 8004ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004adc:	f7fc fe3e 	bl	800175c <HAL_GetTick>
 8004ae0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	88fa      	ldrh	r2, [r7, #6]
 8004ae6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	88fa      	ldrh	r2, [r7, #6]
 8004aee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afa:	d108      	bne.n	8004b0e <HAL_UART_Transmit+0x84>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d104      	bne.n	8004b0e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004b04:	2300      	movs	r3, #0
 8004b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	61bb      	str	r3, [r7, #24]
 8004b0c:	e003      	b.n	8004b16 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004b1e:	e02c      	b.n	8004b7a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	2200      	movs	r2, #0
 8004b28:	2180      	movs	r1, #128	; 0x80
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 fe69 	bl	8005802 <UART_WaitOnFlagUntilTimeout>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e039      	b.n	8004bae <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10b      	bne.n	8004b58 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	461a      	mov	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	3302      	adds	r3, #2
 8004b54:	61bb      	str	r3, [r7, #24]
 8004b56:	e007      	b.n	8004b68 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	781a      	ldrb	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	3301      	adds	r3, #1
 8004b66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1cc      	bne.n	8004b20 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	2140      	movs	r1, #64	; 0x40
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 fe36 	bl	8005802 <UART_WaitOnFlagUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e006      	b.n	8004bae <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	e000      	b.n	8004bae <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004bac:	2302      	movs	r3, #2
  }
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
	...

08004bb8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bcc:	2b20      	cmp	r3, #32
 8004bce:	d131      	bne.n	8004c34 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <HAL_UART_Receive_IT+0x24>
 8004bd6:	88fb      	ldrh	r3, [r7, #6]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e02a      	b.n	8004c36 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_UART_Receive_IT+0x36>
 8004bea:	2302      	movs	r3, #2
 8004bec:	e023      	b.n	8004c36 <HAL_UART_Receive_IT+0x7e>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a0f      	ldr	r2, [pc, #60]	; (8004c40 <HAL_UART_Receive_IT+0x88>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00e      	beq.n	8004c24 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d007      	beq.n	8004c24 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004c22:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c24:	88fb      	ldrh	r3, [r7, #6]
 8004c26:	461a      	mov	r2, r3
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 fe6a 	bl	8005904 <UART_Start_Receive_IT>
 8004c30:	4603      	mov	r3, r0
 8004c32:	e000      	b.n	8004c36 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004c34:	2302      	movs	r3, #2
  }
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	40008000 	.word	0x40008000

08004c44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	f640 030f 	movw	r3, #2063	; 0x80f
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d118      	bne.n	8004ca6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d013      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	f003 0320 	and.w	r3, r3, #32
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d104      	bne.n	8004c92 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d009      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 81fb 	beq.w	8005092 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	4798      	blx	r3
      }
      return;
 8004ca4:	e1f5      	b.n	8005092 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 80ef 	beq.w	8004e8c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	4b73      	ldr	r3, [pc, #460]	; (8004e80 <HAL_UART_IRQHandler+0x23c>)
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d105      	bne.n	8004cc4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	4b72      	ldr	r3, [pc, #456]	; (8004e84 <HAL_UART_IRQHandler+0x240>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 80e4 	beq.w	8004e8c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d010      	beq.n	8004cf0 <HAL_UART_IRQHandler+0xac>
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00b      	beq.n	8004cf0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ce6:	f043 0201 	orr.w	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d010      	beq.n	8004d1c <HAL_UART_IRQHandler+0xd8>
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00b      	beq.n	8004d1c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d12:	f043 0204 	orr.w	r2, r3, #4
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	f003 0304 	and.w	r3, r3, #4
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d010      	beq.n	8004d48 <HAL_UART_IRQHandler+0x104>
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00b      	beq.n	8004d48 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2204      	movs	r2, #4
 8004d36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d3e:	f043 0202 	orr.w	r2, r3, #2
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d015      	beq.n	8004d7e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d104      	bne.n	8004d66 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	4b48      	ldr	r3, [pc, #288]	; (8004e80 <HAL_UART_IRQHandler+0x23c>)
 8004d60:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00b      	beq.n	8004d7e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2208      	movs	r2, #8
 8004d6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d74:	f043 0208 	orr.w	r2, r3, #8
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d011      	beq.n	8004dac <HAL_UART_IRQHandler+0x168>
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00c      	beq.n	8004dac <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004da2:	f043 0220 	orr.w	r2, r3, #32
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 816f 	beq.w	8005096 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d011      	beq.n	8004de6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d104      	bne.n	8004dd6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d007      	beq.n	8004de6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dec:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df8:	2b40      	cmp	r3, #64	; 0x40
 8004dfa:	d004      	beq.n	8004e06 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d031      	beq.n	8004e6a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fe3a 	bl	8005a80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e16:	2b40      	cmp	r3, #64	; 0x40
 8004e18:	d123      	bne.n	8004e62 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e28:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d013      	beq.n	8004e5a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e36:	4a14      	ldr	r2, [pc, #80]	; (8004e88 <HAL_UART_IRQHandler+0x244>)
 8004e38:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fc fe22 	bl	8001a88 <HAL_DMA_Abort_IT>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d017      	beq.n	8004e7a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004e54:	4610      	mov	r0, r2
 8004e56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e58:	e00f      	b.n	8004e7a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f930 	bl	80050c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e60:	e00b      	b.n	8004e7a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f92c 	bl	80050c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e68:	e007      	b.n	8004e7a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f928 	bl	80050c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004e78:	e10d      	b.n	8005096 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e7a:	bf00      	nop
    return;
 8004e7c:	e10b      	b.n	8005096 <HAL_UART_IRQHandler+0x452>
 8004e7e:	bf00      	nop
 8004e80:	10000001 	.word	0x10000001
 8004e84:	04000120 	.word	0x04000120
 8004e88:	08005ae5 	.word	0x08005ae5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	f040 80ab 	bne.w	8004fec <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	f003 0310 	and.w	r3, r3, #16
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 80a5 	beq.w	8004fec <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	f003 0310 	and.w	r3, r3, #16
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 809f 	beq.w	8004fec <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2210      	movs	r2, #16
 8004eb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec0:	2b40      	cmp	r3, #64	; 0x40
 8004ec2:	d155      	bne.n	8004f70 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8004ece:	893b      	ldrh	r3, [r7, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 80e2 	beq.w	800509a <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004edc:	893a      	ldrh	r2, [r7, #8]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	f080 80db 	bcs.w	800509a <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	893a      	ldrh	r2, [r7, #8]
 8004ee8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0320 	and.w	r3, r3, #32
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d12b      	bne.n	8004f54 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f0a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0201 	bic.w	r2, r2, #1
 8004f1a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f2a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0210 	bic.w	r2, r2, #16
 8004f48:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fc fd41 	bl	80019d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	4619      	mov	r1, r3
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f8b3 	bl	80050d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f6e:	e094      	b.n	800509a <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 8087 	beq.w	800509e <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8004f90:	897b      	ldrh	r3, [r7, #10]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 8083 	beq.w	800509e <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fa6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6812      	ldr	r2, [r2, #0]
 8004fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fb6:	f023 0301 	bic.w	r3, r3, #1
 8004fba:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0210 	bic.w	r2, r2, #16
 8004fde:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fe0:	897b      	ldrh	r3, [r7, #10]
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f875 	bl	80050d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004fea:	e058      	b.n	800509e <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00d      	beq.n	8005012 <HAL_UART_IRQHandler+0x3ce>
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d008      	beq.n	8005012 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005008:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f001 f876 	bl	80060fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005010:	e048      	b.n	80050a4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005018:	2b00      	cmp	r3, #0
 800501a:	d012      	beq.n	8005042 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005022:	2b00      	cmp	r3, #0
 8005024:	d104      	bne.n	8005030 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005034:	2b00      	cmp	r3, #0
 8005036:	d034      	beq.n	80050a2 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	4798      	blx	r3
    }
    return;
 8005040:	e02f      	b.n	80050a2 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <HAL_UART_IRQHandler+0x41a>
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fd5a 	bl	8005b10 <UART_EndTransmit_IT>
    return;
 800505c:	e022      	b.n	80050a4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d008      	beq.n	800507a <HAL_UART_IRQHandler+0x436>
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f001 f856 	bl	8006124 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005078:	e014      	b.n	80050a4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00f      	beq.n	80050a4 <HAL_UART_IRQHandler+0x460>
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	2b00      	cmp	r3, #0
 8005088:	da0c      	bge.n	80050a4 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f001 f840 	bl	8006110 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005090:	e008      	b.n	80050a4 <HAL_UART_IRQHandler+0x460>
      return;
 8005092:	bf00      	nop
 8005094:	e006      	b.n	80050a4 <HAL_UART_IRQHandler+0x460>
    return;
 8005096:	bf00      	nop
 8005098:	e004      	b.n	80050a4 <HAL_UART_IRQHandler+0x460>
      return;
 800509a:	bf00      	nop
 800509c:	e002      	b.n	80050a4 <HAL_UART_IRQHandler+0x460>
      return;
 800509e:	bf00      	nop
 80050a0:	e000      	b.n	80050a4 <HAL_UART_IRQHandler+0x460>
    return;
 80050a2:	bf00      	nop
  }
}
 80050a4:	3720      	adds	r7, #32
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop

080050ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050ec:	b5b0      	push	{r4, r5, r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	431a      	orrs	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	4313      	orrs	r3, r2
 800510e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	4baf      	ldr	r3, [pc, #700]	; (80053d4 <UART_SetConfig+0x2e8>)
 8005118:	4013      	ands	r3, r2
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6812      	ldr	r2, [r2, #0]
 800511e:	69f9      	ldr	r1, [r7, #28]
 8005120:	430b      	orrs	r3, r1
 8005122:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4aa4      	ldr	r2, [pc, #656]	; (80053d8 <UART_SetConfig+0x2ec>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d004      	beq.n	8005154 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	69fa      	ldr	r2, [r7, #28]
 8005150:	4313      	orrs	r3, r2
 8005152:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800515e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6812      	ldr	r2, [r2, #0]
 8005166:	69f9      	ldr	r1, [r7, #28]
 8005168:	430b      	orrs	r3, r1
 800516a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005172:	f023 010f 	bic.w	r1, r3, #15
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a95      	ldr	r2, [pc, #596]	; (80053dc <UART_SetConfig+0x2f0>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d120      	bne.n	80051ce <UART_SetConfig+0xe2>
 800518c:	4b94      	ldr	r3, [pc, #592]	; (80053e0 <UART_SetConfig+0x2f4>)
 800518e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	2b03      	cmp	r3, #3
 8005198:	d816      	bhi.n	80051c8 <UART_SetConfig+0xdc>
 800519a:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <UART_SetConfig+0xb4>)
 800519c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a0:	080051b1 	.word	0x080051b1
 80051a4:	080051bd 	.word	0x080051bd
 80051a8:	080051b7 	.word	0x080051b7
 80051ac:	080051c3 	.word	0x080051c3
 80051b0:	2301      	movs	r3, #1
 80051b2:	76fb      	strb	r3, [r7, #27]
 80051b4:	e0bc      	b.n	8005330 <UART_SetConfig+0x244>
 80051b6:	2302      	movs	r3, #2
 80051b8:	76fb      	strb	r3, [r7, #27]
 80051ba:	e0b9      	b.n	8005330 <UART_SetConfig+0x244>
 80051bc:	2304      	movs	r3, #4
 80051be:	76fb      	strb	r3, [r7, #27]
 80051c0:	e0b6      	b.n	8005330 <UART_SetConfig+0x244>
 80051c2:	2308      	movs	r3, #8
 80051c4:	76fb      	strb	r3, [r7, #27]
 80051c6:	e0b3      	b.n	8005330 <UART_SetConfig+0x244>
 80051c8:	2310      	movs	r3, #16
 80051ca:	76fb      	strb	r3, [r7, #27]
 80051cc:	e0b0      	b.n	8005330 <UART_SetConfig+0x244>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a84      	ldr	r2, [pc, #528]	; (80053e4 <UART_SetConfig+0x2f8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d132      	bne.n	800523e <UART_SetConfig+0x152>
 80051d8:	4b81      	ldr	r3, [pc, #516]	; (80053e0 <UART_SetConfig+0x2f4>)
 80051da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051de:	f003 030c 	and.w	r3, r3, #12
 80051e2:	2b0c      	cmp	r3, #12
 80051e4:	d828      	bhi.n	8005238 <UART_SetConfig+0x14c>
 80051e6:	a201      	add	r2, pc, #4	; (adr r2, 80051ec <UART_SetConfig+0x100>)
 80051e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ec:	08005221 	.word	0x08005221
 80051f0:	08005239 	.word	0x08005239
 80051f4:	08005239 	.word	0x08005239
 80051f8:	08005239 	.word	0x08005239
 80051fc:	0800522d 	.word	0x0800522d
 8005200:	08005239 	.word	0x08005239
 8005204:	08005239 	.word	0x08005239
 8005208:	08005239 	.word	0x08005239
 800520c:	08005227 	.word	0x08005227
 8005210:	08005239 	.word	0x08005239
 8005214:	08005239 	.word	0x08005239
 8005218:	08005239 	.word	0x08005239
 800521c:	08005233 	.word	0x08005233
 8005220:	2300      	movs	r3, #0
 8005222:	76fb      	strb	r3, [r7, #27]
 8005224:	e084      	b.n	8005330 <UART_SetConfig+0x244>
 8005226:	2302      	movs	r3, #2
 8005228:	76fb      	strb	r3, [r7, #27]
 800522a:	e081      	b.n	8005330 <UART_SetConfig+0x244>
 800522c:	2304      	movs	r3, #4
 800522e:	76fb      	strb	r3, [r7, #27]
 8005230:	e07e      	b.n	8005330 <UART_SetConfig+0x244>
 8005232:	2308      	movs	r3, #8
 8005234:	76fb      	strb	r3, [r7, #27]
 8005236:	e07b      	b.n	8005330 <UART_SetConfig+0x244>
 8005238:	2310      	movs	r3, #16
 800523a:	76fb      	strb	r3, [r7, #27]
 800523c:	e078      	b.n	8005330 <UART_SetConfig+0x244>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a69      	ldr	r2, [pc, #420]	; (80053e8 <UART_SetConfig+0x2fc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d120      	bne.n	800528a <UART_SetConfig+0x19e>
 8005248:	4b65      	ldr	r3, [pc, #404]	; (80053e0 <UART_SetConfig+0x2f4>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005252:	2b30      	cmp	r3, #48	; 0x30
 8005254:	d013      	beq.n	800527e <UART_SetConfig+0x192>
 8005256:	2b30      	cmp	r3, #48	; 0x30
 8005258:	d814      	bhi.n	8005284 <UART_SetConfig+0x198>
 800525a:	2b20      	cmp	r3, #32
 800525c:	d009      	beq.n	8005272 <UART_SetConfig+0x186>
 800525e:	2b20      	cmp	r3, #32
 8005260:	d810      	bhi.n	8005284 <UART_SetConfig+0x198>
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <UART_SetConfig+0x180>
 8005266:	2b10      	cmp	r3, #16
 8005268:	d006      	beq.n	8005278 <UART_SetConfig+0x18c>
 800526a:	e00b      	b.n	8005284 <UART_SetConfig+0x198>
 800526c:	2300      	movs	r3, #0
 800526e:	76fb      	strb	r3, [r7, #27]
 8005270:	e05e      	b.n	8005330 <UART_SetConfig+0x244>
 8005272:	2302      	movs	r3, #2
 8005274:	76fb      	strb	r3, [r7, #27]
 8005276:	e05b      	b.n	8005330 <UART_SetConfig+0x244>
 8005278:	2304      	movs	r3, #4
 800527a:	76fb      	strb	r3, [r7, #27]
 800527c:	e058      	b.n	8005330 <UART_SetConfig+0x244>
 800527e:	2308      	movs	r3, #8
 8005280:	76fb      	strb	r3, [r7, #27]
 8005282:	e055      	b.n	8005330 <UART_SetConfig+0x244>
 8005284:	2310      	movs	r3, #16
 8005286:	76fb      	strb	r3, [r7, #27]
 8005288:	e052      	b.n	8005330 <UART_SetConfig+0x244>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a57      	ldr	r2, [pc, #348]	; (80053ec <UART_SetConfig+0x300>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d120      	bne.n	80052d6 <UART_SetConfig+0x1ea>
 8005294:	4b52      	ldr	r3, [pc, #328]	; (80053e0 <UART_SetConfig+0x2f4>)
 8005296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800529e:	2bc0      	cmp	r3, #192	; 0xc0
 80052a0:	d013      	beq.n	80052ca <UART_SetConfig+0x1de>
 80052a2:	2bc0      	cmp	r3, #192	; 0xc0
 80052a4:	d814      	bhi.n	80052d0 <UART_SetConfig+0x1e4>
 80052a6:	2b80      	cmp	r3, #128	; 0x80
 80052a8:	d009      	beq.n	80052be <UART_SetConfig+0x1d2>
 80052aa:	2b80      	cmp	r3, #128	; 0x80
 80052ac:	d810      	bhi.n	80052d0 <UART_SetConfig+0x1e4>
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <UART_SetConfig+0x1cc>
 80052b2:	2b40      	cmp	r3, #64	; 0x40
 80052b4:	d006      	beq.n	80052c4 <UART_SetConfig+0x1d8>
 80052b6:	e00b      	b.n	80052d0 <UART_SetConfig+0x1e4>
 80052b8:	2300      	movs	r3, #0
 80052ba:	76fb      	strb	r3, [r7, #27]
 80052bc:	e038      	b.n	8005330 <UART_SetConfig+0x244>
 80052be:	2302      	movs	r3, #2
 80052c0:	76fb      	strb	r3, [r7, #27]
 80052c2:	e035      	b.n	8005330 <UART_SetConfig+0x244>
 80052c4:	2304      	movs	r3, #4
 80052c6:	76fb      	strb	r3, [r7, #27]
 80052c8:	e032      	b.n	8005330 <UART_SetConfig+0x244>
 80052ca:	2308      	movs	r3, #8
 80052cc:	76fb      	strb	r3, [r7, #27]
 80052ce:	e02f      	b.n	8005330 <UART_SetConfig+0x244>
 80052d0:	2310      	movs	r3, #16
 80052d2:	76fb      	strb	r3, [r7, #27]
 80052d4:	e02c      	b.n	8005330 <UART_SetConfig+0x244>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a3f      	ldr	r2, [pc, #252]	; (80053d8 <UART_SetConfig+0x2ec>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d125      	bne.n	800532c <UART_SetConfig+0x240>
 80052e0:	4b3f      	ldr	r3, [pc, #252]	; (80053e0 <UART_SetConfig+0x2f4>)
 80052e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052ee:	d017      	beq.n	8005320 <UART_SetConfig+0x234>
 80052f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052f4:	d817      	bhi.n	8005326 <UART_SetConfig+0x23a>
 80052f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052fa:	d00b      	beq.n	8005314 <UART_SetConfig+0x228>
 80052fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005300:	d811      	bhi.n	8005326 <UART_SetConfig+0x23a>
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <UART_SetConfig+0x222>
 8005306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800530a:	d006      	beq.n	800531a <UART_SetConfig+0x22e>
 800530c:	e00b      	b.n	8005326 <UART_SetConfig+0x23a>
 800530e:	2300      	movs	r3, #0
 8005310:	76fb      	strb	r3, [r7, #27]
 8005312:	e00d      	b.n	8005330 <UART_SetConfig+0x244>
 8005314:	2302      	movs	r3, #2
 8005316:	76fb      	strb	r3, [r7, #27]
 8005318:	e00a      	b.n	8005330 <UART_SetConfig+0x244>
 800531a:	2304      	movs	r3, #4
 800531c:	76fb      	strb	r3, [r7, #27]
 800531e:	e007      	b.n	8005330 <UART_SetConfig+0x244>
 8005320:	2308      	movs	r3, #8
 8005322:	76fb      	strb	r3, [r7, #27]
 8005324:	e004      	b.n	8005330 <UART_SetConfig+0x244>
 8005326:	2310      	movs	r3, #16
 8005328:	76fb      	strb	r3, [r7, #27]
 800532a:	e001      	b.n	8005330 <UART_SetConfig+0x244>
 800532c:	2310      	movs	r3, #16
 800532e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a28      	ldr	r2, [pc, #160]	; (80053d8 <UART_SetConfig+0x2ec>)
 8005336:	4293      	cmp	r3, r2
 8005338:	f040 809e 	bne.w	8005478 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800533c:	7efb      	ldrb	r3, [r7, #27]
 800533e:	2b08      	cmp	r3, #8
 8005340:	d823      	bhi.n	800538a <UART_SetConfig+0x29e>
 8005342:	a201      	add	r2, pc, #4	; (adr r2, 8005348 <UART_SetConfig+0x25c>)
 8005344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005348:	0800536d 	.word	0x0800536d
 800534c:	0800538b 	.word	0x0800538b
 8005350:	08005375 	.word	0x08005375
 8005354:	0800538b 	.word	0x0800538b
 8005358:	0800537b 	.word	0x0800537b
 800535c:	0800538b 	.word	0x0800538b
 8005360:	0800538b 	.word	0x0800538b
 8005364:	0800538b 	.word	0x0800538b
 8005368:	08005383 	.word	0x08005383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800536c:	f7fd fb42 	bl	80029f4 <HAL_RCC_GetPCLK1Freq>
 8005370:	6178      	str	r0, [r7, #20]
        break;
 8005372:	e00f      	b.n	8005394 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005374:	4b1e      	ldr	r3, [pc, #120]	; (80053f0 <UART_SetConfig+0x304>)
 8005376:	617b      	str	r3, [r7, #20]
        break;
 8005378:	e00c      	b.n	8005394 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800537a:	f7fd facd 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 800537e:	6178      	str	r0, [r7, #20]
        break;
 8005380:	e008      	b.n	8005394 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005386:	617b      	str	r3, [r7, #20]
        break;
 8005388:	e004      	b.n	8005394 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	76bb      	strb	r3, [r7, #26]
        break;
 8005392:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 812e 	beq.w	80055f8 <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	4a14      	ldr	r2, [pc, #80]	; (80053f4 <UART_SetConfig+0x308>)
 80053a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053a6:	461a      	mov	r2, r3
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80053ae:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	4613      	mov	r3, r2
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	4413      	add	r3, r2
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d305      	bcc.n	80053cc <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d915      	bls.n	80053f8 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	76bb      	strb	r3, [r7, #26]
 80053d0:	e112      	b.n	80055f8 <UART_SetConfig+0x50c>
 80053d2:	bf00      	nop
 80053d4:	cfff69f3 	.word	0xcfff69f3
 80053d8:	40008000 	.word	0x40008000
 80053dc:	40013800 	.word	0x40013800
 80053e0:	40021000 	.word	0x40021000
 80053e4:	40004400 	.word	0x40004400
 80053e8:	40004800 	.word	0x40004800
 80053ec:	40004c00 	.word	0x40004c00
 80053f0:	00f42400 	.word	0x00f42400
 80053f4:	08007870 	.word	0x08007870
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f04f 0100 	mov.w	r1, #0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	4a86      	ldr	r2, [pc, #536]	; (8005620 <UART_SetConfig+0x534>)
 8005406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800540a:	b29a      	uxth	r2, r3
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	f7fa ff6e 	bl	80002f0 <__aeabi_uldivmod>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4610      	mov	r0, r2
 800541a:	4619      	mov	r1, r3
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	020b      	lsls	r3, r1, #8
 8005426:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800542a:	0202      	lsls	r2, r0, #8
 800542c:	6879      	ldr	r1, [r7, #4]
 800542e:	6849      	ldr	r1, [r1, #4]
 8005430:	0849      	lsrs	r1, r1, #1
 8005432:	4608      	mov	r0, r1
 8005434:	f04f 0100 	mov.w	r1, #0
 8005438:	1814      	adds	r4, r2, r0
 800543a:	eb43 0501 	adc.w	r5, r3, r1
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	461a      	mov	r2, r3
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	4620      	mov	r0, r4
 800544a:	4629      	mov	r1, r5
 800544c:	f7fa ff50 	bl	80002f0 <__aeabi_uldivmod>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	4613      	mov	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800545e:	d308      	bcc.n	8005472 <UART_SetConfig+0x386>
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005466:	d204      	bcs.n	8005472 <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	60da      	str	r2, [r3, #12]
 8005470:	e0c2      	b.n	80055f8 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	76bb      	strb	r3, [r7, #26]
 8005476:	e0bf      	b.n	80055f8 <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005480:	d165      	bne.n	800554e <UART_SetConfig+0x462>
  {
    switch (clocksource)
 8005482:	7efb      	ldrb	r3, [r7, #27]
 8005484:	2b08      	cmp	r3, #8
 8005486:	d828      	bhi.n	80054da <UART_SetConfig+0x3ee>
 8005488:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <UART_SetConfig+0x3a4>)
 800548a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548e:	bf00      	nop
 8005490:	080054b5 	.word	0x080054b5
 8005494:	080054bd 	.word	0x080054bd
 8005498:	080054c5 	.word	0x080054c5
 800549c:	080054db 	.word	0x080054db
 80054a0:	080054cb 	.word	0x080054cb
 80054a4:	080054db 	.word	0x080054db
 80054a8:	080054db 	.word	0x080054db
 80054ac:	080054db 	.word	0x080054db
 80054b0:	080054d3 	.word	0x080054d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054b4:	f7fd fa9e 	bl	80029f4 <HAL_RCC_GetPCLK1Freq>
 80054b8:	6178      	str	r0, [r7, #20]
        break;
 80054ba:	e013      	b.n	80054e4 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054bc:	f7fd fab0 	bl	8002a20 <HAL_RCC_GetPCLK2Freq>
 80054c0:	6178      	str	r0, [r7, #20]
        break;
 80054c2:	e00f      	b.n	80054e4 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054c4:	4b57      	ldr	r3, [pc, #348]	; (8005624 <UART_SetConfig+0x538>)
 80054c6:	617b      	str	r3, [r7, #20]
        break;
 80054c8:	e00c      	b.n	80054e4 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ca:	f7fd fa25 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 80054ce:	6178      	str	r0, [r7, #20]
        break;
 80054d0:	e008      	b.n	80054e4 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054d6:	617b      	str	r3, [r7, #20]
        break;
 80054d8:	e004      	b.n	80054e4 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	76bb      	strb	r3, [r7, #26]
        break;
 80054e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 8086 	beq.w	80055f8 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	4a4b      	ldr	r2, [pc, #300]	; (8005620 <UART_SetConfig+0x534>)
 80054f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054f6:	461a      	mov	r2, r3
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80054fe:	005a      	lsls	r2, r3, #1
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	085b      	lsrs	r3, r3, #1
 8005506:	441a      	add	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005510:	b29b      	uxth	r3, r3
 8005512:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	2b0f      	cmp	r3, #15
 8005518:	d916      	bls.n	8005548 <UART_SetConfig+0x45c>
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005520:	d212      	bcs.n	8005548 <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	b29b      	uxth	r3, r3
 8005526:	f023 030f 	bic.w	r3, r3, #15
 800552a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	085b      	lsrs	r3, r3, #1
 8005530:	b29b      	uxth	r3, r3
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	b29a      	uxth	r2, r3
 8005538:	89fb      	ldrh	r3, [r7, #14]
 800553a:	4313      	orrs	r3, r2
 800553c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	89fa      	ldrh	r2, [r7, #14]
 8005544:	60da      	str	r2, [r3, #12]
 8005546:	e057      	b.n	80055f8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	76bb      	strb	r3, [r7, #26]
 800554c:	e054      	b.n	80055f8 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800554e:	7efb      	ldrb	r3, [r7, #27]
 8005550:	2b08      	cmp	r3, #8
 8005552:	d828      	bhi.n	80055a6 <UART_SetConfig+0x4ba>
 8005554:	a201      	add	r2, pc, #4	; (adr r2, 800555c <UART_SetConfig+0x470>)
 8005556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555a:	bf00      	nop
 800555c:	08005581 	.word	0x08005581
 8005560:	08005589 	.word	0x08005589
 8005564:	08005591 	.word	0x08005591
 8005568:	080055a7 	.word	0x080055a7
 800556c:	08005597 	.word	0x08005597
 8005570:	080055a7 	.word	0x080055a7
 8005574:	080055a7 	.word	0x080055a7
 8005578:	080055a7 	.word	0x080055a7
 800557c:	0800559f 	.word	0x0800559f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005580:	f7fd fa38 	bl	80029f4 <HAL_RCC_GetPCLK1Freq>
 8005584:	6178      	str	r0, [r7, #20]
        break;
 8005586:	e013      	b.n	80055b0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005588:	f7fd fa4a 	bl	8002a20 <HAL_RCC_GetPCLK2Freq>
 800558c:	6178      	str	r0, [r7, #20]
        break;
 800558e:	e00f      	b.n	80055b0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005590:	4b24      	ldr	r3, [pc, #144]	; (8005624 <UART_SetConfig+0x538>)
 8005592:	617b      	str	r3, [r7, #20]
        break;
 8005594:	e00c      	b.n	80055b0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005596:	f7fd f9bf 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 800559a:	6178      	str	r0, [r7, #20]
        break;
 800559c:	e008      	b.n	80055b0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800559e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055a2:	617b      	str	r3, [r7, #20]
        break;
 80055a4:	e004      	b.n	80055b0 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	76bb      	strb	r3, [r7, #26]
        break;
 80055ae:	bf00      	nop
    }

    if (pclk != 0U)
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d020      	beq.n	80055f8 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	4a19      	ldr	r2, [pc, #100]	; (8005620 <UART_SetConfig+0x534>)
 80055bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055c0:	461a      	mov	r2, r3
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	085b      	lsrs	r3, r3, #1
 80055ce:	441a      	add	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d8:	b29b      	uxth	r3, r3
 80055da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	2b0f      	cmp	r3, #15
 80055e0:	d908      	bls.n	80055f4 <UART_SetConfig+0x508>
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e8:	d204      	bcs.n	80055f4 <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	60da      	str	r2, [r3, #12]
 80055f2:	e001      	b.n	80055f8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005614:	7ebb      	ldrb	r3, [r7, #26]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3720      	adds	r7, #32
 800561a:	46bd      	mov	sp, r7
 800561c:	bdb0      	pop	{r4, r5, r7, pc}
 800561e:	bf00      	nop
 8005620:	08007870 	.word	0x08007870
 8005624:	00f42400 	.word	0x00f42400

08005628 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00a      	beq.n	8005652 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569a:	f003 0308 	and.w	r3, r3, #8
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005704:	2b00      	cmp	r3, #0
 8005706:	d01a      	beq.n	800573e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005726:	d10a      	bne.n	800573e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	605a      	str	r2, [r3, #4]
  }
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af02      	add	r7, sp, #8
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800577c:	f7fb ffee 	bl	800175c <HAL_GetTick>
 8005780:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0308 	and.w	r3, r3, #8
 800578c:	2b08      	cmp	r3, #8
 800578e:	d10e      	bne.n	80057ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005790:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f82f 	bl	8005802 <UART_WaitOnFlagUntilTimeout>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e025      	b.n	80057fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d10e      	bne.n	80057da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f819 	bl	8005802 <UART_WaitOnFlagUntilTimeout>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e00f      	b.n	80057fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2220      	movs	r2, #32
 80057de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2220      	movs	r2, #32
 80057e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b084      	sub	sp, #16
 8005806:	af00      	add	r7, sp, #0
 8005808:	60f8      	str	r0, [r7, #12]
 800580a:	60b9      	str	r1, [r7, #8]
 800580c:	603b      	str	r3, [r7, #0]
 800580e:	4613      	mov	r3, r2
 8005810:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005812:	e062      	b.n	80058da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581a:	d05e      	beq.n	80058da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800581c:	f7fb ff9e 	bl	800175c <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	429a      	cmp	r2, r3
 800582a:	d302      	bcc.n	8005832 <UART_WaitOnFlagUntilTimeout+0x30>
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d11d      	bne.n	800586e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005840:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 0201 	bic.w	r2, r2, #1
 8005850:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2220      	movs	r2, #32
 8005856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2220      	movs	r2, #32
 800585e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e045      	b.n	80058fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b00      	cmp	r3, #0
 800587a:	d02e      	beq.n	80058da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800588a:	d126      	bne.n	80058da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005894:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0201 	bic.w	r2, r2, #1
 80058b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2220      	movs	r2, #32
 80058ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2220      	movs	r2, #32
 80058ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e00f      	b.n	80058fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69da      	ldr	r2, [r3, #28]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4013      	ands	r3, r2
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	bf0c      	ite	eq
 80058ea:	2301      	moveq	r3, #1
 80058ec:	2300      	movne	r3, #0
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	461a      	mov	r2, r3
 80058f2:	79fb      	ldrb	r3, [r7, #7]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d08d      	beq.n	8005814 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	4613      	mov	r3, r2
 8005910:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	88fa      	ldrh	r2, [r7, #6]
 800591c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	88fa      	ldrh	r2, [r7, #6]
 8005924:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005936:	d10e      	bne.n	8005956 <UART_Start_Receive_IT+0x52>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d105      	bne.n	800594c <UART_Start_Receive_IT+0x48>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005946:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800594a:	e02d      	b.n	80059a8 <UART_Start_Receive_IT+0xa4>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	22ff      	movs	r2, #255	; 0xff
 8005950:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005954:	e028      	b.n	80059a8 <UART_Start_Receive_IT+0xa4>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10d      	bne.n	800597a <UART_Start_Receive_IT+0x76>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d104      	bne.n	8005970 <UART_Start_Receive_IT+0x6c>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	22ff      	movs	r2, #255	; 0xff
 800596a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800596e:	e01b      	b.n	80059a8 <UART_Start_Receive_IT+0xa4>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	227f      	movs	r2, #127	; 0x7f
 8005974:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005978:	e016      	b.n	80059a8 <UART_Start_Receive_IT+0xa4>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005982:	d10d      	bne.n	80059a0 <UART_Start_Receive_IT+0x9c>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d104      	bne.n	8005996 <UART_Start_Receive_IT+0x92>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	227f      	movs	r2, #127	; 0x7f
 8005990:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005994:	e008      	b.n	80059a8 <UART_Start_Receive_IT+0xa4>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	223f      	movs	r2, #63	; 0x3f
 800599a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800599e:	e003      	b.n	80059a8 <UART_Start_Receive_IT+0xa4>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2222      	movs	r2, #34	; 0x22
 80059b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0201 	orr.w	r2, r2, #1
 80059c6:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059d0:	d12a      	bne.n	8005a28 <UART_Start_Receive_IT+0x124>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80059d8:	88fa      	ldrh	r2, [r7, #6]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d324      	bcc.n	8005a28 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e6:	d107      	bne.n	80059f8 <UART_Start_Receive_IT+0xf4>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d103      	bne.n	80059f8 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4a1f      	ldr	r2, [pc, #124]	; (8005a70 <UART_Start_Receive_IT+0x16c>)
 80059f4:	671a      	str	r2, [r3, #112]	; 0x70
 80059f6:	e002      	b.n	80059fe <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4a1e      	ldr	r2, [pc, #120]	; (8005a74 <UART_Start_Receive_IT+0x170>)
 80059fc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a14:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005a24:	609a      	str	r2, [r3, #8]
 8005a26:	e01b      	b.n	8005a60 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a30:	d107      	bne.n	8005a42 <UART_Start_Receive_IT+0x13e>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d103      	bne.n	8005a42 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4a0e      	ldr	r2, [pc, #56]	; (8005a78 <UART_Start_Receive_IT+0x174>)
 8005a3e:	671a      	str	r2, [r3, #112]	; 0x70
 8005a40:	e002      	b.n	8005a48 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4a0d      	ldr	r2, [pc, #52]	; (8005a7c <UART_Start_Receive_IT+0x178>)
 8005a46:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005a5e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	08005ef9 	.word	0x08005ef9
 8005a74:	08005cf5 	.word	0x08005cf5
 8005a78:	08005c1d 	.word	0x08005c1d
 8005a7c:	08005b45 	.word	0x08005b45

08005a80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a96:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6812      	ldr	r2, [r2, #0]
 8005aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aa6:	f023 0301 	bic.w	r3, r3, #1
 8005aaa:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d107      	bne.n	8005ac4 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0210 	bic.w	r2, r2, #16
 8005ac2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f7ff fadc 	bl	80050c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b08:	bf00      	nop
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b26:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff fab8 	bl	80050ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b3c:	bf00      	nop
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005b52:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b5a:	2b22      	cmp	r3, #34	; 0x22
 8005b5c:	d152      	bne.n	8005c04 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b66:	89bb      	ldrh	r3, [r7, #12]
 8005b68:	b2d9      	uxtb	r1, r3
 8005b6a:	89fb      	ldrh	r3, [r7, #14]
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b72:	400a      	ands	r2, r1
 8005b74:	b2d2      	uxtb	r2, r2
 8005b76:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d139      	bne.n	8005c14 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005bae:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0201 	bic.w	r2, r2, #1
 8005bbe:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d10f      	bne.n	8005bf6 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0210 	bic.w	r2, r2, #16
 8005be4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005bec:	4619      	mov	r1, r3
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7ff fa70 	bl	80050d4 <HAL_UARTEx_RxEventCallback>
 8005bf4:	e002      	b.n	8005bfc <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7fa fda6 	bl	8000748 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c02:	e007      	b.n	8005c14 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0208 	orr.w	r2, r2, #8
 8005c12:	619a      	str	r2, [r3, #24]
}
 8005c14:	bf00      	nop
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005c2a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c32:	2b22      	cmp	r3, #34	; 0x22
 8005c34:	d152      	bne.n	8005cdc <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c42:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005c44:	89ba      	ldrh	r2, [r7, #12]
 8005c46:	89fb      	ldrh	r3, [r7, #14]
 8005c48:	4013      	ands	r3, r2
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c54:	1c9a      	adds	r2, r3, #2
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d139      	bne.n	8005cec <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c86:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689a      	ldr	r2, [r3, #8]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0201 	bic.w	r2, r2, #1
 8005c96:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d10f      	bne.n	8005cce <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0210 	bic.w	r2, r2, #16
 8005cbc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7ff fa04 	bl	80050d4 <HAL_UARTEx_RxEventCallback>
 8005ccc:	e002      	b.n	8005cd4 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7fa fd3a 	bl	8000748 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cda:	e007      	b.n	8005cec <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699a      	ldr	r2, [r3, #24]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0208 	orr.w	r2, r2, #8
 8005cea:	619a      	str	r2, [r3, #24]
}
 8005cec:	bf00      	nop
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d02:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d22:	2b22      	cmp	r3, #34	; 0x22
 8005d24:	f040 80da 	bne.w	8005edc <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d2e:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d30:	e0aa      	b.n	8005e88 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d3a:	89bb      	ldrh	r3, [r7, #12]
 8005d3c:	b2d9      	uxtb	r1, r3
 8005d3e:	8b7b      	ldrh	r3, [r7, #26]
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d46:	400a      	ands	r2, r1
 8005d48:	b2d2      	uxtb	r2, r2
 8005d4a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d04d      	beq.n	8005e16 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d010      	beq.n	8005da6 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00b      	beq.n	8005da6 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2201      	movs	r2, #1
 8005d94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d9c:	f043 0201 	orr.w	r2, r3, #1
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d010      	beq.n	8005dd2 <UART_RxISR_8BIT_FIFOEN+0xde>
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00b      	beq.n	8005dd2 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dc8:	f043 0204 	orr.w	r2, r3, #4
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d010      	beq.n	8005dfe <UART_RxISR_8BIT_FIFOEN+0x10a>
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00b      	beq.n	8005dfe <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2204      	movs	r2, #4
 8005dec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005df4:	f043 0202 	orr.w	r2, r3, #2
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d006      	beq.n	8005e16 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff f959 	bl	80050c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d132      	bne.n	8005e88 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e30:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	6812      	ldr	r2, [r2, #0]
 8005e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e40:	f023 0301 	bic.w	r3, r3, #1
 8005e44:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d10f      	bne.n	8005e7c <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0210 	bic.w	r2, r2, #16
 8005e6a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e72:	4619      	mov	r1, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff f92d 	bl	80050d4 <HAL_UARTEx_RxEventCallback>
 8005e7a:	e002      	b.n	8005e82 <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7fa fc63 	bl	8000748 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e88:	89fb      	ldrh	r3, [r7, #14]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d005      	beq.n	8005e9a <UART_RxISR_8BIT_FIFOEN+0x1a6>
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	f003 0320 	and.w	r3, r3, #32
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f47f af4c 	bne.w	8005d32 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ea0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005ea2:	897b      	ldrh	r3, [r7, #10]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d021      	beq.n	8005eec <UART_RxISR_8BIT_FIFOEN+0x1f8>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005eae:	897a      	ldrh	r2, [r7, #10]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d21b      	bcs.n	8005eec <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005ec2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a0b      	ldr	r2, [pc, #44]	; (8005ef4 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8005ec8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f042 0220 	orr.w	r2, r2, #32
 8005ed8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005eda:	e007      	b.n	8005eec <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699a      	ldr	r2, [r3, #24]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0208 	orr.w	r2, r2, #8
 8005eea:	619a      	str	r2, [r3, #24]
}
 8005eec:	bf00      	nop
 8005eee:	3720      	adds	r7, #32
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	08005b45 	.word	0x08005b45

08005ef8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08a      	sub	sp, #40	; 0x28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005f06:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f26:	2b22      	cmp	r3, #34	; 0x22
 8005f28:	f040 80da 	bne.w	80060e0 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005f32:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f34:	e0aa      	b.n	800608c <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f42:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8005f44:	8aba      	ldrh	r2, [r7, #20]
 8005f46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f48:	4013      	ands	r3, r2
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f54:	1c9a      	adds	r2, r3, #2
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	f003 0307 	and.w	r3, r3, #7
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d04d      	beq.n	800601a <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d010      	beq.n	8005faa <UART_RxISR_16BIT_FIFOEN+0xb2>
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00b      	beq.n	8005faa <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2201      	movs	r2, #1
 8005f98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fa0:	f043 0201 	orr.w	r2, r3, #1
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d010      	beq.n	8005fd6 <UART_RxISR_16BIT_FIFOEN+0xde>
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00b      	beq.n	8005fd6 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fcc:	f043 0204 	orr.w	r2, r3, #4
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d010      	beq.n	8006002 <UART_RxISR_16BIT_FIFOEN+0x10a>
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00b      	beq.n	8006002 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2204      	movs	r2, #4
 8005ff0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ff8:	f043 0202 	orr.w	r2, r3, #2
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006008:	2b00      	cmp	r3, #0
 800600a:	d006      	beq.n	800601a <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7ff f857 	bl	80050c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d132      	bne.n	800608c <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006034:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	6812      	ldr	r2, [r2, #0]
 8006040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006044:	f023 0301 	bic.w	r3, r3, #1
 8006048:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2220      	movs	r2, #32
 800604e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800605c:	2b01      	cmp	r3, #1
 800605e:	d10f      	bne.n	8006080 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0210 	bic.w	r2, r2, #16
 800606e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006076:	4619      	mov	r1, r3
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f7ff f82b 	bl	80050d4 <HAL_UARTEx_RxEventCallback>
 800607e:	e002      	b.n	8006086 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7fa fb61 	bl	8000748 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800608c:	8afb      	ldrh	r3, [r7, #22]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d005      	beq.n	800609e <UART_RxISR_16BIT_FIFOEN+0x1a6>
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	f003 0320 	and.w	r3, r3, #32
 8006098:	2b00      	cmp	r3, #0
 800609a:	f47f af4c 	bne.w	8005f36 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060a4:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80060a6:	89fb      	ldrh	r3, [r7, #14]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d021      	beq.n	80060f0 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80060b2:	89fa      	ldrh	r2, [r7, #14]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d21b      	bcs.n	80060f0 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689a      	ldr	r2, [r3, #8]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80060c6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a0b      	ldr	r2, [pc, #44]	; (80060f8 <UART_RxISR_16BIT_FIFOEN+0x200>)
 80060cc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f042 0220 	orr.w	r2, r2, #32
 80060dc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060de:	e007      	b.n	80060f0 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0208 	orr.w	r2, r2, #8
 80060ee:	619a      	str	r2, [r3, #24]
}
 80060f0:	bf00      	nop
 80060f2:	3728      	adds	r7, #40	; 0x28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	08005c1d 	.word	0x08005c1d

080060fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006146:	2b01      	cmp	r3, #1
 8006148:	d101      	bne.n	800614e <HAL_UARTEx_DisableFifoMode+0x16>
 800614a:	2302      	movs	r3, #2
 800614c:	e027      	b.n	800619e <HAL_UARTEx_DisableFifoMode+0x66>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2224      	movs	r2, #36	; 0x24
 800615a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0201 	bic.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800617c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2220      	movs	r2, #32
 8006190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061be:	2302      	movs	r3, #2
 80061c0:	e02d      	b.n	800621e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2224      	movs	r2, #36	; 0x24
 80061ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0201 	bic.w	r2, r2, #1
 80061e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f850 	bl	80062a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2220      	movs	r2, #32
 8006210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800623a:	2302      	movs	r3, #2
 800623c:	e02d      	b.n	800629a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2224      	movs	r2, #36	; 0x24
 800624a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f022 0201 	bic.w	r2, r2, #1
 8006264:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f812 	bl	80062a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
	...

080062a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d108      	bne.n	80062c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062c4:	e031      	b.n	800632a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062c6:	2308      	movs	r3, #8
 80062c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062ca:	2308      	movs	r3, #8
 80062cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	0e5b      	lsrs	r3, r3, #25
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	0f5b      	lsrs	r3, r3, #29
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	f003 0307 	and.w	r3, r3, #7
 80062ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062ee:	7bbb      	ldrb	r3, [r7, #14]
 80062f0:	7b3a      	ldrb	r2, [r7, #12]
 80062f2:	4911      	ldr	r1, [pc, #68]	; (8006338 <UARTEx_SetNbDataToProcess+0x94>)
 80062f4:	5c8a      	ldrb	r2, [r1, r2]
 80062f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062fa:	7b3a      	ldrb	r2, [r7, #12]
 80062fc:	490f      	ldr	r1, [pc, #60]	; (800633c <UARTEx_SetNbDataToProcess+0x98>)
 80062fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006300:	fb93 f3f2 	sdiv	r3, r3, r2
 8006304:	b29a      	uxth	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800630c:	7bfb      	ldrb	r3, [r7, #15]
 800630e:	7b7a      	ldrb	r2, [r7, #13]
 8006310:	4909      	ldr	r1, [pc, #36]	; (8006338 <UARTEx_SetNbDataToProcess+0x94>)
 8006312:	5c8a      	ldrb	r2, [r1, r2]
 8006314:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006318:	7b7a      	ldrb	r2, [r7, #13]
 800631a:	4908      	ldr	r1, [pc, #32]	; (800633c <UARTEx_SetNbDataToProcess+0x98>)
 800631c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800631e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006322:	b29a      	uxth	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800632a:	bf00      	nop
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	08007888 	.word	0x08007888
 800633c:	08007890 	.word	0x08007890

08006340 <__errno>:
 8006340:	4b01      	ldr	r3, [pc, #4]	; (8006348 <__errno+0x8>)
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	20000014 	.word	0x20000014

0800634c <__libc_init_array>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	4d0d      	ldr	r5, [pc, #52]	; (8006384 <__libc_init_array+0x38>)
 8006350:	4c0d      	ldr	r4, [pc, #52]	; (8006388 <__libc_init_array+0x3c>)
 8006352:	1b64      	subs	r4, r4, r5
 8006354:	10a4      	asrs	r4, r4, #2
 8006356:	2600      	movs	r6, #0
 8006358:	42a6      	cmp	r6, r4
 800635a:	d109      	bne.n	8006370 <__libc_init_array+0x24>
 800635c:	4d0b      	ldr	r5, [pc, #44]	; (800638c <__libc_init_array+0x40>)
 800635e:	4c0c      	ldr	r4, [pc, #48]	; (8006390 <__libc_init_array+0x44>)
 8006360:	f001 f9be 	bl	80076e0 <_init>
 8006364:	1b64      	subs	r4, r4, r5
 8006366:	10a4      	asrs	r4, r4, #2
 8006368:	2600      	movs	r6, #0
 800636a:	42a6      	cmp	r6, r4
 800636c:	d105      	bne.n	800637a <__libc_init_array+0x2e>
 800636e:	bd70      	pop	{r4, r5, r6, pc}
 8006370:	f855 3b04 	ldr.w	r3, [r5], #4
 8006374:	4798      	blx	r3
 8006376:	3601      	adds	r6, #1
 8006378:	e7ee      	b.n	8006358 <__libc_init_array+0xc>
 800637a:	f855 3b04 	ldr.w	r3, [r5], #4
 800637e:	4798      	blx	r3
 8006380:	3601      	adds	r6, #1
 8006382:	e7f2      	b.n	800636a <__libc_init_array+0x1e>
 8006384:	08007938 	.word	0x08007938
 8006388:	08007938 	.word	0x08007938
 800638c:	08007938 	.word	0x08007938
 8006390:	0800793c 	.word	0x0800793c

08006394 <memset>:
 8006394:	4402      	add	r2, r0
 8006396:	4603      	mov	r3, r0
 8006398:	4293      	cmp	r3, r2
 800639a:	d100      	bne.n	800639e <memset+0xa>
 800639c:	4770      	bx	lr
 800639e:	f803 1b01 	strb.w	r1, [r3], #1
 80063a2:	e7f9      	b.n	8006398 <memset+0x4>

080063a4 <iprintf>:
 80063a4:	b40f      	push	{r0, r1, r2, r3}
 80063a6:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <iprintf+0x2c>)
 80063a8:	b513      	push	{r0, r1, r4, lr}
 80063aa:	681c      	ldr	r4, [r3, #0]
 80063ac:	b124      	cbz	r4, 80063b8 <iprintf+0x14>
 80063ae:	69a3      	ldr	r3, [r4, #24]
 80063b0:	b913      	cbnz	r3, 80063b8 <iprintf+0x14>
 80063b2:	4620      	mov	r0, r4
 80063b4:	f000 fa7e 	bl	80068b4 <__sinit>
 80063b8:	ab05      	add	r3, sp, #20
 80063ba:	9a04      	ldr	r2, [sp, #16]
 80063bc:	68a1      	ldr	r1, [r4, #8]
 80063be:	9301      	str	r3, [sp, #4]
 80063c0:	4620      	mov	r0, r4
 80063c2:	f000 fdab 	bl	8006f1c <_vfiprintf_r>
 80063c6:	b002      	add	sp, #8
 80063c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063cc:	b004      	add	sp, #16
 80063ce:	4770      	bx	lr
 80063d0:	20000014 	.word	0x20000014

080063d4 <_puts_r>:
 80063d4:	b570      	push	{r4, r5, r6, lr}
 80063d6:	460e      	mov	r6, r1
 80063d8:	4605      	mov	r5, r0
 80063da:	b118      	cbz	r0, 80063e4 <_puts_r+0x10>
 80063dc:	6983      	ldr	r3, [r0, #24]
 80063de:	b90b      	cbnz	r3, 80063e4 <_puts_r+0x10>
 80063e0:	f000 fa68 	bl	80068b4 <__sinit>
 80063e4:	69ab      	ldr	r3, [r5, #24]
 80063e6:	68ac      	ldr	r4, [r5, #8]
 80063e8:	b913      	cbnz	r3, 80063f0 <_puts_r+0x1c>
 80063ea:	4628      	mov	r0, r5
 80063ec:	f000 fa62 	bl	80068b4 <__sinit>
 80063f0:	4b2c      	ldr	r3, [pc, #176]	; (80064a4 <_puts_r+0xd0>)
 80063f2:	429c      	cmp	r4, r3
 80063f4:	d120      	bne.n	8006438 <_puts_r+0x64>
 80063f6:	686c      	ldr	r4, [r5, #4]
 80063f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063fa:	07db      	lsls	r3, r3, #31
 80063fc:	d405      	bmi.n	800640a <_puts_r+0x36>
 80063fe:	89a3      	ldrh	r3, [r4, #12]
 8006400:	0598      	lsls	r0, r3, #22
 8006402:	d402      	bmi.n	800640a <_puts_r+0x36>
 8006404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006406:	f000 faf3 	bl	80069f0 <__retarget_lock_acquire_recursive>
 800640a:	89a3      	ldrh	r3, [r4, #12]
 800640c:	0719      	lsls	r1, r3, #28
 800640e:	d51d      	bpl.n	800644c <_puts_r+0x78>
 8006410:	6923      	ldr	r3, [r4, #16]
 8006412:	b1db      	cbz	r3, 800644c <_puts_r+0x78>
 8006414:	3e01      	subs	r6, #1
 8006416:	68a3      	ldr	r3, [r4, #8]
 8006418:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800641c:	3b01      	subs	r3, #1
 800641e:	60a3      	str	r3, [r4, #8]
 8006420:	bb39      	cbnz	r1, 8006472 <_puts_r+0x9e>
 8006422:	2b00      	cmp	r3, #0
 8006424:	da38      	bge.n	8006498 <_puts_r+0xc4>
 8006426:	4622      	mov	r2, r4
 8006428:	210a      	movs	r1, #10
 800642a:	4628      	mov	r0, r5
 800642c:	f000 f868 	bl	8006500 <__swbuf_r>
 8006430:	3001      	adds	r0, #1
 8006432:	d011      	beq.n	8006458 <_puts_r+0x84>
 8006434:	250a      	movs	r5, #10
 8006436:	e011      	b.n	800645c <_puts_r+0x88>
 8006438:	4b1b      	ldr	r3, [pc, #108]	; (80064a8 <_puts_r+0xd4>)
 800643a:	429c      	cmp	r4, r3
 800643c:	d101      	bne.n	8006442 <_puts_r+0x6e>
 800643e:	68ac      	ldr	r4, [r5, #8]
 8006440:	e7da      	b.n	80063f8 <_puts_r+0x24>
 8006442:	4b1a      	ldr	r3, [pc, #104]	; (80064ac <_puts_r+0xd8>)
 8006444:	429c      	cmp	r4, r3
 8006446:	bf08      	it	eq
 8006448:	68ec      	ldreq	r4, [r5, #12]
 800644a:	e7d5      	b.n	80063f8 <_puts_r+0x24>
 800644c:	4621      	mov	r1, r4
 800644e:	4628      	mov	r0, r5
 8006450:	f000 f8a8 	bl	80065a4 <__swsetup_r>
 8006454:	2800      	cmp	r0, #0
 8006456:	d0dd      	beq.n	8006414 <_puts_r+0x40>
 8006458:	f04f 35ff 	mov.w	r5, #4294967295
 800645c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800645e:	07da      	lsls	r2, r3, #31
 8006460:	d405      	bmi.n	800646e <_puts_r+0x9a>
 8006462:	89a3      	ldrh	r3, [r4, #12]
 8006464:	059b      	lsls	r3, r3, #22
 8006466:	d402      	bmi.n	800646e <_puts_r+0x9a>
 8006468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800646a:	f000 fac2 	bl	80069f2 <__retarget_lock_release_recursive>
 800646e:	4628      	mov	r0, r5
 8006470:	bd70      	pop	{r4, r5, r6, pc}
 8006472:	2b00      	cmp	r3, #0
 8006474:	da04      	bge.n	8006480 <_puts_r+0xac>
 8006476:	69a2      	ldr	r2, [r4, #24]
 8006478:	429a      	cmp	r2, r3
 800647a:	dc06      	bgt.n	800648a <_puts_r+0xb6>
 800647c:	290a      	cmp	r1, #10
 800647e:	d004      	beq.n	800648a <_puts_r+0xb6>
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	6022      	str	r2, [r4, #0]
 8006486:	7019      	strb	r1, [r3, #0]
 8006488:	e7c5      	b.n	8006416 <_puts_r+0x42>
 800648a:	4622      	mov	r2, r4
 800648c:	4628      	mov	r0, r5
 800648e:	f000 f837 	bl	8006500 <__swbuf_r>
 8006492:	3001      	adds	r0, #1
 8006494:	d1bf      	bne.n	8006416 <_puts_r+0x42>
 8006496:	e7df      	b.n	8006458 <_puts_r+0x84>
 8006498:	6823      	ldr	r3, [r4, #0]
 800649a:	250a      	movs	r5, #10
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	6022      	str	r2, [r4, #0]
 80064a0:	701d      	strb	r5, [r3, #0]
 80064a2:	e7db      	b.n	800645c <_puts_r+0x88>
 80064a4:	080078bc 	.word	0x080078bc
 80064a8:	080078dc 	.word	0x080078dc
 80064ac:	0800789c 	.word	0x0800789c

080064b0 <puts>:
 80064b0:	4b02      	ldr	r3, [pc, #8]	; (80064bc <puts+0xc>)
 80064b2:	4601      	mov	r1, r0
 80064b4:	6818      	ldr	r0, [r3, #0]
 80064b6:	f7ff bf8d 	b.w	80063d4 <_puts_r>
 80064ba:	bf00      	nop
 80064bc:	20000014 	.word	0x20000014

080064c0 <siprintf>:
 80064c0:	b40e      	push	{r1, r2, r3}
 80064c2:	b500      	push	{lr}
 80064c4:	b09c      	sub	sp, #112	; 0x70
 80064c6:	ab1d      	add	r3, sp, #116	; 0x74
 80064c8:	9002      	str	r0, [sp, #8]
 80064ca:	9006      	str	r0, [sp, #24]
 80064cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064d0:	4809      	ldr	r0, [pc, #36]	; (80064f8 <siprintf+0x38>)
 80064d2:	9107      	str	r1, [sp, #28]
 80064d4:	9104      	str	r1, [sp, #16]
 80064d6:	4909      	ldr	r1, [pc, #36]	; (80064fc <siprintf+0x3c>)
 80064d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80064dc:	9105      	str	r1, [sp, #20]
 80064de:	6800      	ldr	r0, [r0, #0]
 80064e0:	9301      	str	r3, [sp, #4]
 80064e2:	a902      	add	r1, sp, #8
 80064e4:	f000 fbf0 	bl	8006cc8 <_svfiprintf_r>
 80064e8:	9b02      	ldr	r3, [sp, #8]
 80064ea:	2200      	movs	r2, #0
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	b01c      	add	sp, #112	; 0x70
 80064f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80064f4:	b003      	add	sp, #12
 80064f6:	4770      	bx	lr
 80064f8:	20000014 	.word	0x20000014
 80064fc:	ffff0208 	.word	0xffff0208

08006500 <__swbuf_r>:
 8006500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006502:	460e      	mov	r6, r1
 8006504:	4614      	mov	r4, r2
 8006506:	4605      	mov	r5, r0
 8006508:	b118      	cbz	r0, 8006512 <__swbuf_r+0x12>
 800650a:	6983      	ldr	r3, [r0, #24]
 800650c:	b90b      	cbnz	r3, 8006512 <__swbuf_r+0x12>
 800650e:	f000 f9d1 	bl	80068b4 <__sinit>
 8006512:	4b21      	ldr	r3, [pc, #132]	; (8006598 <__swbuf_r+0x98>)
 8006514:	429c      	cmp	r4, r3
 8006516:	d12b      	bne.n	8006570 <__swbuf_r+0x70>
 8006518:	686c      	ldr	r4, [r5, #4]
 800651a:	69a3      	ldr	r3, [r4, #24]
 800651c:	60a3      	str	r3, [r4, #8]
 800651e:	89a3      	ldrh	r3, [r4, #12]
 8006520:	071a      	lsls	r2, r3, #28
 8006522:	d52f      	bpl.n	8006584 <__swbuf_r+0x84>
 8006524:	6923      	ldr	r3, [r4, #16]
 8006526:	b36b      	cbz	r3, 8006584 <__swbuf_r+0x84>
 8006528:	6923      	ldr	r3, [r4, #16]
 800652a:	6820      	ldr	r0, [r4, #0]
 800652c:	1ac0      	subs	r0, r0, r3
 800652e:	6963      	ldr	r3, [r4, #20]
 8006530:	b2f6      	uxtb	r6, r6
 8006532:	4283      	cmp	r3, r0
 8006534:	4637      	mov	r7, r6
 8006536:	dc04      	bgt.n	8006542 <__swbuf_r+0x42>
 8006538:	4621      	mov	r1, r4
 800653a:	4628      	mov	r0, r5
 800653c:	f000 f926 	bl	800678c <_fflush_r>
 8006540:	bb30      	cbnz	r0, 8006590 <__swbuf_r+0x90>
 8006542:	68a3      	ldr	r3, [r4, #8]
 8006544:	3b01      	subs	r3, #1
 8006546:	60a3      	str	r3, [r4, #8]
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	6022      	str	r2, [r4, #0]
 800654e:	701e      	strb	r6, [r3, #0]
 8006550:	6963      	ldr	r3, [r4, #20]
 8006552:	3001      	adds	r0, #1
 8006554:	4283      	cmp	r3, r0
 8006556:	d004      	beq.n	8006562 <__swbuf_r+0x62>
 8006558:	89a3      	ldrh	r3, [r4, #12]
 800655a:	07db      	lsls	r3, r3, #31
 800655c:	d506      	bpl.n	800656c <__swbuf_r+0x6c>
 800655e:	2e0a      	cmp	r6, #10
 8006560:	d104      	bne.n	800656c <__swbuf_r+0x6c>
 8006562:	4621      	mov	r1, r4
 8006564:	4628      	mov	r0, r5
 8006566:	f000 f911 	bl	800678c <_fflush_r>
 800656a:	b988      	cbnz	r0, 8006590 <__swbuf_r+0x90>
 800656c:	4638      	mov	r0, r7
 800656e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006570:	4b0a      	ldr	r3, [pc, #40]	; (800659c <__swbuf_r+0x9c>)
 8006572:	429c      	cmp	r4, r3
 8006574:	d101      	bne.n	800657a <__swbuf_r+0x7a>
 8006576:	68ac      	ldr	r4, [r5, #8]
 8006578:	e7cf      	b.n	800651a <__swbuf_r+0x1a>
 800657a:	4b09      	ldr	r3, [pc, #36]	; (80065a0 <__swbuf_r+0xa0>)
 800657c:	429c      	cmp	r4, r3
 800657e:	bf08      	it	eq
 8006580:	68ec      	ldreq	r4, [r5, #12]
 8006582:	e7ca      	b.n	800651a <__swbuf_r+0x1a>
 8006584:	4621      	mov	r1, r4
 8006586:	4628      	mov	r0, r5
 8006588:	f000 f80c 	bl	80065a4 <__swsetup_r>
 800658c:	2800      	cmp	r0, #0
 800658e:	d0cb      	beq.n	8006528 <__swbuf_r+0x28>
 8006590:	f04f 37ff 	mov.w	r7, #4294967295
 8006594:	e7ea      	b.n	800656c <__swbuf_r+0x6c>
 8006596:	bf00      	nop
 8006598:	080078bc 	.word	0x080078bc
 800659c:	080078dc 	.word	0x080078dc
 80065a0:	0800789c 	.word	0x0800789c

080065a4 <__swsetup_r>:
 80065a4:	4b32      	ldr	r3, [pc, #200]	; (8006670 <__swsetup_r+0xcc>)
 80065a6:	b570      	push	{r4, r5, r6, lr}
 80065a8:	681d      	ldr	r5, [r3, #0]
 80065aa:	4606      	mov	r6, r0
 80065ac:	460c      	mov	r4, r1
 80065ae:	b125      	cbz	r5, 80065ba <__swsetup_r+0x16>
 80065b0:	69ab      	ldr	r3, [r5, #24]
 80065b2:	b913      	cbnz	r3, 80065ba <__swsetup_r+0x16>
 80065b4:	4628      	mov	r0, r5
 80065b6:	f000 f97d 	bl	80068b4 <__sinit>
 80065ba:	4b2e      	ldr	r3, [pc, #184]	; (8006674 <__swsetup_r+0xd0>)
 80065bc:	429c      	cmp	r4, r3
 80065be:	d10f      	bne.n	80065e0 <__swsetup_r+0x3c>
 80065c0:	686c      	ldr	r4, [r5, #4]
 80065c2:	89a3      	ldrh	r3, [r4, #12]
 80065c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065c8:	0719      	lsls	r1, r3, #28
 80065ca:	d42c      	bmi.n	8006626 <__swsetup_r+0x82>
 80065cc:	06dd      	lsls	r5, r3, #27
 80065ce:	d411      	bmi.n	80065f4 <__swsetup_r+0x50>
 80065d0:	2309      	movs	r3, #9
 80065d2:	6033      	str	r3, [r6, #0]
 80065d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065d8:	81a3      	strh	r3, [r4, #12]
 80065da:	f04f 30ff 	mov.w	r0, #4294967295
 80065de:	e03e      	b.n	800665e <__swsetup_r+0xba>
 80065e0:	4b25      	ldr	r3, [pc, #148]	; (8006678 <__swsetup_r+0xd4>)
 80065e2:	429c      	cmp	r4, r3
 80065e4:	d101      	bne.n	80065ea <__swsetup_r+0x46>
 80065e6:	68ac      	ldr	r4, [r5, #8]
 80065e8:	e7eb      	b.n	80065c2 <__swsetup_r+0x1e>
 80065ea:	4b24      	ldr	r3, [pc, #144]	; (800667c <__swsetup_r+0xd8>)
 80065ec:	429c      	cmp	r4, r3
 80065ee:	bf08      	it	eq
 80065f0:	68ec      	ldreq	r4, [r5, #12]
 80065f2:	e7e6      	b.n	80065c2 <__swsetup_r+0x1e>
 80065f4:	0758      	lsls	r0, r3, #29
 80065f6:	d512      	bpl.n	800661e <__swsetup_r+0x7a>
 80065f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065fa:	b141      	cbz	r1, 800660e <__swsetup_r+0x6a>
 80065fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006600:	4299      	cmp	r1, r3
 8006602:	d002      	beq.n	800660a <__swsetup_r+0x66>
 8006604:	4630      	mov	r0, r6
 8006606:	f000 fa59 	bl	8006abc <_free_r>
 800660a:	2300      	movs	r3, #0
 800660c:	6363      	str	r3, [r4, #52]	; 0x34
 800660e:	89a3      	ldrh	r3, [r4, #12]
 8006610:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006614:	81a3      	strh	r3, [r4, #12]
 8006616:	2300      	movs	r3, #0
 8006618:	6063      	str	r3, [r4, #4]
 800661a:	6923      	ldr	r3, [r4, #16]
 800661c:	6023      	str	r3, [r4, #0]
 800661e:	89a3      	ldrh	r3, [r4, #12]
 8006620:	f043 0308 	orr.w	r3, r3, #8
 8006624:	81a3      	strh	r3, [r4, #12]
 8006626:	6923      	ldr	r3, [r4, #16]
 8006628:	b94b      	cbnz	r3, 800663e <__swsetup_r+0x9a>
 800662a:	89a3      	ldrh	r3, [r4, #12]
 800662c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006634:	d003      	beq.n	800663e <__swsetup_r+0x9a>
 8006636:	4621      	mov	r1, r4
 8006638:	4630      	mov	r0, r6
 800663a:	f000 f9ff 	bl	8006a3c <__smakebuf_r>
 800663e:	89a0      	ldrh	r0, [r4, #12]
 8006640:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006644:	f010 0301 	ands.w	r3, r0, #1
 8006648:	d00a      	beq.n	8006660 <__swsetup_r+0xbc>
 800664a:	2300      	movs	r3, #0
 800664c:	60a3      	str	r3, [r4, #8]
 800664e:	6963      	ldr	r3, [r4, #20]
 8006650:	425b      	negs	r3, r3
 8006652:	61a3      	str	r3, [r4, #24]
 8006654:	6923      	ldr	r3, [r4, #16]
 8006656:	b943      	cbnz	r3, 800666a <__swsetup_r+0xc6>
 8006658:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800665c:	d1ba      	bne.n	80065d4 <__swsetup_r+0x30>
 800665e:	bd70      	pop	{r4, r5, r6, pc}
 8006660:	0781      	lsls	r1, r0, #30
 8006662:	bf58      	it	pl
 8006664:	6963      	ldrpl	r3, [r4, #20]
 8006666:	60a3      	str	r3, [r4, #8]
 8006668:	e7f4      	b.n	8006654 <__swsetup_r+0xb0>
 800666a:	2000      	movs	r0, #0
 800666c:	e7f7      	b.n	800665e <__swsetup_r+0xba>
 800666e:	bf00      	nop
 8006670:	20000014 	.word	0x20000014
 8006674:	080078bc 	.word	0x080078bc
 8006678:	080078dc 	.word	0x080078dc
 800667c:	0800789c 	.word	0x0800789c

08006680 <__sflush_r>:
 8006680:	898a      	ldrh	r2, [r1, #12]
 8006682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006686:	4605      	mov	r5, r0
 8006688:	0710      	lsls	r0, r2, #28
 800668a:	460c      	mov	r4, r1
 800668c:	d458      	bmi.n	8006740 <__sflush_r+0xc0>
 800668e:	684b      	ldr	r3, [r1, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	dc05      	bgt.n	80066a0 <__sflush_r+0x20>
 8006694:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006696:	2b00      	cmp	r3, #0
 8006698:	dc02      	bgt.n	80066a0 <__sflush_r+0x20>
 800669a:	2000      	movs	r0, #0
 800669c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066a2:	2e00      	cmp	r6, #0
 80066a4:	d0f9      	beq.n	800669a <__sflush_r+0x1a>
 80066a6:	2300      	movs	r3, #0
 80066a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066ac:	682f      	ldr	r7, [r5, #0]
 80066ae:	602b      	str	r3, [r5, #0]
 80066b0:	d032      	beq.n	8006718 <__sflush_r+0x98>
 80066b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	075a      	lsls	r2, r3, #29
 80066b8:	d505      	bpl.n	80066c6 <__sflush_r+0x46>
 80066ba:	6863      	ldr	r3, [r4, #4]
 80066bc:	1ac0      	subs	r0, r0, r3
 80066be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066c0:	b10b      	cbz	r3, 80066c6 <__sflush_r+0x46>
 80066c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066c4:	1ac0      	subs	r0, r0, r3
 80066c6:	2300      	movs	r3, #0
 80066c8:	4602      	mov	r2, r0
 80066ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066cc:	6a21      	ldr	r1, [r4, #32]
 80066ce:	4628      	mov	r0, r5
 80066d0:	47b0      	blx	r6
 80066d2:	1c43      	adds	r3, r0, #1
 80066d4:	89a3      	ldrh	r3, [r4, #12]
 80066d6:	d106      	bne.n	80066e6 <__sflush_r+0x66>
 80066d8:	6829      	ldr	r1, [r5, #0]
 80066da:	291d      	cmp	r1, #29
 80066dc:	d82c      	bhi.n	8006738 <__sflush_r+0xb8>
 80066de:	4a2a      	ldr	r2, [pc, #168]	; (8006788 <__sflush_r+0x108>)
 80066e0:	40ca      	lsrs	r2, r1
 80066e2:	07d6      	lsls	r6, r2, #31
 80066e4:	d528      	bpl.n	8006738 <__sflush_r+0xb8>
 80066e6:	2200      	movs	r2, #0
 80066e8:	6062      	str	r2, [r4, #4]
 80066ea:	04d9      	lsls	r1, r3, #19
 80066ec:	6922      	ldr	r2, [r4, #16]
 80066ee:	6022      	str	r2, [r4, #0]
 80066f0:	d504      	bpl.n	80066fc <__sflush_r+0x7c>
 80066f2:	1c42      	adds	r2, r0, #1
 80066f4:	d101      	bne.n	80066fa <__sflush_r+0x7a>
 80066f6:	682b      	ldr	r3, [r5, #0]
 80066f8:	b903      	cbnz	r3, 80066fc <__sflush_r+0x7c>
 80066fa:	6560      	str	r0, [r4, #84]	; 0x54
 80066fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066fe:	602f      	str	r7, [r5, #0]
 8006700:	2900      	cmp	r1, #0
 8006702:	d0ca      	beq.n	800669a <__sflush_r+0x1a>
 8006704:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006708:	4299      	cmp	r1, r3
 800670a:	d002      	beq.n	8006712 <__sflush_r+0x92>
 800670c:	4628      	mov	r0, r5
 800670e:	f000 f9d5 	bl	8006abc <_free_r>
 8006712:	2000      	movs	r0, #0
 8006714:	6360      	str	r0, [r4, #52]	; 0x34
 8006716:	e7c1      	b.n	800669c <__sflush_r+0x1c>
 8006718:	6a21      	ldr	r1, [r4, #32]
 800671a:	2301      	movs	r3, #1
 800671c:	4628      	mov	r0, r5
 800671e:	47b0      	blx	r6
 8006720:	1c41      	adds	r1, r0, #1
 8006722:	d1c7      	bne.n	80066b4 <__sflush_r+0x34>
 8006724:	682b      	ldr	r3, [r5, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0c4      	beq.n	80066b4 <__sflush_r+0x34>
 800672a:	2b1d      	cmp	r3, #29
 800672c:	d001      	beq.n	8006732 <__sflush_r+0xb2>
 800672e:	2b16      	cmp	r3, #22
 8006730:	d101      	bne.n	8006736 <__sflush_r+0xb6>
 8006732:	602f      	str	r7, [r5, #0]
 8006734:	e7b1      	b.n	800669a <__sflush_r+0x1a>
 8006736:	89a3      	ldrh	r3, [r4, #12]
 8006738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800673c:	81a3      	strh	r3, [r4, #12]
 800673e:	e7ad      	b.n	800669c <__sflush_r+0x1c>
 8006740:	690f      	ldr	r7, [r1, #16]
 8006742:	2f00      	cmp	r7, #0
 8006744:	d0a9      	beq.n	800669a <__sflush_r+0x1a>
 8006746:	0793      	lsls	r3, r2, #30
 8006748:	680e      	ldr	r6, [r1, #0]
 800674a:	bf08      	it	eq
 800674c:	694b      	ldreq	r3, [r1, #20]
 800674e:	600f      	str	r7, [r1, #0]
 8006750:	bf18      	it	ne
 8006752:	2300      	movne	r3, #0
 8006754:	eba6 0807 	sub.w	r8, r6, r7
 8006758:	608b      	str	r3, [r1, #8]
 800675a:	f1b8 0f00 	cmp.w	r8, #0
 800675e:	dd9c      	ble.n	800669a <__sflush_r+0x1a>
 8006760:	6a21      	ldr	r1, [r4, #32]
 8006762:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006764:	4643      	mov	r3, r8
 8006766:	463a      	mov	r2, r7
 8006768:	4628      	mov	r0, r5
 800676a:	47b0      	blx	r6
 800676c:	2800      	cmp	r0, #0
 800676e:	dc06      	bgt.n	800677e <__sflush_r+0xfe>
 8006770:	89a3      	ldrh	r3, [r4, #12]
 8006772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006776:	81a3      	strh	r3, [r4, #12]
 8006778:	f04f 30ff 	mov.w	r0, #4294967295
 800677c:	e78e      	b.n	800669c <__sflush_r+0x1c>
 800677e:	4407      	add	r7, r0
 8006780:	eba8 0800 	sub.w	r8, r8, r0
 8006784:	e7e9      	b.n	800675a <__sflush_r+0xda>
 8006786:	bf00      	nop
 8006788:	20400001 	.word	0x20400001

0800678c <_fflush_r>:
 800678c:	b538      	push	{r3, r4, r5, lr}
 800678e:	690b      	ldr	r3, [r1, #16]
 8006790:	4605      	mov	r5, r0
 8006792:	460c      	mov	r4, r1
 8006794:	b913      	cbnz	r3, 800679c <_fflush_r+0x10>
 8006796:	2500      	movs	r5, #0
 8006798:	4628      	mov	r0, r5
 800679a:	bd38      	pop	{r3, r4, r5, pc}
 800679c:	b118      	cbz	r0, 80067a6 <_fflush_r+0x1a>
 800679e:	6983      	ldr	r3, [r0, #24]
 80067a0:	b90b      	cbnz	r3, 80067a6 <_fflush_r+0x1a>
 80067a2:	f000 f887 	bl	80068b4 <__sinit>
 80067a6:	4b14      	ldr	r3, [pc, #80]	; (80067f8 <_fflush_r+0x6c>)
 80067a8:	429c      	cmp	r4, r3
 80067aa:	d11b      	bne.n	80067e4 <_fflush_r+0x58>
 80067ac:	686c      	ldr	r4, [r5, #4]
 80067ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d0ef      	beq.n	8006796 <_fflush_r+0xa>
 80067b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067b8:	07d0      	lsls	r0, r2, #31
 80067ba:	d404      	bmi.n	80067c6 <_fflush_r+0x3a>
 80067bc:	0599      	lsls	r1, r3, #22
 80067be:	d402      	bmi.n	80067c6 <_fflush_r+0x3a>
 80067c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067c2:	f000 f915 	bl	80069f0 <__retarget_lock_acquire_recursive>
 80067c6:	4628      	mov	r0, r5
 80067c8:	4621      	mov	r1, r4
 80067ca:	f7ff ff59 	bl	8006680 <__sflush_r>
 80067ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067d0:	07da      	lsls	r2, r3, #31
 80067d2:	4605      	mov	r5, r0
 80067d4:	d4e0      	bmi.n	8006798 <_fflush_r+0xc>
 80067d6:	89a3      	ldrh	r3, [r4, #12]
 80067d8:	059b      	lsls	r3, r3, #22
 80067da:	d4dd      	bmi.n	8006798 <_fflush_r+0xc>
 80067dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067de:	f000 f908 	bl	80069f2 <__retarget_lock_release_recursive>
 80067e2:	e7d9      	b.n	8006798 <_fflush_r+0xc>
 80067e4:	4b05      	ldr	r3, [pc, #20]	; (80067fc <_fflush_r+0x70>)
 80067e6:	429c      	cmp	r4, r3
 80067e8:	d101      	bne.n	80067ee <_fflush_r+0x62>
 80067ea:	68ac      	ldr	r4, [r5, #8]
 80067ec:	e7df      	b.n	80067ae <_fflush_r+0x22>
 80067ee:	4b04      	ldr	r3, [pc, #16]	; (8006800 <_fflush_r+0x74>)
 80067f0:	429c      	cmp	r4, r3
 80067f2:	bf08      	it	eq
 80067f4:	68ec      	ldreq	r4, [r5, #12]
 80067f6:	e7da      	b.n	80067ae <_fflush_r+0x22>
 80067f8:	080078bc 	.word	0x080078bc
 80067fc:	080078dc 	.word	0x080078dc
 8006800:	0800789c 	.word	0x0800789c

08006804 <std>:
 8006804:	2300      	movs	r3, #0
 8006806:	b510      	push	{r4, lr}
 8006808:	4604      	mov	r4, r0
 800680a:	e9c0 3300 	strd	r3, r3, [r0]
 800680e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006812:	6083      	str	r3, [r0, #8]
 8006814:	8181      	strh	r1, [r0, #12]
 8006816:	6643      	str	r3, [r0, #100]	; 0x64
 8006818:	81c2      	strh	r2, [r0, #14]
 800681a:	6183      	str	r3, [r0, #24]
 800681c:	4619      	mov	r1, r3
 800681e:	2208      	movs	r2, #8
 8006820:	305c      	adds	r0, #92	; 0x5c
 8006822:	f7ff fdb7 	bl	8006394 <memset>
 8006826:	4b05      	ldr	r3, [pc, #20]	; (800683c <std+0x38>)
 8006828:	6263      	str	r3, [r4, #36]	; 0x24
 800682a:	4b05      	ldr	r3, [pc, #20]	; (8006840 <std+0x3c>)
 800682c:	62a3      	str	r3, [r4, #40]	; 0x28
 800682e:	4b05      	ldr	r3, [pc, #20]	; (8006844 <std+0x40>)
 8006830:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006832:	4b05      	ldr	r3, [pc, #20]	; (8006848 <std+0x44>)
 8006834:	6224      	str	r4, [r4, #32]
 8006836:	6323      	str	r3, [r4, #48]	; 0x30
 8006838:	bd10      	pop	{r4, pc}
 800683a:	bf00      	nop
 800683c:	080074c5 	.word	0x080074c5
 8006840:	080074e7 	.word	0x080074e7
 8006844:	0800751f 	.word	0x0800751f
 8006848:	08007543 	.word	0x08007543

0800684c <_cleanup_r>:
 800684c:	4901      	ldr	r1, [pc, #4]	; (8006854 <_cleanup_r+0x8>)
 800684e:	f000 b8af 	b.w	80069b0 <_fwalk_reent>
 8006852:	bf00      	nop
 8006854:	0800678d 	.word	0x0800678d

08006858 <__sfmoreglue>:
 8006858:	b570      	push	{r4, r5, r6, lr}
 800685a:	1e4a      	subs	r2, r1, #1
 800685c:	2568      	movs	r5, #104	; 0x68
 800685e:	4355      	muls	r5, r2
 8006860:	460e      	mov	r6, r1
 8006862:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006866:	f000 f979 	bl	8006b5c <_malloc_r>
 800686a:	4604      	mov	r4, r0
 800686c:	b140      	cbz	r0, 8006880 <__sfmoreglue+0x28>
 800686e:	2100      	movs	r1, #0
 8006870:	e9c0 1600 	strd	r1, r6, [r0]
 8006874:	300c      	adds	r0, #12
 8006876:	60a0      	str	r0, [r4, #8]
 8006878:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800687c:	f7ff fd8a 	bl	8006394 <memset>
 8006880:	4620      	mov	r0, r4
 8006882:	bd70      	pop	{r4, r5, r6, pc}

08006884 <__sfp_lock_acquire>:
 8006884:	4801      	ldr	r0, [pc, #4]	; (800688c <__sfp_lock_acquire+0x8>)
 8006886:	f000 b8b3 	b.w	80069f0 <__retarget_lock_acquire_recursive>
 800688a:	bf00      	nop
 800688c:	20000340 	.word	0x20000340

08006890 <__sfp_lock_release>:
 8006890:	4801      	ldr	r0, [pc, #4]	; (8006898 <__sfp_lock_release+0x8>)
 8006892:	f000 b8ae 	b.w	80069f2 <__retarget_lock_release_recursive>
 8006896:	bf00      	nop
 8006898:	20000340 	.word	0x20000340

0800689c <__sinit_lock_acquire>:
 800689c:	4801      	ldr	r0, [pc, #4]	; (80068a4 <__sinit_lock_acquire+0x8>)
 800689e:	f000 b8a7 	b.w	80069f0 <__retarget_lock_acquire_recursive>
 80068a2:	bf00      	nop
 80068a4:	2000033b 	.word	0x2000033b

080068a8 <__sinit_lock_release>:
 80068a8:	4801      	ldr	r0, [pc, #4]	; (80068b0 <__sinit_lock_release+0x8>)
 80068aa:	f000 b8a2 	b.w	80069f2 <__retarget_lock_release_recursive>
 80068ae:	bf00      	nop
 80068b0:	2000033b 	.word	0x2000033b

080068b4 <__sinit>:
 80068b4:	b510      	push	{r4, lr}
 80068b6:	4604      	mov	r4, r0
 80068b8:	f7ff fff0 	bl	800689c <__sinit_lock_acquire>
 80068bc:	69a3      	ldr	r3, [r4, #24]
 80068be:	b11b      	cbz	r3, 80068c8 <__sinit+0x14>
 80068c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068c4:	f7ff bff0 	b.w	80068a8 <__sinit_lock_release>
 80068c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068cc:	6523      	str	r3, [r4, #80]	; 0x50
 80068ce:	4b13      	ldr	r3, [pc, #76]	; (800691c <__sinit+0x68>)
 80068d0:	4a13      	ldr	r2, [pc, #76]	; (8006920 <__sinit+0x6c>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80068d6:	42a3      	cmp	r3, r4
 80068d8:	bf04      	itt	eq
 80068da:	2301      	moveq	r3, #1
 80068dc:	61a3      	streq	r3, [r4, #24]
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 f820 	bl	8006924 <__sfp>
 80068e4:	6060      	str	r0, [r4, #4]
 80068e6:	4620      	mov	r0, r4
 80068e8:	f000 f81c 	bl	8006924 <__sfp>
 80068ec:	60a0      	str	r0, [r4, #8]
 80068ee:	4620      	mov	r0, r4
 80068f0:	f000 f818 	bl	8006924 <__sfp>
 80068f4:	2200      	movs	r2, #0
 80068f6:	60e0      	str	r0, [r4, #12]
 80068f8:	2104      	movs	r1, #4
 80068fa:	6860      	ldr	r0, [r4, #4]
 80068fc:	f7ff ff82 	bl	8006804 <std>
 8006900:	68a0      	ldr	r0, [r4, #8]
 8006902:	2201      	movs	r2, #1
 8006904:	2109      	movs	r1, #9
 8006906:	f7ff ff7d 	bl	8006804 <std>
 800690a:	68e0      	ldr	r0, [r4, #12]
 800690c:	2202      	movs	r2, #2
 800690e:	2112      	movs	r1, #18
 8006910:	f7ff ff78 	bl	8006804 <std>
 8006914:	2301      	movs	r3, #1
 8006916:	61a3      	str	r3, [r4, #24]
 8006918:	e7d2      	b.n	80068c0 <__sinit+0xc>
 800691a:	bf00      	nop
 800691c:	08007898 	.word	0x08007898
 8006920:	0800684d 	.word	0x0800684d

08006924 <__sfp>:
 8006924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006926:	4607      	mov	r7, r0
 8006928:	f7ff ffac 	bl	8006884 <__sfp_lock_acquire>
 800692c:	4b1e      	ldr	r3, [pc, #120]	; (80069a8 <__sfp+0x84>)
 800692e:	681e      	ldr	r6, [r3, #0]
 8006930:	69b3      	ldr	r3, [r6, #24]
 8006932:	b913      	cbnz	r3, 800693a <__sfp+0x16>
 8006934:	4630      	mov	r0, r6
 8006936:	f7ff ffbd 	bl	80068b4 <__sinit>
 800693a:	3648      	adds	r6, #72	; 0x48
 800693c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006940:	3b01      	subs	r3, #1
 8006942:	d503      	bpl.n	800694c <__sfp+0x28>
 8006944:	6833      	ldr	r3, [r6, #0]
 8006946:	b30b      	cbz	r3, 800698c <__sfp+0x68>
 8006948:	6836      	ldr	r6, [r6, #0]
 800694a:	e7f7      	b.n	800693c <__sfp+0x18>
 800694c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006950:	b9d5      	cbnz	r5, 8006988 <__sfp+0x64>
 8006952:	4b16      	ldr	r3, [pc, #88]	; (80069ac <__sfp+0x88>)
 8006954:	60e3      	str	r3, [r4, #12]
 8006956:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800695a:	6665      	str	r5, [r4, #100]	; 0x64
 800695c:	f000 f847 	bl	80069ee <__retarget_lock_init_recursive>
 8006960:	f7ff ff96 	bl	8006890 <__sfp_lock_release>
 8006964:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006968:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800696c:	6025      	str	r5, [r4, #0]
 800696e:	61a5      	str	r5, [r4, #24]
 8006970:	2208      	movs	r2, #8
 8006972:	4629      	mov	r1, r5
 8006974:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006978:	f7ff fd0c 	bl	8006394 <memset>
 800697c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006980:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006984:	4620      	mov	r0, r4
 8006986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006988:	3468      	adds	r4, #104	; 0x68
 800698a:	e7d9      	b.n	8006940 <__sfp+0x1c>
 800698c:	2104      	movs	r1, #4
 800698e:	4638      	mov	r0, r7
 8006990:	f7ff ff62 	bl	8006858 <__sfmoreglue>
 8006994:	4604      	mov	r4, r0
 8006996:	6030      	str	r0, [r6, #0]
 8006998:	2800      	cmp	r0, #0
 800699a:	d1d5      	bne.n	8006948 <__sfp+0x24>
 800699c:	f7ff ff78 	bl	8006890 <__sfp_lock_release>
 80069a0:	230c      	movs	r3, #12
 80069a2:	603b      	str	r3, [r7, #0]
 80069a4:	e7ee      	b.n	8006984 <__sfp+0x60>
 80069a6:	bf00      	nop
 80069a8:	08007898 	.word	0x08007898
 80069ac:	ffff0001 	.word	0xffff0001

080069b0 <_fwalk_reent>:
 80069b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069b4:	4606      	mov	r6, r0
 80069b6:	4688      	mov	r8, r1
 80069b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069bc:	2700      	movs	r7, #0
 80069be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069c2:	f1b9 0901 	subs.w	r9, r9, #1
 80069c6:	d505      	bpl.n	80069d4 <_fwalk_reent+0x24>
 80069c8:	6824      	ldr	r4, [r4, #0]
 80069ca:	2c00      	cmp	r4, #0
 80069cc:	d1f7      	bne.n	80069be <_fwalk_reent+0xe>
 80069ce:	4638      	mov	r0, r7
 80069d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069d4:	89ab      	ldrh	r3, [r5, #12]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d907      	bls.n	80069ea <_fwalk_reent+0x3a>
 80069da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069de:	3301      	adds	r3, #1
 80069e0:	d003      	beq.n	80069ea <_fwalk_reent+0x3a>
 80069e2:	4629      	mov	r1, r5
 80069e4:	4630      	mov	r0, r6
 80069e6:	47c0      	blx	r8
 80069e8:	4307      	orrs	r7, r0
 80069ea:	3568      	adds	r5, #104	; 0x68
 80069ec:	e7e9      	b.n	80069c2 <_fwalk_reent+0x12>

080069ee <__retarget_lock_init_recursive>:
 80069ee:	4770      	bx	lr

080069f0 <__retarget_lock_acquire_recursive>:
 80069f0:	4770      	bx	lr

080069f2 <__retarget_lock_release_recursive>:
 80069f2:	4770      	bx	lr

080069f4 <__swhatbuf_r>:
 80069f4:	b570      	push	{r4, r5, r6, lr}
 80069f6:	460e      	mov	r6, r1
 80069f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069fc:	2900      	cmp	r1, #0
 80069fe:	b096      	sub	sp, #88	; 0x58
 8006a00:	4614      	mov	r4, r2
 8006a02:	461d      	mov	r5, r3
 8006a04:	da07      	bge.n	8006a16 <__swhatbuf_r+0x22>
 8006a06:	2300      	movs	r3, #0
 8006a08:	602b      	str	r3, [r5, #0]
 8006a0a:	89b3      	ldrh	r3, [r6, #12]
 8006a0c:	061a      	lsls	r2, r3, #24
 8006a0e:	d410      	bmi.n	8006a32 <__swhatbuf_r+0x3e>
 8006a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a14:	e00e      	b.n	8006a34 <__swhatbuf_r+0x40>
 8006a16:	466a      	mov	r2, sp
 8006a18:	f000 fdba 	bl	8007590 <_fstat_r>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	dbf2      	blt.n	8006a06 <__swhatbuf_r+0x12>
 8006a20:	9a01      	ldr	r2, [sp, #4]
 8006a22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a2a:	425a      	negs	r2, r3
 8006a2c:	415a      	adcs	r2, r3
 8006a2e:	602a      	str	r2, [r5, #0]
 8006a30:	e7ee      	b.n	8006a10 <__swhatbuf_r+0x1c>
 8006a32:	2340      	movs	r3, #64	; 0x40
 8006a34:	2000      	movs	r0, #0
 8006a36:	6023      	str	r3, [r4, #0]
 8006a38:	b016      	add	sp, #88	; 0x58
 8006a3a:	bd70      	pop	{r4, r5, r6, pc}

08006a3c <__smakebuf_r>:
 8006a3c:	898b      	ldrh	r3, [r1, #12]
 8006a3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a40:	079d      	lsls	r5, r3, #30
 8006a42:	4606      	mov	r6, r0
 8006a44:	460c      	mov	r4, r1
 8006a46:	d507      	bpl.n	8006a58 <__smakebuf_r+0x1c>
 8006a48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	6123      	str	r3, [r4, #16]
 8006a50:	2301      	movs	r3, #1
 8006a52:	6163      	str	r3, [r4, #20]
 8006a54:	b002      	add	sp, #8
 8006a56:	bd70      	pop	{r4, r5, r6, pc}
 8006a58:	ab01      	add	r3, sp, #4
 8006a5a:	466a      	mov	r2, sp
 8006a5c:	f7ff ffca 	bl	80069f4 <__swhatbuf_r>
 8006a60:	9900      	ldr	r1, [sp, #0]
 8006a62:	4605      	mov	r5, r0
 8006a64:	4630      	mov	r0, r6
 8006a66:	f000 f879 	bl	8006b5c <_malloc_r>
 8006a6a:	b948      	cbnz	r0, 8006a80 <__smakebuf_r+0x44>
 8006a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a70:	059a      	lsls	r2, r3, #22
 8006a72:	d4ef      	bmi.n	8006a54 <__smakebuf_r+0x18>
 8006a74:	f023 0303 	bic.w	r3, r3, #3
 8006a78:	f043 0302 	orr.w	r3, r3, #2
 8006a7c:	81a3      	strh	r3, [r4, #12]
 8006a7e:	e7e3      	b.n	8006a48 <__smakebuf_r+0xc>
 8006a80:	4b0d      	ldr	r3, [pc, #52]	; (8006ab8 <__smakebuf_r+0x7c>)
 8006a82:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	6020      	str	r0, [r4, #0]
 8006a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8c:	81a3      	strh	r3, [r4, #12]
 8006a8e:	9b00      	ldr	r3, [sp, #0]
 8006a90:	6163      	str	r3, [r4, #20]
 8006a92:	9b01      	ldr	r3, [sp, #4]
 8006a94:	6120      	str	r0, [r4, #16]
 8006a96:	b15b      	cbz	r3, 8006ab0 <__smakebuf_r+0x74>
 8006a98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f000 fd89 	bl	80075b4 <_isatty_r>
 8006aa2:	b128      	cbz	r0, 8006ab0 <__smakebuf_r+0x74>
 8006aa4:	89a3      	ldrh	r3, [r4, #12]
 8006aa6:	f023 0303 	bic.w	r3, r3, #3
 8006aaa:	f043 0301 	orr.w	r3, r3, #1
 8006aae:	81a3      	strh	r3, [r4, #12]
 8006ab0:	89a0      	ldrh	r0, [r4, #12]
 8006ab2:	4305      	orrs	r5, r0
 8006ab4:	81a5      	strh	r5, [r4, #12]
 8006ab6:	e7cd      	b.n	8006a54 <__smakebuf_r+0x18>
 8006ab8:	0800684d 	.word	0x0800684d

08006abc <_free_r>:
 8006abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006abe:	2900      	cmp	r1, #0
 8006ac0:	d048      	beq.n	8006b54 <_free_r+0x98>
 8006ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ac6:	9001      	str	r0, [sp, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f1a1 0404 	sub.w	r4, r1, #4
 8006ace:	bfb8      	it	lt
 8006ad0:	18e4      	addlt	r4, r4, r3
 8006ad2:	f000 fdb9 	bl	8007648 <__malloc_lock>
 8006ad6:	4a20      	ldr	r2, [pc, #128]	; (8006b58 <_free_r+0x9c>)
 8006ad8:	9801      	ldr	r0, [sp, #4]
 8006ada:	6813      	ldr	r3, [r2, #0]
 8006adc:	4615      	mov	r5, r2
 8006ade:	b933      	cbnz	r3, 8006aee <_free_r+0x32>
 8006ae0:	6063      	str	r3, [r4, #4]
 8006ae2:	6014      	str	r4, [r2, #0]
 8006ae4:	b003      	add	sp, #12
 8006ae6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006aea:	f000 bdb3 	b.w	8007654 <__malloc_unlock>
 8006aee:	42a3      	cmp	r3, r4
 8006af0:	d90b      	bls.n	8006b0a <_free_r+0x4e>
 8006af2:	6821      	ldr	r1, [r4, #0]
 8006af4:	1862      	adds	r2, r4, r1
 8006af6:	4293      	cmp	r3, r2
 8006af8:	bf04      	itt	eq
 8006afa:	681a      	ldreq	r2, [r3, #0]
 8006afc:	685b      	ldreq	r3, [r3, #4]
 8006afe:	6063      	str	r3, [r4, #4]
 8006b00:	bf04      	itt	eq
 8006b02:	1852      	addeq	r2, r2, r1
 8006b04:	6022      	streq	r2, [r4, #0]
 8006b06:	602c      	str	r4, [r5, #0]
 8006b08:	e7ec      	b.n	8006ae4 <_free_r+0x28>
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	b10b      	cbz	r3, 8006b14 <_free_r+0x58>
 8006b10:	42a3      	cmp	r3, r4
 8006b12:	d9fa      	bls.n	8006b0a <_free_r+0x4e>
 8006b14:	6811      	ldr	r1, [r2, #0]
 8006b16:	1855      	adds	r5, r2, r1
 8006b18:	42a5      	cmp	r5, r4
 8006b1a:	d10b      	bne.n	8006b34 <_free_r+0x78>
 8006b1c:	6824      	ldr	r4, [r4, #0]
 8006b1e:	4421      	add	r1, r4
 8006b20:	1854      	adds	r4, r2, r1
 8006b22:	42a3      	cmp	r3, r4
 8006b24:	6011      	str	r1, [r2, #0]
 8006b26:	d1dd      	bne.n	8006ae4 <_free_r+0x28>
 8006b28:	681c      	ldr	r4, [r3, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	6053      	str	r3, [r2, #4]
 8006b2e:	4421      	add	r1, r4
 8006b30:	6011      	str	r1, [r2, #0]
 8006b32:	e7d7      	b.n	8006ae4 <_free_r+0x28>
 8006b34:	d902      	bls.n	8006b3c <_free_r+0x80>
 8006b36:	230c      	movs	r3, #12
 8006b38:	6003      	str	r3, [r0, #0]
 8006b3a:	e7d3      	b.n	8006ae4 <_free_r+0x28>
 8006b3c:	6825      	ldr	r5, [r4, #0]
 8006b3e:	1961      	adds	r1, r4, r5
 8006b40:	428b      	cmp	r3, r1
 8006b42:	bf04      	itt	eq
 8006b44:	6819      	ldreq	r1, [r3, #0]
 8006b46:	685b      	ldreq	r3, [r3, #4]
 8006b48:	6063      	str	r3, [r4, #4]
 8006b4a:	bf04      	itt	eq
 8006b4c:	1949      	addeq	r1, r1, r5
 8006b4e:	6021      	streq	r1, [r4, #0]
 8006b50:	6054      	str	r4, [r2, #4]
 8006b52:	e7c7      	b.n	8006ae4 <_free_r+0x28>
 8006b54:	b003      	add	sp, #12
 8006b56:	bd30      	pop	{r4, r5, pc}
 8006b58:	200000ac 	.word	0x200000ac

08006b5c <_malloc_r>:
 8006b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5e:	1ccd      	adds	r5, r1, #3
 8006b60:	f025 0503 	bic.w	r5, r5, #3
 8006b64:	3508      	adds	r5, #8
 8006b66:	2d0c      	cmp	r5, #12
 8006b68:	bf38      	it	cc
 8006b6a:	250c      	movcc	r5, #12
 8006b6c:	2d00      	cmp	r5, #0
 8006b6e:	4606      	mov	r6, r0
 8006b70:	db01      	blt.n	8006b76 <_malloc_r+0x1a>
 8006b72:	42a9      	cmp	r1, r5
 8006b74:	d903      	bls.n	8006b7e <_malloc_r+0x22>
 8006b76:	230c      	movs	r3, #12
 8006b78:	6033      	str	r3, [r6, #0]
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b7e:	f000 fd63 	bl	8007648 <__malloc_lock>
 8006b82:	4921      	ldr	r1, [pc, #132]	; (8006c08 <_malloc_r+0xac>)
 8006b84:	680a      	ldr	r2, [r1, #0]
 8006b86:	4614      	mov	r4, r2
 8006b88:	b99c      	cbnz	r4, 8006bb2 <_malloc_r+0x56>
 8006b8a:	4f20      	ldr	r7, [pc, #128]	; (8006c0c <_malloc_r+0xb0>)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	b923      	cbnz	r3, 8006b9a <_malloc_r+0x3e>
 8006b90:	4621      	mov	r1, r4
 8006b92:	4630      	mov	r0, r6
 8006b94:	f000 fc86 	bl	80074a4 <_sbrk_r>
 8006b98:	6038      	str	r0, [r7, #0]
 8006b9a:	4629      	mov	r1, r5
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	f000 fc81 	bl	80074a4 <_sbrk_r>
 8006ba2:	1c43      	adds	r3, r0, #1
 8006ba4:	d123      	bne.n	8006bee <_malloc_r+0x92>
 8006ba6:	230c      	movs	r3, #12
 8006ba8:	6033      	str	r3, [r6, #0]
 8006baa:	4630      	mov	r0, r6
 8006bac:	f000 fd52 	bl	8007654 <__malloc_unlock>
 8006bb0:	e7e3      	b.n	8006b7a <_malloc_r+0x1e>
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	1b5b      	subs	r3, r3, r5
 8006bb6:	d417      	bmi.n	8006be8 <_malloc_r+0x8c>
 8006bb8:	2b0b      	cmp	r3, #11
 8006bba:	d903      	bls.n	8006bc4 <_malloc_r+0x68>
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	441c      	add	r4, r3
 8006bc0:	6025      	str	r5, [r4, #0]
 8006bc2:	e004      	b.n	8006bce <_malloc_r+0x72>
 8006bc4:	6863      	ldr	r3, [r4, #4]
 8006bc6:	42a2      	cmp	r2, r4
 8006bc8:	bf0c      	ite	eq
 8006bca:	600b      	streq	r3, [r1, #0]
 8006bcc:	6053      	strne	r3, [r2, #4]
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f000 fd40 	bl	8007654 <__malloc_unlock>
 8006bd4:	f104 000b 	add.w	r0, r4, #11
 8006bd8:	1d23      	adds	r3, r4, #4
 8006bda:	f020 0007 	bic.w	r0, r0, #7
 8006bde:	1ac2      	subs	r2, r0, r3
 8006be0:	d0cc      	beq.n	8006b7c <_malloc_r+0x20>
 8006be2:	1a1b      	subs	r3, r3, r0
 8006be4:	50a3      	str	r3, [r4, r2]
 8006be6:	e7c9      	b.n	8006b7c <_malloc_r+0x20>
 8006be8:	4622      	mov	r2, r4
 8006bea:	6864      	ldr	r4, [r4, #4]
 8006bec:	e7cc      	b.n	8006b88 <_malloc_r+0x2c>
 8006bee:	1cc4      	adds	r4, r0, #3
 8006bf0:	f024 0403 	bic.w	r4, r4, #3
 8006bf4:	42a0      	cmp	r0, r4
 8006bf6:	d0e3      	beq.n	8006bc0 <_malloc_r+0x64>
 8006bf8:	1a21      	subs	r1, r4, r0
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	f000 fc52 	bl	80074a4 <_sbrk_r>
 8006c00:	3001      	adds	r0, #1
 8006c02:	d1dd      	bne.n	8006bc0 <_malloc_r+0x64>
 8006c04:	e7cf      	b.n	8006ba6 <_malloc_r+0x4a>
 8006c06:	bf00      	nop
 8006c08:	200000ac 	.word	0x200000ac
 8006c0c:	200000b0 	.word	0x200000b0

08006c10 <__ssputs_r>:
 8006c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c14:	688e      	ldr	r6, [r1, #8]
 8006c16:	429e      	cmp	r6, r3
 8006c18:	4682      	mov	sl, r0
 8006c1a:	460c      	mov	r4, r1
 8006c1c:	4690      	mov	r8, r2
 8006c1e:	461f      	mov	r7, r3
 8006c20:	d838      	bhi.n	8006c94 <__ssputs_r+0x84>
 8006c22:	898a      	ldrh	r2, [r1, #12]
 8006c24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c28:	d032      	beq.n	8006c90 <__ssputs_r+0x80>
 8006c2a:	6825      	ldr	r5, [r4, #0]
 8006c2c:	6909      	ldr	r1, [r1, #16]
 8006c2e:	eba5 0901 	sub.w	r9, r5, r1
 8006c32:	6965      	ldr	r5, [r4, #20]
 8006c34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	444b      	add	r3, r9
 8006c40:	106d      	asrs	r5, r5, #1
 8006c42:	429d      	cmp	r5, r3
 8006c44:	bf38      	it	cc
 8006c46:	461d      	movcc	r5, r3
 8006c48:	0553      	lsls	r3, r2, #21
 8006c4a:	d531      	bpl.n	8006cb0 <__ssputs_r+0xa0>
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	f7ff ff85 	bl	8006b5c <_malloc_r>
 8006c52:	4606      	mov	r6, r0
 8006c54:	b950      	cbnz	r0, 8006c6c <__ssputs_r+0x5c>
 8006c56:	230c      	movs	r3, #12
 8006c58:	f8ca 3000 	str.w	r3, [sl]
 8006c5c:	89a3      	ldrh	r3, [r4, #12]
 8006c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c62:	81a3      	strh	r3, [r4, #12]
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295
 8006c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6c:	6921      	ldr	r1, [r4, #16]
 8006c6e:	464a      	mov	r2, r9
 8006c70:	f000 fcc2 	bl	80075f8 <memcpy>
 8006c74:	89a3      	ldrh	r3, [r4, #12]
 8006c76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c7e:	81a3      	strh	r3, [r4, #12]
 8006c80:	6126      	str	r6, [r4, #16]
 8006c82:	6165      	str	r5, [r4, #20]
 8006c84:	444e      	add	r6, r9
 8006c86:	eba5 0509 	sub.w	r5, r5, r9
 8006c8a:	6026      	str	r6, [r4, #0]
 8006c8c:	60a5      	str	r5, [r4, #8]
 8006c8e:	463e      	mov	r6, r7
 8006c90:	42be      	cmp	r6, r7
 8006c92:	d900      	bls.n	8006c96 <__ssputs_r+0x86>
 8006c94:	463e      	mov	r6, r7
 8006c96:	4632      	mov	r2, r6
 8006c98:	6820      	ldr	r0, [r4, #0]
 8006c9a:	4641      	mov	r1, r8
 8006c9c:	f000 fcba 	bl	8007614 <memmove>
 8006ca0:	68a3      	ldr	r3, [r4, #8]
 8006ca2:	6822      	ldr	r2, [r4, #0]
 8006ca4:	1b9b      	subs	r3, r3, r6
 8006ca6:	4432      	add	r2, r6
 8006ca8:	60a3      	str	r3, [r4, #8]
 8006caa:	6022      	str	r2, [r4, #0]
 8006cac:	2000      	movs	r0, #0
 8006cae:	e7db      	b.n	8006c68 <__ssputs_r+0x58>
 8006cb0:	462a      	mov	r2, r5
 8006cb2:	f000 fcd5 	bl	8007660 <_realloc_r>
 8006cb6:	4606      	mov	r6, r0
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d1e1      	bne.n	8006c80 <__ssputs_r+0x70>
 8006cbc:	6921      	ldr	r1, [r4, #16]
 8006cbe:	4650      	mov	r0, sl
 8006cc0:	f7ff fefc 	bl	8006abc <_free_r>
 8006cc4:	e7c7      	b.n	8006c56 <__ssputs_r+0x46>
	...

08006cc8 <_svfiprintf_r>:
 8006cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ccc:	4698      	mov	r8, r3
 8006cce:	898b      	ldrh	r3, [r1, #12]
 8006cd0:	061b      	lsls	r3, r3, #24
 8006cd2:	b09d      	sub	sp, #116	; 0x74
 8006cd4:	4607      	mov	r7, r0
 8006cd6:	460d      	mov	r5, r1
 8006cd8:	4614      	mov	r4, r2
 8006cda:	d50e      	bpl.n	8006cfa <_svfiprintf_r+0x32>
 8006cdc:	690b      	ldr	r3, [r1, #16]
 8006cde:	b963      	cbnz	r3, 8006cfa <_svfiprintf_r+0x32>
 8006ce0:	2140      	movs	r1, #64	; 0x40
 8006ce2:	f7ff ff3b 	bl	8006b5c <_malloc_r>
 8006ce6:	6028      	str	r0, [r5, #0]
 8006ce8:	6128      	str	r0, [r5, #16]
 8006cea:	b920      	cbnz	r0, 8006cf6 <_svfiprintf_r+0x2e>
 8006cec:	230c      	movs	r3, #12
 8006cee:	603b      	str	r3, [r7, #0]
 8006cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf4:	e0d1      	b.n	8006e9a <_svfiprintf_r+0x1d2>
 8006cf6:	2340      	movs	r3, #64	; 0x40
 8006cf8:	616b      	str	r3, [r5, #20]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8006cfe:	2320      	movs	r3, #32
 8006d00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d08:	2330      	movs	r3, #48	; 0x30
 8006d0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006eb4 <_svfiprintf_r+0x1ec>
 8006d0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d12:	f04f 0901 	mov.w	r9, #1
 8006d16:	4623      	mov	r3, r4
 8006d18:	469a      	mov	sl, r3
 8006d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d1e:	b10a      	cbz	r2, 8006d24 <_svfiprintf_r+0x5c>
 8006d20:	2a25      	cmp	r2, #37	; 0x25
 8006d22:	d1f9      	bne.n	8006d18 <_svfiprintf_r+0x50>
 8006d24:	ebba 0b04 	subs.w	fp, sl, r4
 8006d28:	d00b      	beq.n	8006d42 <_svfiprintf_r+0x7a>
 8006d2a:	465b      	mov	r3, fp
 8006d2c:	4622      	mov	r2, r4
 8006d2e:	4629      	mov	r1, r5
 8006d30:	4638      	mov	r0, r7
 8006d32:	f7ff ff6d 	bl	8006c10 <__ssputs_r>
 8006d36:	3001      	adds	r0, #1
 8006d38:	f000 80aa 	beq.w	8006e90 <_svfiprintf_r+0x1c8>
 8006d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d3e:	445a      	add	r2, fp
 8006d40:	9209      	str	r2, [sp, #36]	; 0x24
 8006d42:	f89a 3000 	ldrb.w	r3, [sl]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 80a2 	beq.w	8006e90 <_svfiprintf_r+0x1c8>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d56:	f10a 0a01 	add.w	sl, sl, #1
 8006d5a:	9304      	str	r3, [sp, #16]
 8006d5c:	9307      	str	r3, [sp, #28]
 8006d5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d62:	931a      	str	r3, [sp, #104]	; 0x68
 8006d64:	4654      	mov	r4, sl
 8006d66:	2205      	movs	r2, #5
 8006d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d6c:	4851      	ldr	r0, [pc, #324]	; (8006eb4 <_svfiprintf_r+0x1ec>)
 8006d6e:	f7f9 fa6f 	bl	8000250 <memchr>
 8006d72:	9a04      	ldr	r2, [sp, #16]
 8006d74:	b9d8      	cbnz	r0, 8006dae <_svfiprintf_r+0xe6>
 8006d76:	06d0      	lsls	r0, r2, #27
 8006d78:	bf44      	itt	mi
 8006d7a:	2320      	movmi	r3, #32
 8006d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d80:	0711      	lsls	r1, r2, #28
 8006d82:	bf44      	itt	mi
 8006d84:	232b      	movmi	r3, #43	; 0x2b
 8006d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8006d90:	d015      	beq.n	8006dbe <_svfiprintf_r+0xf6>
 8006d92:	9a07      	ldr	r2, [sp, #28]
 8006d94:	4654      	mov	r4, sl
 8006d96:	2000      	movs	r0, #0
 8006d98:	f04f 0c0a 	mov.w	ip, #10
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006da2:	3b30      	subs	r3, #48	; 0x30
 8006da4:	2b09      	cmp	r3, #9
 8006da6:	d94e      	bls.n	8006e46 <_svfiprintf_r+0x17e>
 8006da8:	b1b0      	cbz	r0, 8006dd8 <_svfiprintf_r+0x110>
 8006daa:	9207      	str	r2, [sp, #28]
 8006dac:	e014      	b.n	8006dd8 <_svfiprintf_r+0x110>
 8006dae:	eba0 0308 	sub.w	r3, r0, r8
 8006db2:	fa09 f303 	lsl.w	r3, r9, r3
 8006db6:	4313      	orrs	r3, r2
 8006db8:	9304      	str	r3, [sp, #16]
 8006dba:	46a2      	mov	sl, r4
 8006dbc:	e7d2      	b.n	8006d64 <_svfiprintf_r+0x9c>
 8006dbe:	9b03      	ldr	r3, [sp, #12]
 8006dc0:	1d19      	adds	r1, r3, #4
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	9103      	str	r1, [sp, #12]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	bfbb      	ittet	lt
 8006dca:	425b      	neglt	r3, r3
 8006dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8006dd0:	9307      	strge	r3, [sp, #28]
 8006dd2:	9307      	strlt	r3, [sp, #28]
 8006dd4:	bfb8      	it	lt
 8006dd6:	9204      	strlt	r2, [sp, #16]
 8006dd8:	7823      	ldrb	r3, [r4, #0]
 8006dda:	2b2e      	cmp	r3, #46	; 0x2e
 8006ddc:	d10c      	bne.n	8006df8 <_svfiprintf_r+0x130>
 8006dde:	7863      	ldrb	r3, [r4, #1]
 8006de0:	2b2a      	cmp	r3, #42	; 0x2a
 8006de2:	d135      	bne.n	8006e50 <_svfiprintf_r+0x188>
 8006de4:	9b03      	ldr	r3, [sp, #12]
 8006de6:	1d1a      	adds	r2, r3, #4
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	9203      	str	r2, [sp, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	bfb8      	it	lt
 8006df0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006df4:	3402      	adds	r4, #2
 8006df6:	9305      	str	r3, [sp, #20]
 8006df8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ec4 <_svfiprintf_r+0x1fc>
 8006dfc:	7821      	ldrb	r1, [r4, #0]
 8006dfe:	2203      	movs	r2, #3
 8006e00:	4650      	mov	r0, sl
 8006e02:	f7f9 fa25 	bl	8000250 <memchr>
 8006e06:	b140      	cbz	r0, 8006e1a <_svfiprintf_r+0x152>
 8006e08:	2340      	movs	r3, #64	; 0x40
 8006e0a:	eba0 000a 	sub.w	r0, r0, sl
 8006e0e:	fa03 f000 	lsl.w	r0, r3, r0
 8006e12:	9b04      	ldr	r3, [sp, #16]
 8006e14:	4303      	orrs	r3, r0
 8006e16:	3401      	adds	r4, #1
 8006e18:	9304      	str	r3, [sp, #16]
 8006e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e1e:	4826      	ldr	r0, [pc, #152]	; (8006eb8 <_svfiprintf_r+0x1f0>)
 8006e20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e24:	2206      	movs	r2, #6
 8006e26:	f7f9 fa13 	bl	8000250 <memchr>
 8006e2a:	2800      	cmp	r0, #0
 8006e2c:	d038      	beq.n	8006ea0 <_svfiprintf_r+0x1d8>
 8006e2e:	4b23      	ldr	r3, [pc, #140]	; (8006ebc <_svfiprintf_r+0x1f4>)
 8006e30:	bb1b      	cbnz	r3, 8006e7a <_svfiprintf_r+0x1b2>
 8006e32:	9b03      	ldr	r3, [sp, #12]
 8006e34:	3307      	adds	r3, #7
 8006e36:	f023 0307 	bic.w	r3, r3, #7
 8006e3a:	3308      	adds	r3, #8
 8006e3c:	9303      	str	r3, [sp, #12]
 8006e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e40:	4433      	add	r3, r6
 8006e42:	9309      	str	r3, [sp, #36]	; 0x24
 8006e44:	e767      	b.n	8006d16 <_svfiprintf_r+0x4e>
 8006e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e4a:	460c      	mov	r4, r1
 8006e4c:	2001      	movs	r0, #1
 8006e4e:	e7a5      	b.n	8006d9c <_svfiprintf_r+0xd4>
 8006e50:	2300      	movs	r3, #0
 8006e52:	3401      	adds	r4, #1
 8006e54:	9305      	str	r3, [sp, #20]
 8006e56:	4619      	mov	r1, r3
 8006e58:	f04f 0c0a 	mov.w	ip, #10
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e62:	3a30      	subs	r2, #48	; 0x30
 8006e64:	2a09      	cmp	r2, #9
 8006e66:	d903      	bls.n	8006e70 <_svfiprintf_r+0x1a8>
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d0c5      	beq.n	8006df8 <_svfiprintf_r+0x130>
 8006e6c:	9105      	str	r1, [sp, #20]
 8006e6e:	e7c3      	b.n	8006df8 <_svfiprintf_r+0x130>
 8006e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e74:	4604      	mov	r4, r0
 8006e76:	2301      	movs	r3, #1
 8006e78:	e7f0      	b.n	8006e5c <_svfiprintf_r+0x194>
 8006e7a:	ab03      	add	r3, sp, #12
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	462a      	mov	r2, r5
 8006e80:	4b0f      	ldr	r3, [pc, #60]	; (8006ec0 <_svfiprintf_r+0x1f8>)
 8006e82:	a904      	add	r1, sp, #16
 8006e84:	4638      	mov	r0, r7
 8006e86:	f3af 8000 	nop.w
 8006e8a:	1c42      	adds	r2, r0, #1
 8006e8c:	4606      	mov	r6, r0
 8006e8e:	d1d6      	bne.n	8006e3e <_svfiprintf_r+0x176>
 8006e90:	89ab      	ldrh	r3, [r5, #12]
 8006e92:	065b      	lsls	r3, r3, #25
 8006e94:	f53f af2c 	bmi.w	8006cf0 <_svfiprintf_r+0x28>
 8006e98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e9a:	b01d      	add	sp, #116	; 0x74
 8006e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea0:	ab03      	add	r3, sp, #12
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	462a      	mov	r2, r5
 8006ea6:	4b06      	ldr	r3, [pc, #24]	; (8006ec0 <_svfiprintf_r+0x1f8>)
 8006ea8:	a904      	add	r1, sp, #16
 8006eaa:	4638      	mov	r0, r7
 8006eac:	f000 f9d4 	bl	8007258 <_printf_i>
 8006eb0:	e7eb      	b.n	8006e8a <_svfiprintf_r+0x1c2>
 8006eb2:	bf00      	nop
 8006eb4:	080078fc 	.word	0x080078fc
 8006eb8:	08007906 	.word	0x08007906
 8006ebc:	00000000 	.word	0x00000000
 8006ec0:	08006c11 	.word	0x08006c11
 8006ec4:	08007902 	.word	0x08007902

08006ec8 <__sfputc_r>:
 8006ec8:	6893      	ldr	r3, [r2, #8]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	b410      	push	{r4}
 8006ed0:	6093      	str	r3, [r2, #8]
 8006ed2:	da08      	bge.n	8006ee6 <__sfputc_r+0x1e>
 8006ed4:	6994      	ldr	r4, [r2, #24]
 8006ed6:	42a3      	cmp	r3, r4
 8006ed8:	db01      	blt.n	8006ede <__sfputc_r+0x16>
 8006eda:	290a      	cmp	r1, #10
 8006edc:	d103      	bne.n	8006ee6 <__sfputc_r+0x1e>
 8006ede:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ee2:	f7ff bb0d 	b.w	8006500 <__swbuf_r>
 8006ee6:	6813      	ldr	r3, [r2, #0]
 8006ee8:	1c58      	adds	r0, r3, #1
 8006eea:	6010      	str	r0, [r2, #0]
 8006eec:	7019      	strb	r1, [r3, #0]
 8006eee:	4608      	mov	r0, r1
 8006ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <__sfputs_r>:
 8006ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef8:	4606      	mov	r6, r0
 8006efa:	460f      	mov	r7, r1
 8006efc:	4614      	mov	r4, r2
 8006efe:	18d5      	adds	r5, r2, r3
 8006f00:	42ac      	cmp	r4, r5
 8006f02:	d101      	bne.n	8006f08 <__sfputs_r+0x12>
 8006f04:	2000      	movs	r0, #0
 8006f06:	e007      	b.n	8006f18 <__sfputs_r+0x22>
 8006f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f0c:	463a      	mov	r2, r7
 8006f0e:	4630      	mov	r0, r6
 8006f10:	f7ff ffda 	bl	8006ec8 <__sfputc_r>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	d1f3      	bne.n	8006f00 <__sfputs_r+0xa>
 8006f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f1c <_vfiprintf_r>:
 8006f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f20:	460d      	mov	r5, r1
 8006f22:	b09d      	sub	sp, #116	; 0x74
 8006f24:	4614      	mov	r4, r2
 8006f26:	4698      	mov	r8, r3
 8006f28:	4606      	mov	r6, r0
 8006f2a:	b118      	cbz	r0, 8006f34 <_vfiprintf_r+0x18>
 8006f2c:	6983      	ldr	r3, [r0, #24]
 8006f2e:	b90b      	cbnz	r3, 8006f34 <_vfiprintf_r+0x18>
 8006f30:	f7ff fcc0 	bl	80068b4 <__sinit>
 8006f34:	4b89      	ldr	r3, [pc, #548]	; (800715c <_vfiprintf_r+0x240>)
 8006f36:	429d      	cmp	r5, r3
 8006f38:	d11b      	bne.n	8006f72 <_vfiprintf_r+0x56>
 8006f3a:	6875      	ldr	r5, [r6, #4]
 8006f3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f3e:	07d9      	lsls	r1, r3, #31
 8006f40:	d405      	bmi.n	8006f4e <_vfiprintf_r+0x32>
 8006f42:	89ab      	ldrh	r3, [r5, #12]
 8006f44:	059a      	lsls	r2, r3, #22
 8006f46:	d402      	bmi.n	8006f4e <_vfiprintf_r+0x32>
 8006f48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f4a:	f7ff fd51 	bl	80069f0 <__retarget_lock_acquire_recursive>
 8006f4e:	89ab      	ldrh	r3, [r5, #12]
 8006f50:	071b      	lsls	r3, r3, #28
 8006f52:	d501      	bpl.n	8006f58 <_vfiprintf_r+0x3c>
 8006f54:	692b      	ldr	r3, [r5, #16]
 8006f56:	b9eb      	cbnz	r3, 8006f94 <_vfiprintf_r+0x78>
 8006f58:	4629      	mov	r1, r5
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	f7ff fb22 	bl	80065a4 <__swsetup_r>
 8006f60:	b1c0      	cbz	r0, 8006f94 <_vfiprintf_r+0x78>
 8006f62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f64:	07dc      	lsls	r4, r3, #31
 8006f66:	d50e      	bpl.n	8006f86 <_vfiprintf_r+0x6a>
 8006f68:	f04f 30ff 	mov.w	r0, #4294967295
 8006f6c:	b01d      	add	sp, #116	; 0x74
 8006f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f72:	4b7b      	ldr	r3, [pc, #492]	; (8007160 <_vfiprintf_r+0x244>)
 8006f74:	429d      	cmp	r5, r3
 8006f76:	d101      	bne.n	8006f7c <_vfiprintf_r+0x60>
 8006f78:	68b5      	ldr	r5, [r6, #8]
 8006f7a:	e7df      	b.n	8006f3c <_vfiprintf_r+0x20>
 8006f7c:	4b79      	ldr	r3, [pc, #484]	; (8007164 <_vfiprintf_r+0x248>)
 8006f7e:	429d      	cmp	r5, r3
 8006f80:	bf08      	it	eq
 8006f82:	68f5      	ldreq	r5, [r6, #12]
 8006f84:	e7da      	b.n	8006f3c <_vfiprintf_r+0x20>
 8006f86:	89ab      	ldrh	r3, [r5, #12]
 8006f88:	0598      	lsls	r0, r3, #22
 8006f8a:	d4ed      	bmi.n	8006f68 <_vfiprintf_r+0x4c>
 8006f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f8e:	f7ff fd30 	bl	80069f2 <__retarget_lock_release_recursive>
 8006f92:	e7e9      	b.n	8006f68 <_vfiprintf_r+0x4c>
 8006f94:	2300      	movs	r3, #0
 8006f96:	9309      	str	r3, [sp, #36]	; 0x24
 8006f98:	2320      	movs	r3, #32
 8006f9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fa2:	2330      	movs	r3, #48	; 0x30
 8006fa4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007168 <_vfiprintf_r+0x24c>
 8006fa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fac:	f04f 0901 	mov.w	r9, #1
 8006fb0:	4623      	mov	r3, r4
 8006fb2:	469a      	mov	sl, r3
 8006fb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fb8:	b10a      	cbz	r2, 8006fbe <_vfiprintf_r+0xa2>
 8006fba:	2a25      	cmp	r2, #37	; 0x25
 8006fbc:	d1f9      	bne.n	8006fb2 <_vfiprintf_r+0x96>
 8006fbe:	ebba 0b04 	subs.w	fp, sl, r4
 8006fc2:	d00b      	beq.n	8006fdc <_vfiprintf_r+0xc0>
 8006fc4:	465b      	mov	r3, fp
 8006fc6:	4622      	mov	r2, r4
 8006fc8:	4629      	mov	r1, r5
 8006fca:	4630      	mov	r0, r6
 8006fcc:	f7ff ff93 	bl	8006ef6 <__sfputs_r>
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	f000 80aa 	beq.w	800712a <_vfiprintf_r+0x20e>
 8006fd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fd8:	445a      	add	r2, fp
 8006fda:	9209      	str	r2, [sp, #36]	; 0x24
 8006fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 80a2 	beq.w	800712a <_vfiprintf_r+0x20e>
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8006fec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ff0:	f10a 0a01 	add.w	sl, sl, #1
 8006ff4:	9304      	str	r3, [sp, #16]
 8006ff6:	9307      	str	r3, [sp, #28]
 8006ff8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ffc:	931a      	str	r3, [sp, #104]	; 0x68
 8006ffe:	4654      	mov	r4, sl
 8007000:	2205      	movs	r2, #5
 8007002:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007006:	4858      	ldr	r0, [pc, #352]	; (8007168 <_vfiprintf_r+0x24c>)
 8007008:	f7f9 f922 	bl	8000250 <memchr>
 800700c:	9a04      	ldr	r2, [sp, #16]
 800700e:	b9d8      	cbnz	r0, 8007048 <_vfiprintf_r+0x12c>
 8007010:	06d1      	lsls	r1, r2, #27
 8007012:	bf44      	itt	mi
 8007014:	2320      	movmi	r3, #32
 8007016:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800701a:	0713      	lsls	r3, r2, #28
 800701c:	bf44      	itt	mi
 800701e:	232b      	movmi	r3, #43	; 0x2b
 8007020:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007024:	f89a 3000 	ldrb.w	r3, [sl]
 8007028:	2b2a      	cmp	r3, #42	; 0x2a
 800702a:	d015      	beq.n	8007058 <_vfiprintf_r+0x13c>
 800702c:	9a07      	ldr	r2, [sp, #28]
 800702e:	4654      	mov	r4, sl
 8007030:	2000      	movs	r0, #0
 8007032:	f04f 0c0a 	mov.w	ip, #10
 8007036:	4621      	mov	r1, r4
 8007038:	f811 3b01 	ldrb.w	r3, [r1], #1
 800703c:	3b30      	subs	r3, #48	; 0x30
 800703e:	2b09      	cmp	r3, #9
 8007040:	d94e      	bls.n	80070e0 <_vfiprintf_r+0x1c4>
 8007042:	b1b0      	cbz	r0, 8007072 <_vfiprintf_r+0x156>
 8007044:	9207      	str	r2, [sp, #28]
 8007046:	e014      	b.n	8007072 <_vfiprintf_r+0x156>
 8007048:	eba0 0308 	sub.w	r3, r0, r8
 800704c:	fa09 f303 	lsl.w	r3, r9, r3
 8007050:	4313      	orrs	r3, r2
 8007052:	9304      	str	r3, [sp, #16]
 8007054:	46a2      	mov	sl, r4
 8007056:	e7d2      	b.n	8006ffe <_vfiprintf_r+0xe2>
 8007058:	9b03      	ldr	r3, [sp, #12]
 800705a:	1d19      	adds	r1, r3, #4
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	9103      	str	r1, [sp, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	bfbb      	ittet	lt
 8007064:	425b      	neglt	r3, r3
 8007066:	f042 0202 	orrlt.w	r2, r2, #2
 800706a:	9307      	strge	r3, [sp, #28]
 800706c:	9307      	strlt	r3, [sp, #28]
 800706e:	bfb8      	it	lt
 8007070:	9204      	strlt	r2, [sp, #16]
 8007072:	7823      	ldrb	r3, [r4, #0]
 8007074:	2b2e      	cmp	r3, #46	; 0x2e
 8007076:	d10c      	bne.n	8007092 <_vfiprintf_r+0x176>
 8007078:	7863      	ldrb	r3, [r4, #1]
 800707a:	2b2a      	cmp	r3, #42	; 0x2a
 800707c:	d135      	bne.n	80070ea <_vfiprintf_r+0x1ce>
 800707e:	9b03      	ldr	r3, [sp, #12]
 8007080:	1d1a      	adds	r2, r3, #4
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	9203      	str	r2, [sp, #12]
 8007086:	2b00      	cmp	r3, #0
 8007088:	bfb8      	it	lt
 800708a:	f04f 33ff 	movlt.w	r3, #4294967295
 800708e:	3402      	adds	r4, #2
 8007090:	9305      	str	r3, [sp, #20]
 8007092:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007178 <_vfiprintf_r+0x25c>
 8007096:	7821      	ldrb	r1, [r4, #0]
 8007098:	2203      	movs	r2, #3
 800709a:	4650      	mov	r0, sl
 800709c:	f7f9 f8d8 	bl	8000250 <memchr>
 80070a0:	b140      	cbz	r0, 80070b4 <_vfiprintf_r+0x198>
 80070a2:	2340      	movs	r3, #64	; 0x40
 80070a4:	eba0 000a 	sub.w	r0, r0, sl
 80070a8:	fa03 f000 	lsl.w	r0, r3, r0
 80070ac:	9b04      	ldr	r3, [sp, #16]
 80070ae:	4303      	orrs	r3, r0
 80070b0:	3401      	adds	r4, #1
 80070b2:	9304      	str	r3, [sp, #16]
 80070b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070b8:	482c      	ldr	r0, [pc, #176]	; (800716c <_vfiprintf_r+0x250>)
 80070ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070be:	2206      	movs	r2, #6
 80070c0:	f7f9 f8c6 	bl	8000250 <memchr>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	d03f      	beq.n	8007148 <_vfiprintf_r+0x22c>
 80070c8:	4b29      	ldr	r3, [pc, #164]	; (8007170 <_vfiprintf_r+0x254>)
 80070ca:	bb1b      	cbnz	r3, 8007114 <_vfiprintf_r+0x1f8>
 80070cc:	9b03      	ldr	r3, [sp, #12]
 80070ce:	3307      	adds	r3, #7
 80070d0:	f023 0307 	bic.w	r3, r3, #7
 80070d4:	3308      	adds	r3, #8
 80070d6:	9303      	str	r3, [sp, #12]
 80070d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070da:	443b      	add	r3, r7
 80070dc:	9309      	str	r3, [sp, #36]	; 0x24
 80070de:	e767      	b.n	8006fb0 <_vfiprintf_r+0x94>
 80070e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80070e4:	460c      	mov	r4, r1
 80070e6:	2001      	movs	r0, #1
 80070e8:	e7a5      	b.n	8007036 <_vfiprintf_r+0x11a>
 80070ea:	2300      	movs	r3, #0
 80070ec:	3401      	adds	r4, #1
 80070ee:	9305      	str	r3, [sp, #20]
 80070f0:	4619      	mov	r1, r3
 80070f2:	f04f 0c0a 	mov.w	ip, #10
 80070f6:	4620      	mov	r0, r4
 80070f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070fc:	3a30      	subs	r2, #48	; 0x30
 80070fe:	2a09      	cmp	r2, #9
 8007100:	d903      	bls.n	800710a <_vfiprintf_r+0x1ee>
 8007102:	2b00      	cmp	r3, #0
 8007104:	d0c5      	beq.n	8007092 <_vfiprintf_r+0x176>
 8007106:	9105      	str	r1, [sp, #20]
 8007108:	e7c3      	b.n	8007092 <_vfiprintf_r+0x176>
 800710a:	fb0c 2101 	mla	r1, ip, r1, r2
 800710e:	4604      	mov	r4, r0
 8007110:	2301      	movs	r3, #1
 8007112:	e7f0      	b.n	80070f6 <_vfiprintf_r+0x1da>
 8007114:	ab03      	add	r3, sp, #12
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	462a      	mov	r2, r5
 800711a:	4b16      	ldr	r3, [pc, #88]	; (8007174 <_vfiprintf_r+0x258>)
 800711c:	a904      	add	r1, sp, #16
 800711e:	4630      	mov	r0, r6
 8007120:	f3af 8000 	nop.w
 8007124:	4607      	mov	r7, r0
 8007126:	1c78      	adds	r0, r7, #1
 8007128:	d1d6      	bne.n	80070d8 <_vfiprintf_r+0x1bc>
 800712a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800712c:	07d9      	lsls	r1, r3, #31
 800712e:	d405      	bmi.n	800713c <_vfiprintf_r+0x220>
 8007130:	89ab      	ldrh	r3, [r5, #12]
 8007132:	059a      	lsls	r2, r3, #22
 8007134:	d402      	bmi.n	800713c <_vfiprintf_r+0x220>
 8007136:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007138:	f7ff fc5b 	bl	80069f2 <__retarget_lock_release_recursive>
 800713c:	89ab      	ldrh	r3, [r5, #12]
 800713e:	065b      	lsls	r3, r3, #25
 8007140:	f53f af12 	bmi.w	8006f68 <_vfiprintf_r+0x4c>
 8007144:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007146:	e711      	b.n	8006f6c <_vfiprintf_r+0x50>
 8007148:	ab03      	add	r3, sp, #12
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	462a      	mov	r2, r5
 800714e:	4b09      	ldr	r3, [pc, #36]	; (8007174 <_vfiprintf_r+0x258>)
 8007150:	a904      	add	r1, sp, #16
 8007152:	4630      	mov	r0, r6
 8007154:	f000 f880 	bl	8007258 <_printf_i>
 8007158:	e7e4      	b.n	8007124 <_vfiprintf_r+0x208>
 800715a:	bf00      	nop
 800715c:	080078bc 	.word	0x080078bc
 8007160:	080078dc 	.word	0x080078dc
 8007164:	0800789c 	.word	0x0800789c
 8007168:	080078fc 	.word	0x080078fc
 800716c:	08007906 	.word	0x08007906
 8007170:	00000000 	.word	0x00000000
 8007174:	08006ef7 	.word	0x08006ef7
 8007178:	08007902 	.word	0x08007902

0800717c <_printf_common>:
 800717c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007180:	4616      	mov	r6, r2
 8007182:	4699      	mov	r9, r3
 8007184:	688a      	ldr	r2, [r1, #8]
 8007186:	690b      	ldr	r3, [r1, #16]
 8007188:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800718c:	4293      	cmp	r3, r2
 800718e:	bfb8      	it	lt
 8007190:	4613      	movlt	r3, r2
 8007192:	6033      	str	r3, [r6, #0]
 8007194:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007198:	4607      	mov	r7, r0
 800719a:	460c      	mov	r4, r1
 800719c:	b10a      	cbz	r2, 80071a2 <_printf_common+0x26>
 800719e:	3301      	adds	r3, #1
 80071a0:	6033      	str	r3, [r6, #0]
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	0699      	lsls	r1, r3, #26
 80071a6:	bf42      	ittt	mi
 80071a8:	6833      	ldrmi	r3, [r6, #0]
 80071aa:	3302      	addmi	r3, #2
 80071ac:	6033      	strmi	r3, [r6, #0]
 80071ae:	6825      	ldr	r5, [r4, #0]
 80071b0:	f015 0506 	ands.w	r5, r5, #6
 80071b4:	d106      	bne.n	80071c4 <_printf_common+0x48>
 80071b6:	f104 0a19 	add.w	sl, r4, #25
 80071ba:	68e3      	ldr	r3, [r4, #12]
 80071bc:	6832      	ldr	r2, [r6, #0]
 80071be:	1a9b      	subs	r3, r3, r2
 80071c0:	42ab      	cmp	r3, r5
 80071c2:	dc26      	bgt.n	8007212 <_printf_common+0x96>
 80071c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071c8:	1e13      	subs	r3, r2, #0
 80071ca:	6822      	ldr	r2, [r4, #0]
 80071cc:	bf18      	it	ne
 80071ce:	2301      	movne	r3, #1
 80071d0:	0692      	lsls	r2, r2, #26
 80071d2:	d42b      	bmi.n	800722c <_printf_common+0xb0>
 80071d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071d8:	4649      	mov	r1, r9
 80071da:	4638      	mov	r0, r7
 80071dc:	47c0      	blx	r8
 80071de:	3001      	adds	r0, #1
 80071e0:	d01e      	beq.n	8007220 <_printf_common+0xa4>
 80071e2:	6823      	ldr	r3, [r4, #0]
 80071e4:	68e5      	ldr	r5, [r4, #12]
 80071e6:	6832      	ldr	r2, [r6, #0]
 80071e8:	f003 0306 	and.w	r3, r3, #6
 80071ec:	2b04      	cmp	r3, #4
 80071ee:	bf08      	it	eq
 80071f0:	1aad      	subeq	r5, r5, r2
 80071f2:	68a3      	ldr	r3, [r4, #8]
 80071f4:	6922      	ldr	r2, [r4, #16]
 80071f6:	bf0c      	ite	eq
 80071f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071fc:	2500      	movne	r5, #0
 80071fe:	4293      	cmp	r3, r2
 8007200:	bfc4      	itt	gt
 8007202:	1a9b      	subgt	r3, r3, r2
 8007204:	18ed      	addgt	r5, r5, r3
 8007206:	2600      	movs	r6, #0
 8007208:	341a      	adds	r4, #26
 800720a:	42b5      	cmp	r5, r6
 800720c:	d11a      	bne.n	8007244 <_printf_common+0xc8>
 800720e:	2000      	movs	r0, #0
 8007210:	e008      	b.n	8007224 <_printf_common+0xa8>
 8007212:	2301      	movs	r3, #1
 8007214:	4652      	mov	r2, sl
 8007216:	4649      	mov	r1, r9
 8007218:	4638      	mov	r0, r7
 800721a:	47c0      	blx	r8
 800721c:	3001      	adds	r0, #1
 800721e:	d103      	bne.n	8007228 <_printf_common+0xac>
 8007220:	f04f 30ff 	mov.w	r0, #4294967295
 8007224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007228:	3501      	adds	r5, #1
 800722a:	e7c6      	b.n	80071ba <_printf_common+0x3e>
 800722c:	18e1      	adds	r1, r4, r3
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	2030      	movs	r0, #48	; 0x30
 8007232:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007236:	4422      	add	r2, r4
 8007238:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800723c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007240:	3302      	adds	r3, #2
 8007242:	e7c7      	b.n	80071d4 <_printf_common+0x58>
 8007244:	2301      	movs	r3, #1
 8007246:	4622      	mov	r2, r4
 8007248:	4649      	mov	r1, r9
 800724a:	4638      	mov	r0, r7
 800724c:	47c0      	blx	r8
 800724e:	3001      	adds	r0, #1
 8007250:	d0e6      	beq.n	8007220 <_printf_common+0xa4>
 8007252:	3601      	adds	r6, #1
 8007254:	e7d9      	b.n	800720a <_printf_common+0x8e>
	...

08007258 <_printf_i>:
 8007258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800725c:	460c      	mov	r4, r1
 800725e:	4691      	mov	r9, r2
 8007260:	7e27      	ldrb	r7, [r4, #24]
 8007262:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007264:	2f78      	cmp	r7, #120	; 0x78
 8007266:	4680      	mov	r8, r0
 8007268:	469a      	mov	sl, r3
 800726a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800726e:	d807      	bhi.n	8007280 <_printf_i+0x28>
 8007270:	2f62      	cmp	r7, #98	; 0x62
 8007272:	d80a      	bhi.n	800728a <_printf_i+0x32>
 8007274:	2f00      	cmp	r7, #0
 8007276:	f000 80d8 	beq.w	800742a <_printf_i+0x1d2>
 800727a:	2f58      	cmp	r7, #88	; 0x58
 800727c:	f000 80a3 	beq.w	80073c6 <_printf_i+0x16e>
 8007280:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007284:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007288:	e03a      	b.n	8007300 <_printf_i+0xa8>
 800728a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800728e:	2b15      	cmp	r3, #21
 8007290:	d8f6      	bhi.n	8007280 <_printf_i+0x28>
 8007292:	a001      	add	r0, pc, #4	; (adr r0, 8007298 <_printf_i+0x40>)
 8007294:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007298:	080072f1 	.word	0x080072f1
 800729c:	08007305 	.word	0x08007305
 80072a0:	08007281 	.word	0x08007281
 80072a4:	08007281 	.word	0x08007281
 80072a8:	08007281 	.word	0x08007281
 80072ac:	08007281 	.word	0x08007281
 80072b0:	08007305 	.word	0x08007305
 80072b4:	08007281 	.word	0x08007281
 80072b8:	08007281 	.word	0x08007281
 80072bc:	08007281 	.word	0x08007281
 80072c0:	08007281 	.word	0x08007281
 80072c4:	08007411 	.word	0x08007411
 80072c8:	08007335 	.word	0x08007335
 80072cc:	080073f3 	.word	0x080073f3
 80072d0:	08007281 	.word	0x08007281
 80072d4:	08007281 	.word	0x08007281
 80072d8:	08007433 	.word	0x08007433
 80072dc:	08007281 	.word	0x08007281
 80072e0:	08007335 	.word	0x08007335
 80072e4:	08007281 	.word	0x08007281
 80072e8:	08007281 	.word	0x08007281
 80072ec:	080073fb 	.word	0x080073fb
 80072f0:	680b      	ldr	r3, [r1, #0]
 80072f2:	1d1a      	adds	r2, r3, #4
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	600a      	str	r2, [r1, #0]
 80072f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80072fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007300:	2301      	movs	r3, #1
 8007302:	e0a3      	b.n	800744c <_printf_i+0x1f4>
 8007304:	6825      	ldr	r5, [r4, #0]
 8007306:	6808      	ldr	r0, [r1, #0]
 8007308:	062e      	lsls	r6, r5, #24
 800730a:	f100 0304 	add.w	r3, r0, #4
 800730e:	d50a      	bpl.n	8007326 <_printf_i+0xce>
 8007310:	6805      	ldr	r5, [r0, #0]
 8007312:	600b      	str	r3, [r1, #0]
 8007314:	2d00      	cmp	r5, #0
 8007316:	da03      	bge.n	8007320 <_printf_i+0xc8>
 8007318:	232d      	movs	r3, #45	; 0x2d
 800731a:	426d      	negs	r5, r5
 800731c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007320:	485e      	ldr	r0, [pc, #376]	; (800749c <_printf_i+0x244>)
 8007322:	230a      	movs	r3, #10
 8007324:	e019      	b.n	800735a <_printf_i+0x102>
 8007326:	f015 0f40 	tst.w	r5, #64	; 0x40
 800732a:	6805      	ldr	r5, [r0, #0]
 800732c:	600b      	str	r3, [r1, #0]
 800732e:	bf18      	it	ne
 8007330:	b22d      	sxthne	r5, r5
 8007332:	e7ef      	b.n	8007314 <_printf_i+0xbc>
 8007334:	680b      	ldr	r3, [r1, #0]
 8007336:	6825      	ldr	r5, [r4, #0]
 8007338:	1d18      	adds	r0, r3, #4
 800733a:	6008      	str	r0, [r1, #0]
 800733c:	0628      	lsls	r0, r5, #24
 800733e:	d501      	bpl.n	8007344 <_printf_i+0xec>
 8007340:	681d      	ldr	r5, [r3, #0]
 8007342:	e002      	b.n	800734a <_printf_i+0xf2>
 8007344:	0669      	lsls	r1, r5, #25
 8007346:	d5fb      	bpl.n	8007340 <_printf_i+0xe8>
 8007348:	881d      	ldrh	r5, [r3, #0]
 800734a:	4854      	ldr	r0, [pc, #336]	; (800749c <_printf_i+0x244>)
 800734c:	2f6f      	cmp	r7, #111	; 0x6f
 800734e:	bf0c      	ite	eq
 8007350:	2308      	moveq	r3, #8
 8007352:	230a      	movne	r3, #10
 8007354:	2100      	movs	r1, #0
 8007356:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800735a:	6866      	ldr	r6, [r4, #4]
 800735c:	60a6      	str	r6, [r4, #8]
 800735e:	2e00      	cmp	r6, #0
 8007360:	bfa2      	ittt	ge
 8007362:	6821      	ldrge	r1, [r4, #0]
 8007364:	f021 0104 	bicge.w	r1, r1, #4
 8007368:	6021      	strge	r1, [r4, #0]
 800736a:	b90d      	cbnz	r5, 8007370 <_printf_i+0x118>
 800736c:	2e00      	cmp	r6, #0
 800736e:	d04d      	beq.n	800740c <_printf_i+0x1b4>
 8007370:	4616      	mov	r6, r2
 8007372:	fbb5 f1f3 	udiv	r1, r5, r3
 8007376:	fb03 5711 	mls	r7, r3, r1, r5
 800737a:	5dc7      	ldrb	r7, [r0, r7]
 800737c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007380:	462f      	mov	r7, r5
 8007382:	42bb      	cmp	r3, r7
 8007384:	460d      	mov	r5, r1
 8007386:	d9f4      	bls.n	8007372 <_printf_i+0x11a>
 8007388:	2b08      	cmp	r3, #8
 800738a:	d10b      	bne.n	80073a4 <_printf_i+0x14c>
 800738c:	6823      	ldr	r3, [r4, #0]
 800738e:	07df      	lsls	r7, r3, #31
 8007390:	d508      	bpl.n	80073a4 <_printf_i+0x14c>
 8007392:	6923      	ldr	r3, [r4, #16]
 8007394:	6861      	ldr	r1, [r4, #4]
 8007396:	4299      	cmp	r1, r3
 8007398:	bfde      	ittt	le
 800739a:	2330      	movle	r3, #48	; 0x30
 800739c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073a4:	1b92      	subs	r2, r2, r6
 80073a6:	6122      	str	r2, [r4, #16]
 80073a8:	f8cd a000 	str.w	sl, [sp]
 80073ac:	464b      	mov	r3, r9
 80073ae:	aa03      	add	r2, sp, #12
 80073b0:	4621      	mov	r1, r4
 80073b2:	4640      	mov	r0, r8
 80073b4:	f7ff fee2 	bl	800717c <_printf_common>
 80073b8:	3001      	adds	r0, #1
 80073ba:	d14c      	bne.n	8007456 <_printf_i+0x1fe>
 80073bc:	f04f 30ff 	mov.w	r0, #4294967295
 80073c0:	b004      	add	sp, #16
 80073c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c6:	4835      	ldr	r0, [pc, #212]	; (800749c <_printf_i+0x244>)
 80073c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	680e      	ldr	r6, [r1, #0]
 80073d0:	061f      	lsls	r7, r3, #24
 80073d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80073d6:	600e      	str	r6, [r1, #0]
 80073d8:	d514      	bpl.n	8007404 <_printf_i+0x1ac>
 80073da:	07d9      	lsls	r1, r3, #31
 80073dc:	bf44      	itt	mi
 80073de:	f043 0320 	orrmi.w	r3, r3, #32
 80073e2:	6023      	strmi	r3, [r4, #0]
 80073e4:	b91d      	cbnz	r5, 80073ee <_printf_i+0x196>
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	f023 0320 	bic.w	r3, r3, #32
 80073ec:	6023      	str	r3, [r4, #0]
 80073ee:	2310      	movs	r3, #16
 80073f0:	e7b0      	b.n	8007354 <_printf_i+0xfc>
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	f043 0320 	orr.w	r3, r3, #32
 80073f8:	6023      	str	r3, [r4, #0]
 80073fa:	2378      	movs	r3, #120	; 0x78
 80073fc:	4828      	ldr	r0, [pc, #160]	; (80074a0 <_printf_i+0x248>)
 80073fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007402:	e7e3      	b.n	80073cc <_printf_i+0x174>
 8007404:	065e      	lsls	r6, r3, #25
 8007406:	bf48      	it	mi
 8007408:	b2ad      	uxthmi	r5, r5
 800740a:	e7e6      	b.n	80073da <_printf_i+0x182>
 800740c:	4616      	mov	r6, r2
 800740e:	e7bb      	b.n	8007388 <_printf_i+0x130>
 8007410:	680b      	ldr	r3, [r1, #0]
 8007412:	6826      	ldr	r6, [r4, #0]
 8007414:	6960      	ldr	r0, [r4, #20]
 8007416:	1d1d      	adds	r5, r3, #4
 8007418:	600d      	str	r5, [r1, #0]
 800741a:	0635      	lsls	r5, r6, #24
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	d501      	bpl.n	8007424 <_printf_i+0x1cc>
 8007420:	6018      	str	r0, [r3, #0]
 8007422:	e002      	b.n	800742a <_printf_i+0x1d2>
 8007424:	0671      	lsls	r1, r6, #25
 8007426:	d5fb      	bpl.n	8007420 <_printf_i+0x1c8>
 8007428:	8018      	strh	r0, [r3, #0]
 800742a:	2300      	movs	r3, #0
 800742c:	6123      	str	r3, [r4, #16]
 800742e:	4616      	mov	r6, r2
 8007430:	e7ba      	b.n	80073a8 <_printf_i+0x150>
 8007432:	680b      	ldr	r3, [r1, #0]
 8007434:	1d1a      	adds	r2, r3, #4
 8007436:	600a      	str	r2, [r1, #0]
 8007438:	681e      	ldr	r6, [r3, #0]
 800743a:	6862      	ldr	r2, [r4, #4]
 800743c:	2100      	movs	r1, #0
 800743e:	4630      	mov	r0, r6
 8007440:	f7f8 ff06 	bl	8000250 <memchr>
 8007444:	b108      	cbz	r0, 800744a <_printf_i+0x1f2>
 8007446:	1b80      	subs	r0, r0, r6
 8007448:	6060      	str	r0, [r4, #4]
 800744a:	6863      	ldr	r3, [r4, #4]
 800744c:	6123      	str	r3, [r4, #16]
 800744e:	2300      	movs	r3, #0
 8007450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007454:	e7a8      	b.n	80073a8 <_printf_i+0x150>
 8007456:	6923      	ldr	r3, [r4, #16]
 8007458:	4632      	mov	r2, r6
 800745a:	4649      	mov	r1, r9
 800745c:	4640      	mov	r0, r8
 800745e:	47d0      	blx	sl
 8007460:	3001      	adds	r0, #1
 8007462:	d0ab      	beq.n	80073bc <_printf_i+0x164>
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	079b      	lsls	r3, r3, #30
 8007468:	d413      	bmi.n	8007492 <_printf_i+0x23a>
 800746a:	68e0      	ldr	r0, [r4, #12]
 800746c:	9b03      	ldr	r3, [sp, #12]
 800746e:	4298      	cmp	r0, r3
 8007470:	bfb8      	it	lt
 8007472:	4618      	movlt	r0, r3
 8007474:	e7a4      	b.n	80073c0 <_printf_i+0x168>
 8007476:	2301      	movs	r3, #1
 8007478:	4632      	mov	r2, r6
 800747a:	4649      	mov	r1, r9
 800747c:	4640      	mov	r0, r8
 800747e:	47d0      	blx	sl
 8007480:	3001      	adds	r0, #1
 8007482:	d09b      	beq.n	80073bc <_printf_i+0x164>
 8007484:	3501      	adds	r5, #1
 8007486:	68e3      	ldr	r3, [r4, #12]
 8007488:	9903      	ldr	r1, [sp, #12]
 800748a:	1a5b      	subs	r3, r3, r1
 800748c:	42ab      	cmp	r3, r5
 800748e:	dcf2      	bgt.n	8007476 <_printf_i+0x21e>
 8007490:	e7eb      	b.n	800746a <_printf_i+0x212>
 8007492:	2500      	movs	r5, #0
 8007494:	f104 0619 	add.w	r6, r4, #25
 8007498:	e7f5      	b.n	8007486 <_printf_i+0x22e>
 800749a:	bf00      	nop
 800749c:	0800790d 	.word	0x0800790d
 80074a0:	0800791e 	.word	0x0800791e

080074a4 <_sbrk_r>:
 80074a4:	b538      	push	{r3, r4, r5, lr}
 80074a6:	4d06      	ldr	r5, [pc, #24]	; (80074c0 <_sbrk_r+0x1c>)
 80074a8:	2300      	movs	r3, #0
 80074aa:	4604      	mov	r4, r0
 80074ac:	4608      	mov	r0, r1
 80074ae:	602b      	str	r3, [r5, #0]
 80074b0:	f7f9 fc6a 	bl	8000d88 <_sbrk>
 80074b4:	1c43      	adds	r3, r0, #1
 80074b6:	d102      	bne.n	80074be <_sbrk_r+0x1a>
 80074b8:	682b      	ldr	r3, [r5, #0]
 80074ba:	b103      	cbz	r3, 80074be <_sbrk_r+0x1a>
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	bd38      	pop	{r3, r4, r5, pc}
 80074c0:	20000344 	.word	0x20000344

080074c4 <__sread>:
 80074c4:	b510      	push	{r4, lr}
 80074c6:	460c      	mov	r4, r1
 80074c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074cc:	f000 f8ee 	bl	80076ac <_read_r>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	bfab      	itete	ge
 80074d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074d6:	89a3      	ldrhlt	r3, [r4, #12]
 80074d8:	181b      	addge	r3, r3, r0
 80074da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074de:	bfac      	ite	ge
 80074e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80074e2:	81a3      	strhlt	r3, [r4, #12]
 80074e4:	bd10      	pop	{r4, pc}

080074e6 <__swrite>:
 80074e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ea:	461f      	mov	r7, r3
 80074ec:	898b      	ldrh	r3, [r1, #12]
 80074ee:	05db      	lsls	r3, r3, #23
 80074f0:	4605      	mov	r5, r0
 80074f2:	460c      	mov	r4, r1
 80074f4:	4616      	mov	r6, r2
 80074f6:	d505      	bpl.n	8007504 <__swrite+0x1e>
 80074f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074fc:	2302      	movs	r3, #2
 80074fe:	2200      	movs	r2, #0
 8007500:	f000 f868 	bl	80075d4 <_lseek_r>
 8007504:	89a3      	ldrh	r3, [r4, #12]
 8007506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800750a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800750e:	81a3      	strh	r3, [r4, #12]
 8007510:	4632      	mov	r2, r6
 8007512:	463b      	mov	r3, r7
 8007514:	4628      	mov	r0, r5
 8007516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800751a:	f000 b817 	b.w	800754c <_write_r>

0800751e <__sseek>:
 800751e:	b510      	push	{r4, lr}
 8007520:	460c      	mov	r4, r1
 8007522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007526:	f000 f855 	bl	80075d4 <_lseek_r>
 800752a:	1c43      	adds	r3, r0, #1
 800752c:	89a3      	ldrh	r3, [r4, #12]
 800752e:	bf15      	itete	ne
 8007530:	6560      	strne	r0, [r4, #84]	; 0x54
 8007532:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007536:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800753a:	81a3      	strheq	r3, [r4, #12]
 800753c:	bf18      	it	ne
 800753e:	81a3      	strhne	r3, [r4, #12]
 8007540:	bd10      	pop	{r4, pc}

08007542 <__sclose>:
 8007542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007546:	f000 b813 	b.w	8007570 <_close_r>
	...

0800754c <_write_r>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	4d07      	ldr	r5, [pc, #28]	; (800756c <_write_r+0x20>)
 8007550:	4604      	mov	r4, r0
 8007552:	4608      	mov	r0, r1
 8007554:	4611      	mov	r1, r2
 8007556:	2200      	movs	r2, #0
 8007558:	602a      	str	r2, [r5, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	f7f9 fbc3 	bl	8000ce6 <_write>
 8007560:	1c43      	adds	r3, r0, #1
 8007562:	d102      	bne.n	800756a <_write_r+0x1e>
 8007564:	682b      	ldr	r3, [r5, #0]
 8007566:	b103      	cbz	r3, 800756a <_write_r+0x1e>
 8007568:	6023      	str	r3, [r4, #0]
 800756a:	bd38      	pop	{r3, r4, r5, pc}
 800756c:	20000344 	.word	0x20000344

08007570 <_close_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	4d06      	ldr	r5, [pc, #24]	; (800758c <_close_r+0x1c>)
 8007574:	2300      	movs	r3, #0
 8007576:	4604      	mov	r4, r0
 8007578:	4608      	mov	r0, r1
 800757a:	602b      	str	r3, [r5, #0]
 800757c:	f7f9 fbcf 	bl	8000d1e <_close>
 8007580:	1c43      	adds	r3, r0, #1
 8007582:	d102      	bne.n	800758a <_close_r+0x1a>
 8007584:	682b      	ldr	r3, [r5, #0]
 8007586:	b103      	cbz	r3, 800758a <_close_r+0x1a>
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	bd38      	pop	{r3, r4, r5, pc}
 800758c:	20000344 	.word	0x20000344

08007590 <_fstat_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	4d07      	ldr	r5, [pc, #28]	; (80075b0 <_fstat_r+0x20>)
 8007594:	2300      	movs	r3, #0
 8007596:	4604      	mov	r4, r0
 8007598:	4608      	mov	r0, r1
 800759a:	4611      	mov	r1, r2
 800759c:	602b      	str	r3, [r5, #0]
 800759e:	f7f9 fbca 	bl	8000d36 <_fstat>
 80075a2:	1c43      	adds	r3, r0, #1
 80075a4:	d102      	bne.n	80075ac <_fstat_r+0x1c>
 80075a6:	682b      	ldr	r3, [r5, #0]
 80075a8:	b103      	cbz	r3, 80075ac <_fstat_r+0x1c>
 80075aa:	6023      	str	r3, [r4, #0]
 80075ac:	bd38      	pop	{r3, r4, r5, pc}
 80075ae:	bf00      	nop
 80075b0:	20000344 	.word	0x20000344

080075b4 <_isatty_r>:
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	4d06      	ldr	r5, [pc, #24]	; (80075d0 <_isatty_r+0x1c>)
 80075b8:	2300      	movs	r3, #0
 80075ba:	4604      	mov	r4, r0
 80075bc:	4608      	mov	r0, r1
 80075be:	602b      	str	r3, [r5, #0]
 80075c0:	f7f9 fbc9 	bl	8000d56 <_isatty>
 80075c4:	1c43      	adds	r3, r0, #1
 80075c6:	d102      	bne.n	80075ce <_isatty_r+0x1a>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	b103      	cbz	r3, 80075ce <_isatty_r+0x1a>
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	bd38      	pop	{r3, r4, r5, pc}
 80075d0:	20000344 	.word	0x20000344

080075d4 <_lseek_r>:
 80075d4:	b538      	push	{r3, r4, r5, lr}
 80075d6:	4d07      	ldr	r5, [pc, #28]	; (80075f4 <_lseek_r+0x20>)
 80075d8:	4604      	mov	r4, r0
 80075da:	4608      	mov	r0, r1
 80075dc:	4611      	mov	r1, r2
 80075de:	2200      	movs	r2, #0
 80075e0:	602a      	str	r2, [r5, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	f7f9 fbc2 	bl	8000d6c <_lseek>
 80075e8:	1c43      	adds	r3, r0, #1
 80075ea:	d102      	bne.n	80075f2 <_lseek_r+0x1e>
 80075ec:	682b      	ldr	r3, [r5, #0]
 80075ee:	b103      	cbz	r3, 80075f2 <_lseek_r+0x1e>
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	bd38      	pop	{r3, r4, r5, pc}
 80075f4:	20000344 	.word	0x20000344

080075f8 <memcpy>:
 80075f8:	440a      	add	r2, r1
 80075fa:	4291      	cmp	r1, r2
 80075fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007600:	d100      	bne.n	8007604 <memcpy+0xc>
 8007602:	4770      	bx	lr
 8007604:	b510      	push	{r4, lr}
 8007606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800760a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800760e:	4291      	cmp	r1, r2
 8007610:	d1f9      	bne.n	8007606 <memcpy+0xe>
 8007612:	bd10      	pop	{r4, pc}

08007614 <memmove>:
 8007614:	4288      	cmp	r0, r1
 8007616:	b510      	push	{r4, lr}
 8007618:	eb01 0402 	add.w	r4, r1, r2
 800761c:	d902      	bls.n	8007624 <memmove+0x10>
 800761e:	4284      	cmp	r4, r0
 8007620:	4623      	mov	r3, r4
 8007622:	d807      	bhi.n	8007634 <memmove+0x20>
 8007624:	1e43      	subs	r3, r0, #1
 8007626:	42a1      	cmp	r1, r4
 8007628:	d008      	beq.n	800763c <memmove+0x28>
 800762a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800762e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007632:	e7f8      	b.n	8007626 <memmove+0x12>
 8007634:	4402      	add	r2, r0
 8007636:	4601      	mov	r1, r0
 8007638:	428a      	cmp	r2, r1
 800763a:	d100      	bne.n	800763e <memmove+0x2a>
 800763c:	bd10      	pop	{r4, pc}
 800763e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007642:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007646:	e7f7      	b.n	8007638 <memmove+0x24>

08007648 <__malloc_lock>:
 8007648:	4801      	ldr	r0, [pc, #4]	; (8007650 <__malloc_lock+0x8>)
 800764a:	f7ff b9d1 	b.w	80069f0 <__retarget_lock_acquire_recursive>
 800764e:	bf00      	nop
 8007650:	2000033c 	.word	0x2000033c

08007654 <__malloc_unlock>:
 8007654:	4801      	ldr	r0, [pc, #4]	; (800765c <__malloc_unlock+0x8>)
 8007656:	f7ff b9cc 	b.w	80069f2 <__retarget_lock_release_recursive>
 800765a:	bf00      	nop
 800765c:	2000033c 	.word	0x2000033c

08007660 <_realloc_r>:
 8007660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007662:	4607      	mov	r7, r0
 8007664:	4614      	mov	r4, r2
 8007666:	460e      	mov	r6, r1
 8007668:	b921      	cbnz	r1, 8007674 <_realloc_r+0x14>
 800766a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800766e:	4611      	mov	r1, r2
 8007670:	f7ff ba74 	b.w	8006b5c <_malloc_r>
 8007674:	b922      	cbnz	r2, 8007680 <_realloc_r+0x20>
 8007676:	f7ff fa21 	bl	8006abc <_free_r>
 800767a:	4625      	mov	r5, r4
 800767c:	4628      	mov	r0, r5
 800767e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007680:	f000 f826 	bl	80076d0 <_malloc_usable_size_r>
 8007684:	42a0      	cmp	r0, r4
 8007686:	d20f      	bcs.n	80076a8 <_realloc_r+0x48>
 8007688:	4621      	mov	r1, r4
 800768a:	4638      	mov	r0, r7
 800768c:	f7ff fa66 	bl	8006b5c <_malloc_r>
 8007690:	4605      	mov	r5, r0
 8007692:	2800      	cmp	r0, #0
 8007694:	d0f2      	beq.n	800767c <_realloc_r+0x1c>
 8007696:	4631      	mov	r1, r6
 8007698:	4622      	mov	r2, r4
 800769a:	f7ff ffad 	bl	80075f8 <memcpy>
 800769e:	4631      	mov	r1, r6
 80076a0:	4638      	mov	r0, r7
 80076a2:	f7ff fa0b 	bl	8006abc <_free_r>
 80076a6:	e7e9      	b.n	800767c <_realloc_r+0x1c>
 80076a8:	4635      	mov	r5, r6
 80076aa:	e7e7      	b.n	800767c <_realloc_r+0x1c>

080076ac <_read_r>:
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	4d07      	ldr	r5, [pc, #28]	; (80076cc <_read_r+0x20>)
 80076b0:	4604      	mov	r4, r0
 80076b2:	4608      	mov	r0, r1
 80076b4:	4611      	mov	r1, r2
 80076b6:	2200      	movs	r2, #0
 80076b8:	602a      	str	r2, [r5, #0]
 80076ba:	461a      	mov	r2, r3
 80076bc:	f7f9 faf6 	bl	8000cac <_read>
 80076c0:	1c43      	adds	r3, r0, #1
 80076c2:	d102      	bne.n	80076ca <_read_r+0x1e>
 80076c4:	682b      	ldr	r3, [r5, #0]
 80076c6:	b103      	cbz	r3, 80076ca <_read_r+0x1e>
 80076c8:	6023      	str	r3, [r4, #0]
 80076ca:	bd38      	pop	{r3, r4, r5, pc}
 80076cc:	20000344 	.word	0x20000344

080076d0 <_malloc_usable_size_r>:
 80076d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076d4:	1f18      	subs	r0, r3, #4
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	bfbc      	itt	lt
 80076da:	580b      	ldrlt	r3, [r1, r0]
 80076dc:	18c0      	addlt	r0, r0, r3
 80076de:	4770      	bx	lr

080076e0 <_init>:
 80076e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e2:	bf00      	nop
 80076e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076e6:	bc08      	pop	{r3}
 80076e8:	469e      	mov	lr, r3
 80076ea:	4770      	bx	lr

080076ec <_fini>:
 80076ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ee:	bf00      	nop
 80076f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f2:	bc08      	pop	{r3}
 80076f4:	469e      	mov	lr, r3
 80076f6:	4770      	bx	lr
